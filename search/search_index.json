{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DishPy A Python development tool for VEX Competition robotics that combines multi-file Python projects into single scripts and uploads them to VEX V5 brains. Roadmap [x] Bindings to vexcom [x] Project initialization CLI [x] Script amalgamation through AST parsing [ ] Custom libraries for projects [ ] Better documentation for using vexcom's common functions Why/when should I use DishPy over X? PROS/VEXcode text -> you don't like C++ vexide -> you don't like Rust VEXcode blocks -> you're a grown up /j VEXcode Python -> you want multifile support, an editor other than VEXcode/VSCode, libraries (coming soon!), and a CLI Note that, unlike PROS & vexide, DishPy is not a from-scratch rewrite that does scheduling and everything (as an eight grader I am physically unable to make such a thing). Instead, it uses the exact same Python VM as VEXcode and the VScode extension and uploads code in the exact same way and binds to the same SDK -- the only difference is that the DX of DishPy is wayyy better. Should you use DishPy? To get things straight, DishPy is fully competition-legal. It uploads regular Python programs to the Brain, just with better DX. Unfortunately, the answer to \"Should you use DishPy?\" right now is probably not if you are a competition team. I cannot confirm I will be available to debug or maintain this at all times, so keep that in mind. If you do want to use this in competition, make sure to read the amalgamated files before running the programs to make sure nothing was lost in translation. If you want to make this better, feel free to Contribute and file a PR. The entire repository is open-source (that's probably how you are reading this :P) Fork it! This is MIT licensed so you can do whatever you want Play with it, report errors, and ping me in VTOW about them. Features Project Management : Initialize new VEX robotics projects with a structured template Code Amalgamation : Combine multi-file Python projects into single scripts with intelligent symbol prefixing VEX Integration : Built-in VEX library support and seamless upload to V5 brains Cross-Platform : Works on Linux (x64, ARM32, ARM64), macOS, and Windows Installation Make sure you have uv installed. Add the following to your .zshrc , .bashrc , etc.: export UV_INDEX_STRATEGY=\"unsafe-best-match\" export UV_EXTRA_INDEX_URL=\"https://test.pypi.org/simple/\" Open a new terminal to apply changes, and then run dishpy: uv tool run dishpy # or uvx dishpy Quick Start 1. Initialize a New Project uvx dishpy init This creates: - src/main.py - Main robot code from template - src/vex/__init__.py - VEX library for robot control. Do not touch this; it stubs the VEX API for better autocomplete and LSP support in code editors. - dishpy.json - Project configuration - .out/ - Output directory for combined code 2. Develop Your Robot Code Edit src/main.py and create additional modules in the src/ directory. You can import and use modules freely - dishpy will handle combining them into a single file. Example project structure: my-robot/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 main.py # Main robot code \u2502 \u251c\u2500\u2500 autonomous.py # Autonomous routines \u2502 \u251c\u2500\u2500 driver.py # Driver control functions \u2502 \u2514\u2500\u2500 vex/ # VEX library \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 dishpy.json # Project configuration \u2514\u2500\u2500 .out/ # Combined output Note that all competition functions, such as autonomous and driver , have to be in main.py . 3. Build and Upload uvx dishpy mu This command: 1. Combines all Python files in src/ into a single script 2. Resolves imports and prevents naming conflicts with intelligent prefixing 3. Uploads the combined code to your VEX V5 brain Commands dishpy init Initialize a new VEX robotics project with template files and project structure. dishpy mu Build and upload your project: - Combines multi-file project into single script - Uploads to VEX V5 brain using project configuration - Add --verbose flag for detailed output dishpy vexcom [args...] Direct access to the underlying vexcom tool for advanced usage. Pass any vexcom arguments directly. Using VEXcom Directly DishPy includes the vexcom binary which can be called directly for advanced usage or troubleshooting. The dishpy vexcom command is a convenience wrapper that passes all arguments to the underlying vexcom binary. examples uvx dishpy vexcom --flag1 arg1 --etc --python=my_python_vm.bin --json --progress Project Configuration The dishpy.json file contains project settings: { \"name\": \"My Robot Project\", \"slot\": 1 } name : Display name for your robot program slot : Program slot on the V5 brain (1-8) Code Amalgamation DishPy's amalgamator intelligently combines multiple Python files into a single script by: Dependency Analysis : Scans your project to understand import relationships Symbol Prefixing : Prevents naming conflicts by prefixing symbols from different files Import Resolution : Resolves local imports and preserves external library imports Topological Sorting : Orders files correctly based on dependencies Example Usage from vex import * # Create motor and sensor objects left_motor = Motor(Ports.PORT1) right_motor = Motor(Ports.PORT2) controller = Controller() # Drive robot def drive(): left_motor.spin(FORWARD, controller.axis1.position(), PERCENT) right_motor.spin(FORWARD, controller.axis2.position(), PERCENT) Platform Support DishPy includes pre-compiled vexcom binaries for: - Linux x64 - Linux ARM32 (Raspberry Pi) - Linux ARM64 (Raspberry Pi 4+) - macOS - Windows 32-bit Requirements Python 3.12+ VEX V5 Brain with USB connection Contributing DishPy is designed to streamline VEX Competition robotics development in Python. Contributions are welcome for: - Additional VEX library features - Code amalgamation improvements - Cross-platform compatibility - Documentation and examples License This project is licensed under the MIT License. Credits Lewis | vexide (reverse-engineering vexcom calls) andrew | 781X (digging thru extension code w/ me) Aadish | 3151A (me) Chroma | 3332A | 3151A (inspiration) Gemini 2.5 Pro (LLM -- first run) Claude 4 Sonnet (LLM -- agentic tasks) [This page was copied from the README of our GitHub repository.]","title":"DishPy"},{"location":"#dishpy","text":"A Python development tool for VEX Competition robotics that combines multi-file Python projects into single scripts and uploads them to VEX V5 brains.","title":"DishPy"},{"location":"#roadmap","text":"[x] Bindings to vexcom [x] Project initialization CLI [x] Script amalgamation through AST parsing [ ] Custom libraries for projects [ ] Better documentation for using vexcom's common functions","title":"Roadmap"},{"location":"#whywhen-should-i-use-dishpy-over-x","text":"PROS/VEXcode text -> you don't like C++ vexide -> you don't like Rust VEXcode blocks -> you're a grown up /j VEXcode Python -> you want multifile support, an editor other than VEXcode/VSCode, libraries (coming soon!), and a CLI Note that, unlike PROS & vexide, DishPy is not a from-scratch rewrite that does scheduling and everything (as an eight grader I am physically unable to make such a thing). Instead, it uses the exact same Python VM as VEXcode and the VScode extension and uploads code in the exact same way and binds to the same SDK -- the only difference is that the DX of DishPy is wayyy better.","title":"Why/when should I use DishPy over X?"},{"location":"#should-you-use-dishpy","text":"To get things straight, DishPy is fully competition-legal. It uploads regular Python programs to the Brain, just with better DX. Unfortunately, the answer to \"Should you use DishPy?\" right now is probably not if you are a competition team. I cannot confirm I will be available to debug or maintain this at all times, so keep that in mind. If you do want to use this in competition, make sure to read the amalgamated files before running the programs to make sure nothing was lost in translation. If you want to make this better, feel free to Contribute and file a PR. The entire repository is open-source (that's probably how you are reading this :P) Fork it! This is MIT licensed so you can do whatever you want Play with it, report errors, and ping me in VTOW about them.","title":"Should you use DishPy?"},{"location":"#features","text":"Project Management : Initialize new VEX robotics projects with a structured template Code Amalgamation : Combine multi-file Python projects into single scripts with intelligent symbol prefixing VEX Integration : Built-in VEX library support and seamless upload to V5 brains Cross-Platform : Works on Linux (x64, ARM32, ARM64), macOS, and Windows","title":"Features"},{"location":"#installation","text":"Make sure you have uv installed. Add the following to your .zshrc , .bashrc , etc.: export UV_INDEX_STRATEGY=\"unsafe-best-match\" export UV_EXTRA_INDEX_URL=\"https://test.pypi.org/simple/\" Open a new terminal to apply changes, and then run dishpy: uv tool run dishpy # or uvx dishpy","title":"Installation"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#1-initialize-a-new-project","text":"uvx dishpy init This creates: - src/main.py - Main robot code from template - src/vex/__init__.py - VEX library for robot control. Do not touch this; it stubs the VEX API for better autocomplete and LSP support in code editors. - dishpy.json - Project configuration - .out/ - Output directory for combined code","title":"1. Initialize a New Project"},{"location":"#2-develop-your-robot-code","text":"Edit src/main.py and create additional modules in the src/ directory. You can import and use modules freely - dishpy will handle combining them into a single file. Example project structure: my-robot/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 main.py # Main robot code \u2502 \u251c\u2500\u2500 autonomous.py # Autonomous routines \u2502 \u251c\u2500\u2500 driver.py # Driver control functions \u2502 \u2514\u2500\u2500 vex/ # VEX library \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 dishpy.json # Project configuration \u2514\u2500\u2500 .out/ # Combined output Note that all competition functions, such as autonomous and driver , have to be in main.py .","title":"2. Develop Your Robot Code"},{"location":"#3-build-and-upload","text":"uvx dishpy mu This command: 1. Combines all Python files in src/ into a single script 2. Resolves imports and prevents naming conflicts with intelligent prefixing 3. Uploads the combined code to your VEX V5 brain","title":"3. Build and Upload"},{"location":"#commands","text":"","title":"Commands"},{"location":"#dishpy-init","text":"Initialize a new VEX robotics project with template files and project structure.","title":"dishpy init"},{"location":"#dishpy-mu","text":"Build and upload your project: - Combines multi-file project into single script - Uploads to VEX V5 brain using project configuration - Add --verbose flag for detailed output","title":"dishpy mu"},{"location":"#dishpy-vexcom-args","text":"Direct access to the underlying vexcom tool for advanced usage. Pass any vexcom arguments directly.","title":"dishpy vexcom [args...]"},{"location":"#using-vexcom-directly","text":"DishPy includes the vexcom binary which can be called directly for advanced usage or troubleshooting. The dishpy vexcom command is a convenience wrapper that passes all arguments to the underlying vexcom binary. examples uvx dishpy vexcom --flag1 arg1 --etc --python=my_python_vm.bin --json --progress","title":"Using VEXcom Directly"},{"location":"#project-configuration","text":"The dishpy.json file contains project settings: { \"name\": \"My Robot Project\", \"slot\": 1 } name : Display name for your robot program slot : Program slot on the V5 brain (1-8)","title":"Project Configuration"},{"location":"#code-amalgamation","text":"DishPy's amalgamator intelligently combines multiple Python files into a single script by: Dependency Analysis : Scans your project to understand import relationships Symbol Prefixing : Prevents naming conflicts by prefixing symbols from different files Import Resolution : Resolves local imports and preserves external library imports Topological Sorting : Orders files correctly based on dependencies","title":"Code Amalgamation"},{"location":"#example-usage","text":"from vex import * # Create motor and sensor objects left_motor = Motor(Ports.PORT1) right_motor = Motor(Ports.PORT2) controller = Controller() # Drive robot def drive(): left_motor.spin(FORWARD, controller.axis1.position(), PERCENT) right_motor.spin(FORWARD, controller.axis2.position(), PERCENT)","title":"Example Usage"},{"location":"#platform-support","text":"DishPy includes pre-compiled vexcom binaries for: - Linux x64 - Linux ARM32 (Raspberry Pi) - Linux ARM64 (Raspberry Pi 4+) - macOS - Windows 32-bit","title":"Platform Support"},{"location":"#requirements","text":"Python 3.12+ VEX V5 Brain with USB connection","title":"Requirements"},{"location":"#contributing","text":"DishPy is designed to streamline VEX Competition robotics development in Python. Contributions are welcome for: - Additional VEX library features - Code amalgamation improvements - Cross-platform compatibility - Documentation and examples","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License.","title":"License"},{"location":"#credits","text":"Lewis | vexide (reverse-engineering vexcom calls) andrew | 781X (digging thru extension code w/ me) Aadish | 3151A (me) Chroma | 3332A | 3151A (inspiration) Gemini 2.5 Pro (LLM -- first run) Claude 4 Sonnet (LLM -- agentic tasks) [This page was copied from the README of our GitHub repository.]","title":"Credits"},{"location":"SDK/","text":"VEX V5 Python SDK Welcome to the DishPy VEX API reference. Use the navigation or links below to explore the SDK: Brain & Display Motors Sensors Controllers Enums & Units Full Reference","title":"VEX V5 Python SDK"},{"location":"SDK/#vex-v5-python-sdk","text":"Welcome to the DishPy VEX API reference. Use the navigation or links below to explore the SDK: Brain & Display Motors Sensors Controllers Enums & Units Full Reference","title":"VEX V5 Python SDK"},{"location":"SDK/brain/","text":"Brain & Display The Brain class provides access to the VEX V5 brain's built-in components, including the screen, battery, and SD card. This is the central hub for interacting with the robot's onboard hardware. Brain vex.Brain Brain class The Brain class creates a number of instances of internal classes that allow access\\ to the screen, battery, 3wire ports and sd card on the V5 brain. Arguments: None Returns: An instance of the Brain class Examples: brain = Brain() battery = Brain . Battery () An instance of the Battery class screen = Brain . Lcd () An instance of the Lcd class sdcard = Brain . Sdcard () An instance of the Sdcard class three_wire_port = Triport ( Ports . PORT22 ) An instance of the Triport (3wire) class timer = Timer () An instance of the Timer class Battery Battery class - access the brain battery Arguments: None Returns: Instance of Battery class Examples: capacity () read remaining capacity of the battery Arguments: None Returns: capacity as percentage Examples: current ( units = CurrentUnits . AMP ) read the current of the battery Arguments: units (optional) : AMP, default is mA but jot available as an enum. Returns: current in supplied units Examples: temperature ( units = PercentUnits . PERCENT ) read the temperature of the battery Arguments: units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS Returns: temperature in supplied units Examples: voltage ( units = VoltageUnits . MV ) read the voltage of the battery Arguments: units (optional) : VOLTS or MV, default is MV Returns: voltage in supplied units Examples: Lcd Brain.Lcd class A class used to access to screen on the V5 for drawing and receiving touch events. Arguments: None Returns: An instance of the Brain.Lcd class clear_row ( number = None , color = Color . BLACK ) Clear screen row to a single color The color can be passed in similar ways to the Color class.\\ Arguments: row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED) clear_screen ( color = Color . BLACK ) Clear the whole screen to a single color The color can be passed in similar ways to the Color class.\\ Arguments: color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE) column () Return the current column where text will be printed draw_circle ( x , y , radius , color = None ) Draw a circle on the screen using the current pen and fill colors. Arguments: x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED) draw_image_from_file ( filename , x , y ) Display the named image from the SD Card Arguments: filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen Returns: True if successfully drawn, False on error Examples: # draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0) draw_line ( x1 , y1 , x2 , y2 ) Draw a line on the screen using the current pen color. Arguments: x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin. Returns: None Examples: # draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20) draw_pixel ( x , y ) Draw a pixel on the screen using the current pen color. Arguments: x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin. Returns: None Examples: # draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10) draw_rectangle ( x , y , width , height , color = None ) Draw a rectangle on the screen using the current pen and fill colors. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED) get_string_height ( * args ) get height of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: height of string as integer. get_string_width ( * args ) get width of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: width of string as integer. next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None pressed ( callback , arg = ()) Register a function to be called when the screen is pressed Arguments: callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen pressed\") brain.screen.pressed(foo) pressing () Returns whether the screen is currently being pressed (touched) Arguments: None Returns: True or False print ( * args , ** kwargs ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) print_at ( * args , ** kwargs ) print text on the screen at x and coordinates. Arguments: Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True. Returns: None Examples: # print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40) released ( callback , arg = ()) Register a function to be called when the screen is released (touch removed) Arguments: callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen released\") brain.screen.released(foo) render () Switch drawing to double buffered and render too screen. Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated. Arguments: None Returns: True if buffer was successfully rendered to screen. Examples: row () Return the current row where text will be printed set_clip_region ( x , y , width , height ) Sets the clip region for drawing to the supplied rectangle. All drawing is clipped to the given rectangle.\\ This is set on a per thread basis. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. Returns: None Examples: set_cursor ( row , col ) Set the cursor position used for printing text on the screen row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1 Arguments: row : The cursor row col : The cursor column Returns: None set_fill_color ( color ) Set the fill color used for drawing rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The fill color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\") set_font ( fontname ) Set the font type used for printing text on the screen Arguments: fontname : The font name Returns: None Examples: brain.screen.font_type(FontType.MONO40) set_origin ( x , y ) Set the origin used for drawing graphics on the screen drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen. Arguments: x : The origins x position relative to top left corner y : The origins y position relative to top left corner Returns: None set_pen_color ( color ) Set the pen color used for drawing lines, rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The pen color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\") set_pen_width ( width ) Set the pen width used for drawing lines, rectangles and circles Arguments: width : The pen width Returns: None x_position () The X coordinate of the last screen event, press or release Arguments: None Returns: The X coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo) y_position () The Y coordinate of the last screen event, press or release Arguments: None Returns: The Y coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo) Sdcard Sdcard class - access the brain sdcard Arguments: None Returns: Instance of Sdcard class Examples: appendfile ( filename , * args ) append a bytearray into a named file Append is used to add more data to an existing file. Arguments: filename : The name of the file to write buffer : A bytearray to write into the file Returns: The number of bytes written Examples: # append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \")) exists ( * args ) check to see if named file exists on the sd card Arguments: filename : The name of the file to check Returns: True if file exists Examples: filesize ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples: is_inserted () returns status of SD Card Arguments: None Returns: True if an sdcard is inserted into the brain Examples: loadfile ( filename , * args ) load the named file Arguments: filename : The name of the file to read buffer (optional) : A bytearray to read the file into Returns: A bytearray with file data Examples: # read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt') savefile ( filename , * args ) Save a bytearray into a named file If the optional bytearray is None, then an empty file is created. Arguments: filename : The name of the file to write buffer (optional) : A bytearray to write into the file Returns: The number of bytes written Examples: # write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \")) size ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples: LCD Display The Brain.Lcd class allows you to draw graphics, print text, and handle touch events on the V5 brain's screen. vex.Brain.Lcd Brain.Lcd class A class used to access to screen on the V5 for drawing and receiving touch events. Arguments: None Returns: An instance of the Brain.Lcd class clear_row ( number = None , color = Color . BLACK ) Clear screen row to a single color The color can be passed in similar ways to the Color class.\\ Arguments: row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED) clear_screen ( color = Color . BLACK ) Clear the whole screen to a single color The color can be passed in similar ways to the Color class.\\ Arguments: color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE) column () Return the current column where text will be printed draw_circle ( x , y , radius , color = None ) Draw a circle on the screen using the current pen and fill colors. Arguments: x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED) draw_image_from_file ( filename , x , y ) Display the named image from the SD Card Arguments: filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen Returns: True if successfully drawn, False on error Examples: # draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0) draw_line ( x1 , y1 , x2 , y2 ) Draw a line on the screen using the current pen color. Arguments: x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin. Returns: None Examples: # draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20) draw_pixel ( x , y ) Draw a pixel on the screen using the current pen color. Arguments: x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin. Returns: None Examples: # draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10) draw_rectangle ( x , y , width , height , color = None ) Draw a rectangle on the screen using the current pen and fill colors. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED) get_string_height ( * args ) get height of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: height of string as integer. get_string_width ( * args ) get width of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: width of string as integer. next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None pressed ( callback , arg = ()) Register a function to be called when the screen is pressed Arguments: callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen pressed\") brain.screen.pressed(foo) pressing () Returns whether the screen is currently being pressed (touched) Arguments: None Returns: True or False print ( * args , ** kwargs ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) print_at ( * args , ** kwargs ) print text on the screen at x and coordinates. Arguments: Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True. Returns: None Examples: # print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40) released ( callback , arg = ()) Register a function to be called when the screen is released (touch removed) Arguments: callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen released\") brain.screen.released(foo) render () Switch drawing to double buffered and render too screen. Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated. Arguments: None Returns: True if buffer was successfully rendered to screen. Examples: row () Return the current row where text will be printed set_clip_region ( x , y , width , height ) Sets the clip region for drawing to the supplied rectangle. All drawing is clipped to the given rectangle.\\ This is set on a per thread basis. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. Returns: None Examples: set_cursor ( row , col ) Set the cursor position used for printing text on the screen row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1 Arguments: row : The cursor row col : The cursor column Returns: None set_fill_color ( color ) Set the fill color used for drawing rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The fill color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\") set_font ( fontname ) Set the font type used for printing text on the screen Arguments: fontname : The font name Returns: None Examples: brain.screen.font_type(FontType.MONO40) set_origin ( x , y ) Set the origin used for drawing graphics on the screen drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen. Arguments: x : The origins x position relative to top left corner y : The origins y position relative to top left corner Returns: None set_pen_color ( color ) Set the pen color used for drawing lines, rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The pen color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\") set_pen_width ( width ) Set the pen width used for drawing lines, rectangles and circles Arguments: width : The pen width Returns: None x_position () The X coordinate of the last screen event, press or release Arguments: None Returns: The X coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo) y_position () The Y coordinate of the last screen event, press or release Arguments: None Returns: The Y coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo) Battery The Brain.Battery class provides information about the V5 brain's battery, such as capacity, voltage, current, and temperature. vex.Brain.Battery Battery class - access the brain battery Arguments: None Returns: Instance of Battery class Examples: capacity () read remaining capacity of the battery Arguments: None Returns: capacity as percentage Examples: current ( units = CurrentUnits . AMP ) read the current of the battery Arguments: units (optional) : AMP, default is mA but jot available as an enum. Returns: current in supplied units Examples: temperature ( units = PercentUnits . PERCENT ) read the temperature of the battery Arguments: units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS Returns: temperature in supplied units Examples: voltage ( units = VoltageUnits . MV ) read the voltage of the battery Arguments: units (optional) : VOLTS or MV, default is MV Returns: voltage in supplied units Examples: SD Card The Brain.Sdcard class allows you to interact with the SD card inserted into the V5 brain, including file operations. vex.Brain.Sdcard Sdcard class - access the brain sdcard Arguments: None Returns: Instance of Sdcard class Examples: appendfile ( filename , * args ) append a bytearray into a named file Append is used to add more data to an existing file. Arguments: filename : The name of the file to write buffer : A bytearray to write into the file Returns: The number of bytes written Examples: # append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \")) exists ( * args ) check to see if named file exists on the sd card Arguments: filename : The name of the file to check Returns: True if file exists Examples: filesize ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples: is_inserted () returns status of SD Card Arguments: None Returns: True if an sdcard is inserted into the brain Examples: loadfile ( filename , * args ) load the named file Arguments: filename : The name of the file to read buffer (optional) : A bytearray to read the file into Returns: A bytearray with file data Examples: # read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt') savefile ( filename , * args ) Save a bytearray into a named file If the optional bytearray is None, then an empty file is created. Arguments: filename : The name of the file to write buffer (optional) : A bytearray to write into the file Returns: The number of bytes written Examples: # write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \")) size ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples:","title":"Brain &amp; Display"},{"location":"SDK/brain/#brain-display","text":"The Brain class provides access to the VEX V5 brain's built-in components, including the screen, battery, and SD card. This is the central hub for interacting with the robot's onboard hardware.","title":"Brain &amp; Display"},{"location":"SDK/brain/#brain","text":"","title":"Brain"},{"location":"SDK/brain/#vex.Brain","text":"","title":"Brain"},{"location":"SDK/brain/#vex.Brain--brain-class","text":"The Brain class creates a number of instances of internal classes that allow access\\ to the screen, battery, 3wire ports and sd card on the V5 brain.","title":"Brain class"},{"location":"SDK/brain/#vex.Brain--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain--returns","text":"An instance of the Brain class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain--examples","text":"brain = Brain()","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.battery","text":"An instance of the Battery class","title":"battery"},{"location":"SDK/brain/#vex.Brain.screen","text":"An instance of the Lcd class","title":"screen"},{"location":"SDK/brain/#vex.Brain.sdcard","text":"An instance of the Sdcard class","title":"sdcard"},{"location":"SDK/brain/#vex.Brain.three_wire_port","text":"An instance of the Triport (3wire) class","title":"three_wire_port"},{"location":"SDK/brain/#vex.Brain.timer","text":"An instance of the Timer class","title":"timer"},{"location":"SDK/brain/#vex.Brain.Battery","text":"","title":"Battery"},{"location":"SDK/brain/#vex.Brain.Battery--battery-class-access-the-brain-battery","text":"","title":"Battery class - access the brain battery"},{"location":"SDK/brain/#vex.Brain.Battery--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery--returns","text":"Instance of Battery class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity","text":"","title":"capacity"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--read-remaining-capacity-of-the-battery","text":"","title":"read remaining capacity of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--returns","text":"capacity as percentage","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.current","text":"","title":"current"},{"location":"SDK/brain/#vex.Brain.Battery.current--read-the-current-of-the-battery","text":"","title":"read the current of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.current--arguments","text":"units (optional) : AMP, default is mA but jot available as an enum.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.current--returns","text":"current in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.current--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature","text":"","title":"temperature"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--read-the-temperature-of-the-battery","text":"","title":"read the temperature of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--arguments","text":"units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--returns","text":"temperature in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage","text":"","title":"voltage"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--read-the-voltage-of-the-battery","text":"","title":"read the voltage of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--arguments","text":"units (optional) : VOLTS or MV, default is MV","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--returns","text":"voltage in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd","text":"","title":"Lcd"},{"location":"SDK/brain/#vex.Brain.Lcd--brainlcd-class","text":"A class used to access to screen on the V5 for drawing and receiving touch events.","title":"Brain.Lcd class"},{"location":"SDK/brain/#vex.Brain.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd--returns","text":"An instance of the Brain.Lcd class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--clear-screen-row-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear screen row to a single color"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--examples","text":"# clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--clear-the-whole-screen-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear the whole screen to a single color"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--arguments","text":"color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--examples","text":"# clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.column","text":"Return the current column where text will be printed","title":"column"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle","text":"","title":"draw_circle"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--draw-a-circle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a circle on the screen using the current pen and fill colors."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--arguments","text":"x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--examples","text":"# draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file","text":"","title":"draw_image_from_file"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--display-the-named-image-from-the-sd-card","text":"","title":"Display the named image from the SD Card"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--arguments","text":"filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--returns","text":"True if successfully drawn, False on error","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--examples","text":"# draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line","text":"","title":"draw_line"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--draw-a-line-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a line on the screen using the current pen color."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--arguments","text":"x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--examples","text":"# draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel","text":"","title":"draw_pixel"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--draw-a-pixel-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a pixel on the screen using the current pen color."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--arguments","text":"x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--examples","text":"# draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle","text":"","title":"draw_rectangle"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--draw-a-rectangle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a rectangle on the screen using the current pen and fill colors."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--examples","text":"# draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height","text":"","title":"get_string_height"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--get-height-of-a-string","text":"","title":"get height of a string"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--returns","text":"height of string as integer.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width","text":"","title":"get_string_width"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--get-width-of-a-string","text":"","title":"get width of a string"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--returns","text":"width of string as integer.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed","text":"","title":"pressed"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--register-a-function-to-be-called-when-the-screen-is-pressed","text":"","title":"Register a function to be called when the screen is pressed"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--arguments","text":"callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--examples","text":"def foo(): print(\"screen pressed\") brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing","text":"","title":"pressing"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--returns-whether-the-screen-is-currently-being-pressed-touched","text":"","title":"Returns whether the screen is currently being pressed (touched)"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print","text":"","title":"print"},{"location":"SDK/brain/#vex.Brain.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/brain/#vex.Brain.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity()))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at","text":"","title":"print_at"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--print-text-on-the-screen-at-x-and-coordinates","text":"","title":"print text on the screen at x and coordinates."},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--arguments","text":"Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--examples","text":"# print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.released","text":"","title":"released"},{"location":"SDK/brain/#vex.Brain.Lcd.released--register-a-function-to-be-called-when-the-screen-is-released-touch-removed","text":"","title":"Register a function to be called when the screen is released (touch removed)"},{"location":"SDK/brain/#vex.Brain.Lcd.released--arguments","text":"callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.released--examples","text":"def foo(): print(\"screen released\") brain.screen.released(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.render","text":"","title":"render"},{"location":"SDK/brain/#vex.Brain.Lcd.render--switch-drawing-to-double-buffered-and-render-too-screen","text":"Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated.","title":"Switch drawing to double buffered and render too screen."},{"location":"SDK/brain/#vex.Brain.Lcd.render--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.render--returns","text":"True if buffer was successfully rendered to screen.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.render--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.row","text":"Return the current row where text will be printed","title":"row"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region","text":"","title":"set_clip_region"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--sets-the-clip-region-for-drawing-to-the-supplied-rectangle","text":"All drawing is clipped to the given rectangle.\\ This is set on a per thread basis.","title":"Sets the clip region for drawing to the supplied rectangle."},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--arguments","text":"row : The cursor row col : The cursor column","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color","text":"","title":"set_fill_color"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--set-the-fill-color-used-for-drawing-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the fill color used for drawing rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--arguments","text":"color : The fill color","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font","text":"","title":"set_font"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--set-the-font-type-used-for-printing-text-on-the-screen","text":"","title":"Set the font type used for printing text on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--arguments","text":"fontname : The font name","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--examples","text":"brain.screen.font_type(FontType.MONO40)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin","text":"","title":"set_origin"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--set-the-origin-used-for-drawing-graphics-on-the-screen","text":"drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen.","title":"Set the origin used for drawing graphics on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--arguments","text":"x : The origins x position relative to top left corner y : The origins y position relative to top left corner","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color","text":"","title":"set_pen_color"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--set-the-pen-color-used-for-drawing-lines-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the pen color used for drawing lines, rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--arguments","text":"color : The pen color","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width","text":"","title":"set_pen_width"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--set-the-pen-width-used-for-drawing-lines-rectangles-and-circles","text":"","title":"Set the pen width used for drawing lines, rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--arguments","text":"width : The pen width","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position","text":"","title":"x_position"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--the-x-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The X coordinate of the last screen event, press or release"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--returns","text":"The X coordinate as an int","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position","text":"","title":"y_position"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--the-y-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The Y coordinate of the last screen event, press or release"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--returns","text":"The Y coordinate as an int","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard","text":"","title":"Sdcard"},{"location":"SDK/brain/#vex.Brain.Sdcard--sdcard-class-access-the-brain-sdcard","text":"","title":"Sdcard class - access the brain sdcard"},{"location":"SDK/brain/#vex.Brain.Sdcard--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard--returns","text":"Instance of Sdcard class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile","text":"","title":"appendfile"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--append-a-bytearray-into-a-named-file","text":"Append is used to add more data to an existing file.","title":"append a bytearray into a named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--arguments","text":"filename : The name of the file to write buffer : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--examples","text":"# append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \"))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists","text":"","title":"exists"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--check-to-see-if-named-file-exists-on-the-sd-card","text":"","title":"check to see if named file exists on the sd card"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--returns","text":"True if file exists","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize","text":"","title":"filesize"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted","text":"","title":"is_inserted"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--returns-status-of-sd-card","text":"","title":"returns status of SD Card"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--returns","text":"True if an sdcard is inserted into the brain","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile","text":"","title":"loadfile"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--load-the-named-file","text":"","title":"load the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--arguments","text":"filename : The name of the file to read buffer (optional) : A bytearray to read the file into","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--returns","text":"A bytearray with file data","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--examples","text":"# read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt')","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile","text":"","title":"savefile"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--save-a-bytearray-into-a-named-file","text":"If the optional bytearray is None, then an empty file is created.","title":"Save a bytearray into a named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--arguments","text":"filename : The name of the file to write buffer (optional) : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--examples","text":"# write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \"))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size","text":"","title":"size"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#lcd-display","text":"The Brain.Lcd class allows you to draw graphics, print text, and handle touch events on the V5 brain's screen.","title":"LCD Display"},{"location":"SDK/brain/#vex.Brain.Lcd","text":"","title":"Lcd"},{"location":"SDK/brain/#vex.Brain.Lcd--brainlcd-class","text":"A class used to access to screen on the V5 for drawing and receiving touch events.","title":"Brain.Lcd class"},{"location":"SDK/brain/#vex.Brain.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd--returns","text":"An instance of the Brain.Lcd class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--clear-screen-row-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear screen row to a single color"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_row--examples","text":"# clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--clear-the-whole-screen-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear the whole screen to a single color"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--arguments","text":"color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.clear_screen--examples","text":"# clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.column","text":"Return the current column where text will be printed","title":"column"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle","text":"","title":"draw_circle"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--draw-a-circle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a circle on the screen using the current pen and fill colors."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--arguments","text":"x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_circle--examples","text":"# draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file","text":"","title":"draw_image_from_file"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--display-the-named-image-from-the-sd-card","text":"","title":"Display the named image from the SD Card"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--arguments","text":"filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--returns","text":"True if successfully drawn, False on error","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_image_from_file--examples","text":"# draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line","text":"","title":"draw_line"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--draw-a-line-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a line on the screen using the current pen color."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--arguments","text":"x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_line--examples","text":"# draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel","text":"","title":"draw_pixel"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--draw-a-pixel-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a pixel on the screen using the current pen color."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--arguments","text":"x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_pixel--examples","text":"# draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle","text":"","title":"draw_rectangle"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--draw-a-rectangle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a rectangle on the screen using the current pen and fill colors."},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.draw_rectangle--examples","text":"# draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height","text":"","title":"get_string_height"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--get-height-of-a-string","text":"","title":"get height of a string"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_height--returns","text":"height of string as integer.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width","text":"","title":"get_string_width"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--get-width-of-a-string","text":"","title":"get width of a string"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.get_string_width--returns","text":"width of string as integer.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.next_row--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed","text":"","title":"pressed"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--register-a-function-to-be-called-when-the-screen-is-pressed","text":"","title":"Register a function to be called when the screen is pressed"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--arguments","text":"callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressed--examples","text":"def foo(): print(\"screen pressed\") brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing","text":"","title":"pressing"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--returns-whether-the-screen-is-currently-being-pressed-touched","text":"","title":"Returns whether the screen is currently being pressed (touched)"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print","text":"","title":"print"},{"location":"SDK/brain/#vex.Brain.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/brain/#vex.Brain.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity()))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at","text":"","title":"print_at"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--print-text-on-the-screen-at-x-and-coordinates","text":"","title":"print text on the screen at x and coordinates."},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--arguments","text":"Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.print_at--examples","text":"# print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.released","text":"","title":"released"},{"location":"SDK/brain/#vex.Brain.Lcd.released--register-a-function-to-be-called-when-the-screen-is-released-touch-removed","text":"","title":"Register a function to be called when the screen is released (touch removed)"},{"location":"SDK/brain/#vex.Brain.Lcd.released--arguments","text":"callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.released--examples","text":"def foo(): print(\"screen released\") brain.screen.released(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.render","text":"","title":"render"},{"location":"SDK/brain/#vex.Brain.Lcd.render--switch-drawing-to-double-buffered-and-render-too-screen","text":"Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated.","title":"Switch drawing to double buffered and render too screen."},{"location":"SDK/brain/#vex.Brain.Lcd.render--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.render--returns","text":"True if buffer was successfully rendered to screen.","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.render--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.row","text":"Return the current row where text will be printed","title":"row"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region","text":"","title":"set_clip_region"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--sets-the-clip-region-for-drawing-to-the-supplied-rectangle","text":"All drawing is clipped to the given rectangle.\\ This is set on a per thread basis.","title":"Sets the clip region for drawing to the supplied rectangle."},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_clip_region--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--arguments","text":"row : The cursor row col : The cursor column","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_cursor--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color","text":"","title":"set_fill_color"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--set-the-fill-color-used-for-drawing-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the fill color used for drawing rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--arguments","text":"color : The fill color","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_fill_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font","text":"","title":"set_font"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--set-the-font-type-used-for-printing-text-on-the-screen","text":"","title":"Set the font type used for printing text on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--arguments","text":"fontname : The font name","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_font--examples","text":"brain.screen.font_type(FontType.MONO40)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin","text":"","title":"set_origin"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--set-the-origin-used-for-drawing-graphics-on-the-screen","text":"drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen.","title":"Set the origin used for drawing graphics on the screen"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--arguments","text":"x : The origins x position relative to top left corner y : The origins y position relative to top left corner","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_origin--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color","text":"","title":"set_pen_color"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--set-the-pen-color-used-for-drawing-lines-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the pen color used for drawing lines, rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--arguments","text":"color : The pen color","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width","text":"","title":"set_pen_width"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--set-the-pen-width-used-for-drawing-lines-rectangles-and-circles","text":"","title":"Set the pen width used for drawing lines, rectangles and circles"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--arguments","text":"width : The pen width","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.set_pen_width--returns","text":"None","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position","text":"","title":"x_position"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--the-x-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The X coordinate of the last screen event, press or release"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--returns","text":"The X coordinate as an int","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.x_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position","text":"","title":"y_position"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--the-y-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The Y coordinate of the last screen event, press or release"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--returns","text":"The Y coordinate as an int","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Lcd.y_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/brain/#battery","text":"The Brain.Battery class provides information about the V5 brain's battery, such as capacity, voltage, current, and temperature.","title":"Battery"},{"location":"SDK/brain/#vex.Brain.Battery","text":"","title":"Battery"},{"location":"SDK/brain/#vex.Brain.Battery--battery-class-access-the-brain-battery","text":"","title":"Battery class - access the brain battery"},{"location":"SDK/brain/#vex.Brain.Battery--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery--returns","text":"Instance of Battery class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity","text":"","title":"capacity"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--read-remaining-capacity-of-the-battery","text":"","title":"read remaining capacity of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--returns","text":"capacity as percentage","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.capacity--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.current","text":"","title":"current"},{"location":"SDK/brain/#vex.Brain.Battery.current--read-the-current-of-the-battery","text":"","title":"read the current of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.current--arguments","text":"units (optional) : AMP, default is mA but jot available as an enum.","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.current--returns","text":"current in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.current--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature","text":"","title":"temperature"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--read-the-temperature-of-the-battery","text":"","title":"read the temperature of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--arguments","text":"units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--returns","text":"temperature in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.temperature--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage","text":"","title":"voltage"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--read-the-voltage-of-the-battery","text":"","title":"read the voltage of the battery"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--arguments","text":"units (optional) : VOLTS or MV, default is MV","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--returns","text":"voltage in supplied units","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Battery.voltage--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#sd-card","text":"The Brain.Sdcard class allows you to interact with the SD card inserted into the V5 brain, including file operations.","title":"SD Card"},{"location":"SDK/brain/#vex.Brain.Sdcard","text":"","title":"Sdcard"},{"location":"SDK/brain/#vex.Brain.Sdcard--sdcard-class-access-the-brain-sdcard","text":"","title":"Sdcard class - access the brain sdcard"},{"location":"SDK/brain/#vex.Brain.Sdcard--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard--returns","text":"Instance of Sdcard class","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile","text":"","title":"appendfile"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--append-a-bytearray-into-a-named-file","text":"Append is used to add more data to an existing file.","title":"append a bytearray into a named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--arguments","text":"filename : The name of the file to write buffer : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.appendfile--examples","text":"# append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \"))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists","text":"","title":"exists"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--check-to-see-if-named-file-exists-on-the-sd-card","text":"","title":"check to see if named file exists on the sd card"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--returns","text":"True if file exists","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.exists--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize","text":"","title":"filesize"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.filesize--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted","text":"","title":"is_inserted"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--returns-status-of-sd-card","text":"","title":"returns status of SD Card"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--arguments","text":"None","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--returns","text":"True if an sdcard is inserted into the brain","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.is_inserted--examples","text":"","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile","text":"","title":"loadfile"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--load-the-named-file","text":"","title":"load the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--arguments","text":"filename : The name of the file to read buffer (optional) : A bytearray to read the file into","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--returns","text":"A bytearray with file data","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.loadfile--examples","text":"# read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt')","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile","text":"","title":"savefile"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--save-a-bytearray-into-a-named-file","text":"If the optional bytearray is None, then an empty file is created.","title":"Save a bytearray into a named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--arguments","text":"filename : The name of the file to write buffer (optional) : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.savefile--examples","text":"# write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \"))","title":"Examples:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size","text":"","title":"size"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/brain/#vex.Brain.Sdcard.size--examples","text":"","title":"Examples:"},{"location":"SDK/controllers/","text":"Controllers & Competition This section documents the classes related to VEX controller input, competition state, and event handling. Controller vex.Controller Controller class - create a class to access the controller Arguments: None Returns: An instance of the Controller class Examples: Source code in vex.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 class Controller : '''### Controller class - create a class to access the controller #### Arguments: None #### Returns: An instance of the Controller class #### Examples: ''' class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass def __init__ ( self , * args ): self . axis1 = Controller . Axis () '''The joystick axis 1 on the controller''' self . axis2 = Controller . Axis () '''The joystick axis 2 on the controller''' self . axis3 = Controller . Axis () '''The joystick axis 3 on the controller''' self . axis4 = Controller . Axis () '''The joystick axis 4 on the controller''' self . buttonL1 = Controller . Button () '''The L1 button on the controller''' self . buttonL2 = Controller . Button () '''The L2 button on the controller''' self . buttonR1 = Controller . Button () '''The R1 button on the controller''' self . buttonR2 = Controller . Button () '''The R2 button on the controller''' self . buttonUp = Controller . Button () '''The Up button on the controller''' self . buttonDown = Controller . Button () '''The Down button on the controller''' self . buttonLeft = Controller . Button () '''The Left button on the controller''' self . buttonRight = Controller . Button () '''The Right button on the controller''' self . buttonA = Controller . Button () '''The A button on the controller''' self . buttonB = Controller . Button () '''The B button on the controller''' self . buttonX = Controller . Button () '''The X button on the controller''' self . buttonY = Controller . Button () '''The Y button on the controller''' self . screen = Controller . Lcd () ''' An instance of the Lcd class''' def rumble ( self , pattern : str ): '''### Send a rumble string to the V5 controller #### Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. #### Returns: None #### Examples: controller.rumble('..--') ''' return 0 axis1 = Controller . Axis () The joystick axis 1 on the controller axis2 = Controller . Axis () The joystick axis 2 on the controller axis3 = Controller . Axis () The joystick axis 3 on the controller axis4 = Controller . Axis () The joystick axis 4 on the controller buttonA = Controller . Button () The A button on the controller buttonB = Controller . Button () The B button on the controller buttonDown = Controller . Button () The Down button on the controller buttonL1 = Controller . Button () The L1 button on the controller buttonL2 = Controller . Button () The L2 button on the controller buttonLeft = Controller . Button () The Left button on the controller buttonR1 = Controller . Button () The R1 button on the controller buttonR2 = Controller . Button () The R2 button on the controller buttonRight = Controller . Button () The Right button on the controller buttonUp = Controller . Button () The Up button on the controller buttonX = Controller . Button () The X button on the controller buttonY = Controller . Button () The Y button on the controller screen = Controller . Lcd () An instance of the Lcd class Axis Axis class Arguments: None Returns: An instance of an Axis class Examples: Source code in vex.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) changed ( callback , arg = ()) Register a function to be called when the axis value changes Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) Source code in vex.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) position () Return the current position of the axis in percentage Arguments: None Returns: A value in the range +/- 100 Examples: a = controller.axis1.position() Source code in vex.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 value () Return the current position of the axis Arguments: None Returns: A value in the range +/- 127 Examples: a = controller.axis1.position() Source code in vex.py 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 Button Source code in vex.py 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) pressed ( callback , arg = ()) Register a function to be called when a button is pressed Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) Source code in vex.py 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) pressing () Returns whether a button is currently being pressed Arguments: None Returns: True or False Source code in vex.py 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False released ( callback , arg = ()) Register a function to be called when a button is released Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) Source code in vex.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) Lcd Controller.Lcd class A class used to access the screen on the V5 controller. Arguments: None Returns: An instance of the Brain.Lcd class Source code in vex.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass clear_row ( number ) Clear screen row Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row Returns: None Examples: # clear row 2\\ controller.screen.clear_row(2) Source code in vex.py 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass clear_screen () Clear the whole screen Arguments: None Returns: None Examples: controller.screen.clear_screen() Source code in vex.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass column () Return the current column where text will be printed Source code in vex.py 1596 1597 1598 def column ( self ): '''Return the current column where text will be printed''' return self . _col next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None Source code in vex.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass print ( * args ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) Source code in vex.py 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass row () Return the current row where text will be printed Source code in vex.py 1600 1601 1602 def row ( self ): '''Return the current row where text will be printed''' return self . _row set_cursor ( row , col ) Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. Returns: None Source code in vex.py 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col rumble ( pattern ) Send a rumble string to the V5 controller Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. Returns: None Examples: controller.rumble('..--') Source code in vex.py 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 def rumble ( self , pattern : str ): '''### Send a rumble string to the V5 controller #### Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. #### Returns: None #### Examples: controller.rumble('..--') ''' return 0 Controller.Axis vex.Controller.Axis Axis class Arguments: None Returns: An instance of an Axis class Examples: Source code in vex.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) changed ( callback , arg = ()) Register a function to be called when the axis value changes Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) Source code in vex.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) position () Return the current position of the axis in percentage Arguments: None Returns: A value in the range +/- 100 Examples: a = controller.axis1.position() Source code in vex.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 value () Return the current position of the axis Arguments: None Returns: A value in the range +/- 127 Examples: a = controller.axis1.position() Source code in vex.py 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 Controller.Button vex.Controller.Button Source code in vex.py 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) pressed ( callback , arg = ()) Register a function to be called when a button is pressed Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) Source code in vex.py 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) pressing () Returns whether a button is currently being pressed Arguments: None Returns: True or False Source code in vex.py 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False released ( callback , arg = ()) Register a function to be called when a button is released Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) Source code in vex.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) Controller.Lcd vex.Controller.Lcd Controller.Lcd class A class used to access the screen on the V5 controller. Arguments: None Returns: An instance of the Brain.Lcd class Source code in vex.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass clear_row ( number ) Clear screen row Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row Returns: None Examples: # clear row 2\\ controller.screen.clear_row(2) Source code in vex.py 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass clear_screen () Clear the whole screen Arguments: None Returns: None Examples: controller.screen.clear_screen() Source code in vex.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass column () Return the current column where text will be printed Source code in vex.py 1596 1597 1598 def column ( self ): '''Return the current column where text will be printed''' return self . _col next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None Source code in vex.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass print ( * args ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) Source code in vex.py 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass row () Return the current row where text will be printed Source code in vex.py 1600 1601 1602 def row ( self ): '''Return the current row where text will be printed''' return self . _row set_cursor ( row , col ) Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. Returns: None Source code in vex.py 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col Competition vex.Competition Competition class - create a class used for competition control Arguments: driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts. Returns: An instance of the Competition class Examples: def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton) Source code in vex.py 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 class Competition : '''### Competition class - create a class used for competition control #### Arguments: driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts. #### Returns: An instance of the Competition class #### Examples: def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton) ''' def __init__ ( self , driver : Callable [[], None ], autonomous : Callable [[], None ]): self . _driver_cb = driver self . _auton_cb = autonomous self . _driver_thread = None self . _auton_thread = None @staticmethod def is_enabled (): '''### return enable/disable state of the robot #### Arguments: None #### Returns: True if the robot is enabled ''' return True @staticmethod def is_driver_control (): '''### return driver control state of the robot #### Arguments: None #### Returns: True if driver control is enabled ''' return True def is_autonomous ( self = None ): '''### return autonomous state of the robot #### Arguments: None #### Returns: True if autonomous is enabled ''' return False def is_competition_switch ( self = None ): '''### return connection state of the competition switch #### Arguments: None #### Returns: True if competition switch is connected ''' return True def is_field_control ( self = None ): '''### return connection state of field controller #### Arguments: None #### Returns: True if field controller is connected ''' return False is_autonomous () return autonomous state of the robot Arguments: None Returns: True if autonomous is enabled Source code in vex.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 def is_autonomous ( self = None ): '''### return autonomous state of the robot #### Arguments: None #### Returns: True if autonomous is enabled ''' return False is_competition_switch () return connection state of the competition switch Arguments: None Returns: True if competition switch is connected Source code in vex.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def is_competition_switch ( self = None ): '''### return connection state of the competition switch #### Arguments: None #### Returns: True if competition switch is connected ''' return True is_driver_control () return driver control state of the robot Arguments: None Returns: True if driver control is enabled Source code in vex.py 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 @staticmethod def is_driver_control (): '''### return driver control state of the robot #### Arguments: None #### Returns: True if driver control is enabled ''' return True is_enabled () return enable/disable state of the robot Arguments: None Returns: True if the robot is enabled Source code in vex.py 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 @staticmethod def is_enabled (): '''### return enable/disable state of the robot #### Arguments: None #### Returns: True if the robot is enabled ''' return True is_field_control () return connection state of field controller Arguments: None Returns: True if field controller is connected Source code in vex.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 def is_field_control ( self = None ): '''### return connection state of field controller #### Arguments: None #### Returns: True if field controller is connected ''' return False Event vex.Event Event class - create a new event A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event. Arguments: callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: An instance of the Event class Examples: def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\ sleep(20) # cause both foo and bar to be called\\ e.broadcast() Source code in vex.py 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 class Event : '''### Event class - create a new event A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event. #### Arguments: callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\\\ sleep(20) # cause both foo and bar to be called\\\\ e.broadcast() ''' def __init__ ( self , callback = None , arg : tuple = ()): pass def __call__ ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e(bar) ''' pass def set ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e.set(bar) ''' pass def broadcast ( self ): '''### Broadcast to the event and cause all registered callback function to run #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e\\\\ e.broadcast() ''' pass def broadcast_and_wait ( self , timeout = 60000 ): '''### Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e, wait for completion\\\\ e.broadcast_and_wait() ''' pass __call__ ( callback , arg = ()) Add callback function to an existing event Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: None Examples: def bar(): print(\"bar\") # add callback function to existing event e\\ e(bar) Source code in vex.py 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 def __call__ ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e(bar) ''' pass broadcast () Broadcast to the event and cause all registered callback function to run Arguments: None Returns: None Examples: # broadcast to an existing event e\\ e.broadcast() Source code in vex.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 def broadcast ( self ): '''### Broadcast to the event and cause all registered callback function to run #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e\\\\ e.broadcast() ''' pass broadcast_and_wait ( timeout = 60000 ) Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. Arguments: None Returns: None Examples: # broadcast to an existing event e, wait for completion\\ e.broadcast_and_wait() Source code in vex.py 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 def broadcast_and_wait ( self , timeout = 60000 ): '''### Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e, wait for completion\\\\ e.broadcast_and_wait() ''' pass set ( callback , arg = ()) Add callback function to an existing event Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: None Examples: def bar(): print(\"bar\") # add callback function to existing event e\\ e.set(bar) Source code in vex.py 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 def set ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e.set(bar) ''' pass","title":"Controllers &amp; Competition"},{"location":"SDK/controllers/#controllers-competition","text":"This section documents the classes related to VEX controller input, competition state, and event handling.","title":"Controllers &amp; Competition"},{"location":"SDK/controllers/#controller","text":"","title":"Controller"},{"location":"SDK/controllers/#vex.Controller","text":"","title":"Controller"},{"location":"SDK/controllers/#vex.Controller--controller-class-create-a-class-to-access-the-controller","text":"","title":"Controller class - create a class to access the controller"},{"location":"SDK/controllers/#vex.Controller--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller--returns","text":"An instance of the Controller class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller--examples","text":"Source code in vex.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 class Controller : '''### Controller class - create a class to access the controller #### Arguments: None #### Returns: An instance of the Controller class #### Examples: ''' class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg ) class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg ) class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass def __init__ ( self , * args ): self . axis1 = Controller . Axis () '''The joystick axis 1 on the controller''' self . axis2 = Controller . Axis () '''The joystick axis 2 on the controller''' self . axis3 = Controller . Axis () '''The joystick axis 3 on the controller''' self . axis4 = Controller . Axis () '''The joystick axis 4 on the controller''' self . buttonL1 = Controller . Button () '''The L1 button on the controller''' self . buttonL2 = Controller . Button () '''The L2 button on the controller''' self . buttonR1 = Controller . Button () '''The R1 button on the controller''' self . buttonR2 = Controller . Button () '''The R2 button on the controller''' self . buttonUp = Controller . Button () '''The Up button on the controller''' self . buttonDown = Controller . Button () '''The Down button on the controller''' self . buttonLeft = Controller . Button () '''The Left button on the controller''' self . buttonRight = Controller . Button () '''The Right button on the controller''' self . buttonA = Controller . Button () '''The A button on the controller''' self . buttonB = Controller . Button () '''The B button on the controller''' self . buttonX = Controller . Button () '''The X button on the controller''' self . buttonY = Controller . Button () '''The Y button on the controller''' self . screen = Controller . Lcd () ''' An instance of the Lcd class''' def rumble ( self , pattern : str ): '''### Send a rumble string to the V5 controller #### Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. #### Returns: None #### Examples: controller.rumble('..--') ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.axis1","text":"The joystick axis 1 on the controller","title":"axis1"},{"location":"SDK/controllers/#vex.Controller.axis2","text":"The joystick axis 2 on the controller","title":"axis2"},{"location":"SDK/controllers/#vex.Controller.axis3","text":"The joystick axis 3 on the controller","title":"axis3"},{"location":"SDK/controllers/#vex.Controller.axis4","text":"The joystick axis 4 on the controller","title":"axis4"},{"location":"SDK/controllers/#vex.Controller.buttonA","text":"The A button on the controller","title":"buttonA"},{"location":"SDK/controllers/#vex.Controller.buttonB","text":"The B button on the controller","title":"buttonB"},{"location":"SDK/controllers/#vex.Controller.buttonDown","text":"The Down button on the controller","title":"buttonDown"},{"location":"SDK/controllers/#vex.Controller.buttonL1","text":"The L1 button on the controller","title":"buttonL1"},{"location":"SDK/controllers/#vex.Controller.buttonL2","text":"The L2 button on the controller","title":"buttonL2"},{"location":"SDK/controllers/#vex.Controller.buttonLeft","text":"The Left button on the controller","title":"buttonLeft"},{"location":"SDK/controllers/#vex.Controller.buttonR1","text":"The R1 button on the controller","title":"buttonR1"},{"location":"SDK/controllers/#vex.Controller.buttonR2","text":"The R2 button on the controller","title":"buttonR2"},{"location":"SDK/controllers/#vex.Controller.buttonRight","text":"The Right button on the controller","title":"buttonRight"},{"location":"SDK/controllers/#vex.Controller.buttonUp","text":"The Up button on the controller","title":"buttonUp"},{"location":"SDK/controllers/#vex.Controller.buttonX","text":"The X button on the controller","title":"buttonX"},{"location":"SDK/controllers/#vex.Controller.buttonY","text":"The Y button on the controller","title":"buttonY"},{"location":"SDK/controllers/#vex.Controller.screen","text":"An instance of the Lcd class","title":"screen"},{"location":"SDK/controllers/#vex.Controller.Axis","text":"","title":"Axis"},{"location":"SDK/controllers/#vex.Controller.Axis--axis-class","text":"","title":"Axis class"},{"location":"SDK/controllers/#vex.Controller.Axis--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis--returns","text":"An instance of an Axis class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis--examples","text":"Source code in vex.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed","text":"","title":"changed"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--register-a-function-to-be-called-when-the-axis-value-changes","text":"","title":"Register a function to be called when the axis value changes"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--arguments","text":"callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--examples","text":"def foo(): print(\"axis changed\") controller.axis1.changed(foo) Source code in vex.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.position","text":"","title":"position"},{"location":"SDK/controllers/#vex.Controller.Axis.position--return-the-current-position-of-the-axis-in-percentage","text":"","title":"Return the current position of the axis in percentage"},{"location":"SDK/controllers/#vex.Controller.Axis.position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.position--returns","text":"A value in the range +/- 100","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.position--examples","text":"a = controller.axis1.position() Source code in vex.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.value","text":"","title":"value"},{"location":"SDK/controllers/#vex.Controller.Axis.value--return-the-current-position-of-the-axis","text":"","title":"Return the current position of the axis"},{"location":"SDK/controllers/#vex.Controller.Axis.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.value--returns","text":"A value in the range +/- 127","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.value--examples","text":"a = controller.axis1.position() Source code in vex.py 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Button","text":"Source code in vex.py 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg )","title":"Button"},{"location":"SDK/controllers/#vex.Controller.Button.pressed","text":"","title":"pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--register-a-function-to-be-called-when-a-button-is-pressed","text":"","title":"Register a function to be called when a button is pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--arguments","text":"callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--examples","text":"def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) Source code in vex.py 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Button.pressing","text":"","title":"pressing"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--returns-whether-a-button-is-currently-being-pressed","text":"","title":"Returns whether a button is currently being pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--returns","text":"True or False Source code in vex.py 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.released","text":"","title":"released"},{"location":"SDK/controllers/#vex.Controller.Button.released--register-a-function-to-be-called-when-a-button-is-released","text":"","title":"Register a function to be called when a button is released"},{"location":"SDK/controllers/#vex.Controller.Button.released--arguments","text":"callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.released--examples","text":"def foo(): print(\"button released\") controller.buttonL1.released(foo) Source code in vex.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd","text":"","title":"Lcd"},{"location":"SDK/controllers/#vex.Controller.Lcd--controllerlcd-class","text":"A class used to access the screen on the V5 controller.","title":"Controller.Lcd class"},{"location":"SDK/controllers/#vex.Controller.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd--returns","text":"An instance of the Brain.Lcd class Source code in vex.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--clear-screen-row","text":"","title":"Clear screen row"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, 1, 2, or 3, default is current cursor row","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--examples","text":"# clear row 2\\ controller.screen.clear_row(2) Source code in vex.py 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--clear-the-whole-screen","text":"","title":"Clear the whole screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--examples","text":"controller.screen.clear_screen() Source code in vex.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.column","text":"Return the current column where text will be printed Source code in vex.py 1596 1597 1598 def column ( self ): '''Return the current column where text will be printed''' return self . _col","title":"column"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--returns","text":"None Source code in vex.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print","text":"","title":"print"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/controllers/#vex.Controller.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) Source code in vex.py 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.row","text":"Return the current row where text will be printed Source code in vex.py 1600 1601 1602 def row ( self ): '''Return the current row where text will be printed''' return self . _row","title":"row"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"V5 controller has at most 3 lines of text","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--arguments","text":"row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--returns","text":"None Source code in vex.py 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.rumble","text":"","title":"rumble"},{"location":"SDK/controllers/#vex.Controller.rumble--send-a-rumble-string-to-the-v5-controller","text":"","title":"Send a rumble string to the V5 controller"},{"location":"SDK/controllers/#vex.Controller.rumble--arguments","text":"pattern : A pattern using '.' and '-' for short and long rumbles.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.rumble--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.rumble--examples","text":"controller.rumble('..--') Source code in vex.py 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 def rumble ( self , pattern : str ): '''### Send a rumble string to the V5 controller #### Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. #### Returns: None #### Examples: controller.rumble('..--') ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#controlleraxis","text":"","title":"Controller.Axis"},{"location":"SDK/controllers/#vex.Controller.Axis","text":"","title":"Axis"},{"location":"SDK/controllers/#vex.Controller.Axis--axis-class","text":"","title":"Axis class"},{"location":"SDK/controllers/#vex.Controller.Axis--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis--returns","text":"An instance of an Axis class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis--examples","text":"Source code in vex.py 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 class Axis : '''### Axis class #### Arguments: None #### Returns: An instance of an Axis class #### Examples: ''' def __init__ ( self , * args ): pass def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed","text":"","title":"changed"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--register-a-function-to-be-called-when-the-axis-value-changes","text":"","title":"Register a function to be called when the axis value changes"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--arguments","text":"callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.changed--examples","text":"def foo(): print(\"axis changed\") controller.axis1.changed(foo) Source code in vex.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 def changed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when the axis value changes #### Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.position","text":"","title":"position"},{"location":"SDK/controllers/#vex.Controller.Axis.position--return-the-current-position-of-the-axis-in-percentage","text":"","title":"Return the current position of the axis in percentage"},{"location":"SDK/controllers/#vex.Controller.Axis.position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.position--returns","text":"A value in the range +/- 100","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.position--examples","text":"a = controller.axis1.position() Source code in vex.py 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 def position ( self ): '''### Return the current position of the axis in percentage #### Arguments: None #### Returns: A value in the range +/- 100 #### Examples: a = controller.axis1.position() ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Axis.value","text":"","title":"value"},{"location":"SDK/controllers/#vex.Controller.Axis.value--return-the-current-position-of-the-axis","text":"","title":"Return the current position of the axis"},{"location":"SDK/controllers/#vex.Controller.Axis.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Axis.value--returns","text":"A value in the range +/- 127","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Axis.value--examples","text":"a = controller.axis1.position() Source code in vex.py 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def value ( self ): '''### Return the current position of the axis #### Arguments: None #### Returns: A value in the range +/- 127 #### Examples: a = controller.axis1.position() ''' return 0","title":"Examples:"},{"location":"SDK/controllers/#controllerbutton","text":"","title":"Controller.Button"},{"location":"SDK/controllers/#vex.Controller.Button","text":"Source code in vex.py 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 class Button : def __init__ ( self , * args ): pass def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg ) def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg )","title":"Button"},{"location":"SDK/controllers/#vex.Controller.Button.pressed","text":"","title":"pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--register-a-function-to-be-called-when-a-button-is-pressed","text":"","title":"Register a function to be called when a button is pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--arguments","text":"callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.pressed--examples","text":"def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) Source code in vex.py 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 def pressed ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is pressed #### Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Button.pressing","text":"","title":"pressing"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--returns-whether-a-button-is-currently-being-pressed","text":"","title":"Returns whether a button is currently being pressed"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.pressing--returns","text":"True or False Source code in vex.py 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 def pressing ( self ): '''### Returns whether a button is currently being pressed #### Arguments: None #### Returns: True or False ''' return False","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.released","text":"","title":"released"},{"location":"SDK/controllers/#vex.Controller.Button.released--register-a-function-to-be-called-when-a-button-is-released","text":"","title":"Register a function to be called when a button is released"},{"location":"SDK/controllers/#vex.Controller.Button.released--arguments","text":"callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Button.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Button.released--examples","text":"def foo(): print(\"button released\") controller.buttonL1.released(foo) Source code in vex.py 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def released ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Register a function to be called when a button is released #### Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) ''' return Event ( callback , arg )","title":"Examples:"},{"location":"SDK/controllers/#controllerlcd","text":"","title":"Controller.Lcd"},{"location":"SDK/controllers/#vex.Controller.Lcd","text":"","title":"Lcd"},{"location":"SDK/controllers/#vex.Controller.Lcd--controllerlcd-class","text":"A class used to access the screen on the V5 controller.","title":"Controller.Lcd class"},{"location":"SDK/controllers/#vex.Controller.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd--returns","text":"An instance of the Brain.Lcd class Source code in vex.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 class Lcd : '''### Controller.Lcd class A class used to access the screen on the V5 controller. #### Arguments: None #### Returns: An instance of the Brain.Lcd class ''' def __init__ ( self , * args ): self . _row = 0 self . _col = 0 pass def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col def column ( self ): '''Return the current column where text will be printed''' return self . _col def row ( self ): '''Return the current row where text will be printed''' return self . _row def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass # deprecated def clear_line ( self , number : vexnumber ): pass def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass # deprecated def new_line ( self ): pass def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--clear-screen-row","text":"","title":"Clear screen row"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, 1, 2, or 3, default is current cursor row","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_row--examples","text":"# clear row 2\\ controller.screen.clear_row(2) Source code in vex.py 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 def clear_row ( self , number : vexnumber ): '''### Clear screen row #### Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row #### Returns: None #### Examples: # clear row 2\\\\ controller.screen.clear_row(2) ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--clear-the-whole-screen","text":"","title":"Clear the whole screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.clear_screen--examples","text":"controller.screen.clear_screen() Source code in vex.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 def clear_screen ( self ): '''### Clear the whole screen #### Arguments: None #### Returns: None #### Examples: controller.screen.clear_screen() ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.column","text":"Return the current column where text will be printed Source code in vex.py 1596 1597 1598 def column ( self ): '''Return the current column where text will be printed''' return self . _col","title":"column"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.next_row--returns","text":"None Source code in vex.py 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 def next_row ( self ): '''### Move the cursor to the beginning of the next row #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print","text":"","title":"print"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/controllers/#vex.Controller.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Controller.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) Source code in vex.py 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 def print ( self , * args ): '''### print text on the screen using current curser position. #### Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 #### Returns: None #### Examples: # print the number 1 on the screen at current cursor position\\\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Controller.Lcd.row","text":"Return the current row where text will be printed Source code in vex.py 1600 1601 1602 def row ( self ): '''Return the current row where text will be printed''' return self . _row","title":"row"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"V5 controller has at most 3 lines of text","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--arguments","text":"row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Controller.Lcd.set_cursor--returns","text":"None Source code in vex.py 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 def set_cursor ( self , row : vexnumber , col : vexnumber ): '''### Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text #### Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. #### Returns: None ''' self . _row = row self . _col = col","title":"Returns:"},{"location":"SDK/controllers/#competition","text":"","title":"Competition"},{"location":"SDK/controllers/#vex.Competition","text":"","title":"Competition"},{"location":"SDK/controllers/#vex.Competition--competition-class-create-a-class-used-for-competition-control","text":"","title":"Competition class - create a class used for competition control"},{"location":"SDK/controllers/#vex.Competition--arguments","text":"driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition--returns","text":"An instance of the Competition class","title":"Returns:"},{"location":"SDK/controllers/#vex.Competition--examples","text":"def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton) Source code in vex.py 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 class Competition : '''### Competition class - create a class used for competition control #### Arguments: driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts. #### Returns: An instance of the Competition class #### Examples: def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton) ''' def __init__ ( self , driver : Callable [[], None ], autonomous : Callable [[], None ]): self . _driver_cb = driver self . _auton_cb = autonomous self . _driver_thread = None self . _auton_thread = None @staticmethod def is_enabled (): '''### return enable/disable state of the robot #### Arguments: None #### Returns: True if the robot is enabled ''' return True @staticmethod def is_driver_control (): '''### return driver control state of the robot #### Arguments: None #### Returns: True if driver control is enabled ''' return True def is_autonomous ( self = None ): '''### return autonomous state of the robot #### Arguments: None #### Returns: True if autonomous is enabled ''' return False def is_competition_switch ( self = None ): '''### return connection state of the competition switch #### Arguments: None #### Returns: True if competition switch is connected ''' return True def is_field_control ( self = None ): '''### return connection state of field controller #### Arguments: None #### Returns: True if field controller is connected ''' return False","title":"Examples:"},{"location":"SDK/controllers/#vex.Competition.is_autonomous","text":"","title":"is_autonomous"},{"location":"SDK/controllers/#vex.Competition.is_autonomous--return-autonomous-state-of-the-robot","text":"","title":"return autonomous state of the robot"},{"location":"SDK/controllers/#vex.Competition.is_autonomous--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition.is_autonomous--returns","text":"True if autonomous is enabled Source code in vex.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 def is_autonomous ( self = None ): '''### return autonomous state of the robot #### Arguments: None #### Returns: True if autonomous is enabled ''' return False","title":"Returns:"},{"location":"SDK/controllers/#vex.Competition.is_competition_switch","text":"","title":"is_competition_switch"},{"location":"SDK/controllers/#vex.Competition.is_competition_switch--return-connection-state-of-the-competition-switch","text":"","title":"return connection state of the competition switch"},{"location":"SDK/controllers/#vex.Competition.is_competition_switch--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition.is_competition_switch--returns","text":"True if competition switch is connected Source code in vex.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 def is_competition_switch ( self = None ): '''### return connection state of the competition switch #### Arguments: None #### Returns: True if competition switch is connected ''' return True","title":"Returns:"},{"location":"SDK/controllers/#vex.Competition.is_driver_control","text":"","title":"is_driver_control"},{"location":"SDK/controllers/#vex.Competition.is_driver_control--return-driver-control-state-of-the-robot","text":"","title":"return driver control state of the robot"},{"location":"SDK/controllers/#vex.Competition.is_driver_control--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition.is_driver_control--returns","text":"True if driver control is enabled Source code in vex.py 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 @staticmethod def is_driver_control (): '''### return driver control state of the robot #### Arguments: None #### Returns: True if driver control is enabled ''' return True","title":"Returns:"},{"location":"SDK/controllers/#vex.Competition.is_enabled","text":"","title":"is_enabled"},{"location":"SDK/controllers/#vex.Competition.is_enabled--return-enabledisable-state-of-the-robot","text":"","title":"return enable/disable state of the robot"},{"location":"SDK/controllers/#vex.Competition.is_enabled--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition.is_enabled--returns","text":"True if the robot is enabled Source code in vex.py 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 @staticmethod def is_enabled (): '''### return enable/disable state of the robot #### Arguments: None #### Returns: True if the robot is enabled ''' return True","title":"Returns:"},{"location":"SDK/controllers/#vex.Competition.is_field_control","text":"","title":"is_field_control"},{"location":"SDK/controllers/#vex.Competition.is_field_control--return-connection-state-of-field-controller","text":"","title":"return connection state of field controller"},{"location":"SDK/controllers/#vex.Competition.is_field_control--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Competition.is_field_control--returns","text":"True if field controller is connected Source code in vex.py 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 def is_field_control ( self = None ): '''### return connection state of field controller #### Arguments: None #### Returns: True if field controller is connected ''' return False","title":"Returns:"},{"location":"SDK/controllers/#event","text":"","title":"Event"},{"location":"SDK/controllers/#vex.Event","text":"","title":"Event"},{"location":"SDK/controllers/#vex.Event--event-class-create-a-new-event","text":"A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event.","title":"Event class - create a new event"},{"location":"SDK/controllers/#vex.Event--arguments","text":"callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Event--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/controllers/#vex.Event--examples","text":"def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\ sleep(20) # cause both foo and bar to be called\\ e.broadcast() Source code in vex.py 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 class Event : '''### Event class - create a new event A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event. #### Arguments: callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: An instance of the Event class #### Examples: def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\\\ sleep(20) # cause both foo and bar to be called\\\\ e.broadcast() ''' def __init__ ( self , callback = None , arg : tuple = ()): pass def __call__ ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e(bar) ''' pass def set ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e.set(bar) ''' pass def broadcast ( self ): '''### Broadcast to the event and cause all registered callback function to run #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e\\\\ e.broadcast() ''' pass def broadcast_and_wait ( self , timeout = 60000 ): '''### Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e, wait for completion\\\\ e.broadcast_and_wait() ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Event.__call__","text":"","title":"__call__"},{"location":"SDK/controllers/#vex.Event.__call__--add-callback-function-to-an-existing-event","text":"","title":"Add callback function to an existing event"},{"location":"SDK/controllers/#vex.Event.__call__--arguments","text":"callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Event.__call__--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Event.__call__--examples","text":"def bar(): print(\"bar\") # add callback function to existing event e\\ e(bar) Source code in vex.py 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 def __call__ ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e(bar) ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Event.broadcast","text":"","title":"broadcast"},{"location":"SDK/controllers/#vex.Event.broadcast--broadcast-to-the-event-and-cause-all-registered-callback-function-to-run","text":"","title":"Broadcast to the event and cause all registered callback function to run"},{"location":"SDK/controllers/#vex.Event.broadcast--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Event.broadcast--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Event.broadcast--examples","text":"# broadcast to an existing event e\\ e.broadcast() Source code in vex.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 def broadcast ( self ): '''### Broadcast to the event and cause all registered callback function to run #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e\\\\ e.broadcast() ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Event.broadcast_and_wait","text":"","title":"broadcast_and_wait"},{"location":"SDK/controllers/#vex.Event.broadcast_and_wait--broadcast-to-the-event-and-cause-all-registered-callback-function-to-run","text":"This is similar to broadcast except that it will wait for all registered callbacks to complete before returning.","title":"Broadcast to the event and cause all registered callback function to run"},{"location":"SDK/controllers/#vex.Event.broadcast_and_wait--arguments","text":"None","title":"Arguments:"},{"location":"SDK/controllers/#vex.Event.broadcast_and_wait--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Event.broadcast_and_wait--examples","text":"# broadcast to an existing event e, wait for completion\\ e.broadcast_and_wait() Source code in vex.py 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 def broadcast_and_wait ( self , timeout = 60000 ): '''### Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. #### Arguments: None #### Returns: None #### Examples: # broadcast to an existing event e, wait for completion\\\\ e.broadcast_and_wait() ''' pass","title":"Examples:"},{"location":"SDK/controllers/#vex.Event.set","text":"","title":"set"},{"location":"SDK/controllers/#vex.Event.set--add-callback-function-to-an-existing-event","text":"","title":"Add callback function to an existing event"},{"location":"SDK/controllers/#vex.Event.set--arguments","text":"callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/controllers/#vex.Event.set--returns","text":"None","title":"Returns:"},{"location":"SDK/controllers/#vex.Event.set--examples","text":"def bar(): print(\"bar\") # add callback function to existing event e\\ e.set(bar) Source code in vex.py 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 def set ( self , callback : Callable [ ... , None ], arg : tuple = ()): '''### Add callback function to an existing event #### Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. #### Returns: None #### Examples: def bar(): print(\"bar\") # add callback function to existing event e\\\\ e.set(bar) ''' pass","title":"Examples:"},{"location":"SDK/enums/","text":"Enums & Units This page documents all enums and unit types used throughout the DishPy VEX Python SDK. These are used for specifying units, modes, and options for various API calls. Ports vex.Ports Smartport definitions Base Enum vex.vexEnum Base class for all enumerated types Units PercentUnits vex.PercentUnits The measurement units for percentage values. PERCENT = PercentUnits ( 0 , 'PERCENT' ) A percentage unit that represents a value from 0% to 100% TimeUnits vex.TimeUnits The measurement units for time values. MSEC = TimeUnits ( 1 , 'MSEC' ) A time unit that is measured in milliseconds. SEC = TimeUnits ( 0 , 'SECONDS' ) A time unit that is measured in seconds. SECONDS = TimeUnits ( 0 , 'SECONDS' ) A time unit that is measured in seconds. CurrentUnits vex.CurrentUnits The measurement units for current values. AMP = CurrentUnits ( 0 , 'AMP' ) A current unit that is measured in amps. VoltageUnits vex.VoltageUnits The measurement units for voltage values. MV = VoltageUnits ( 0 , 'mV' ) A voltage unit that is measured in millivolts. VOLT = VoltageUnits ( 0 , 'VOLT' ) A voltage unit that is measured in volts. PowerUnits vex.PowerUnits The measurement units for power values. WATT = PowerUnits ( 0 , 'WATT' ) A power unit that is measured in watts. TorqueUnits vex.TorqueUnits The measurement units for torque values. INLB = TorqueUnits ( 1 , 'INLB' ) A torque unit that is measured in Inch Pounds. NM = TorqueUnits ( 0 , 'NM' ) A torque unit that is measured in Newton Meters. RotationUnits vex.RotationUnits The measurement units for rotation values. DEG = RotationUnits ( 0 , 'DEG' ) A rotation unit that is measured in degrees. RAW = RotationUnits ( 99 , 'RAW' ) A rotation unit that is measured in raw data form. REV = RotationUnits ( 1 , 'REV' ) A rotation unit that is measured in revolutions. VelocityUnits vex.VelocityUnits The measurement units for velocity values. DPS = VelocityUnits ( 2 , 'DPS' ) A velocity unit that is measured in degrees per second. PERCENT = VelocityUnits ( 0 , 'PCT' ) A velocity unit that is measured in percentage. RPM = VelocityUnits ( 1 , 'RPM' ) A velocity unit that is measured in rotations per minute. DistanceUnits vex.DistanceUnits The measurement units for distance values. CM = DistanceUnits ( 2 , 'CM' ) A distance unit that is measured in centimeters. IN = DistanceUnits ( 1 , 'IN' ) A distance unit that is measured in inches. MM = DistanceUnits ( 0 , 'MM' ) A distance unit that is measured in millimeters. AnalogUnits vex.AnalogUnits The measurement units for analog values. EIGHTBIT = AnalogUnits ( 0 , '8BIT' ) An analog unit that is measured in an 8-bit analog value (a value with 256 possible states). MV = AnalogUnits ( 0 , 'MV' ) An analog unit that is measured in millivolts. PCT = AnalogUnits ( 0 , 'PCT' ) An analog unit that is measured in percentage. TENBIT = AnalogUnits ( 0 , '10BIT' ) An analog unit that is measured in an 10-bit analog value (a value with 1024 possible states). TWELVEBIT = AnalogUnits ( 0 , '12BIT' ) An analog unit that is measured in an 12-bit analog value (a value with 4096 possible states). TemperatureUnits vex.TemperatureUnits The measurement units for temperature values. CELSIUS = TemperatureUnits ( 0 , 'CELSIUS' ) A temperature unit that is measured in celsius. FAHRENHEIT = TemperatureUnits ( 0 , 'FAHRENHEIT' ) A temperature unit that is measured in fahrenheit. Device & Control Enums DirectionType vex.DirectionType The defined units for direction values. FORWARD = DirectionType ( 0 , 'FORWARD' ) A direction unit that is defined as forward. REVERSE = DirectionType ( 1 , 'REVERSE' ) A direction unit that is defined as backward. UNDEFINED = DirectionType ( 2 , 'UNDEFINED' ) A direction unit used when direction is not known. TurnType vex.TurnType Bases: vexEnum The defined units for turn values. LEFT = TurnType ( 0 , 'LEFT' ) A turn unit that is defined as left turning. RIGHT = TurnType ( 1 , 'RIGHT' ) A turn unit that is defined as right turning. UNDEFINED = TurnType ( 2 , 'UNDEFINED' ) A turn unit unit used when direction is not known. BrakeType vex.BrakeType The defined units for motor brake values. BRAKE = BrakeType ( 1 , 'BRAKE' ) A brake unit that is defined as motor brake. COAST = BrakeType ( 0 , 'COAST' ) A brake unit that is defined as motor coast. HOLD = BrakeType ( 2 , 'HOLD' ) A brake unit that is defined as motor hold. GearSetting vex.GearSetting The defined units for gear values. RATIO_18_1 = GearSetting ( 1 , 'RATIO18_1' ) A gear unit that is defined as the green 18:1 gear cartridge used in V5 Smart Motors. RATIO_36_1 = GearSetting ( 0 , 'RATIO36_1' ) A gear unit that is defined as the red 36:1 gear cartridge used in V5 Smart Motors. RATIO_6_1 = GearSetting ( 2 , 'RATIO6_1' ) A gear unit that is defined as the blue 6:1 gear cartridge used in V5 Smart Motors. FontType vex.FontType A unit representing font type and size CJK16 = FontType ( 10 , 'CJK16' ) Chinese/Japanese/Korean font of size 16 MONO12 = FontType ( 9 , 'MONO12' ) proportional font of size 12 MONO15 = FontType ( 8 , 'MONO15' ) proportional font of size 15 MONO20 = FontType ( 0 , 'MONO20' ) monotype font of size 20 MONO30 = FontType ( 1 , 'MONO30' ) monotype font of size 30 MONO40 = FontType ( 2 , 'MONO40' ) monotype font of size 40 MONO60 = FontType ( 3 , 'MONO60' ) monotype font of size 60 PROP20 = FontType ( 4 , 'PROP20' ) proportional font of size 20 PROP30 = FontType ( 5 , 'PROP30' ) proportional font of size 30 PROP40 = FontType ( 6 , 'PROP40' ) proportional font of size 40 PROP60 = FontType ( 7 , 'PROP60' ) proportional font of size 60 ThreeWireType vex.ThreeWireType The defined units for 3-wire devices. ACCELEROMETER = ThreeWireType ( 9 , 'ACCELEROMETER' ) A 3-wire sensor that is defined as a accelerometer. ANALOG_IN = ThreeWireType ( 0 , 'ANALOG_IN' ) A 3-wire sensor that is defined as an analog input. ANALOG_OUT = ThreeWireType ( 1 , 'ANALOG_OUT' ) A 3-wire sensor that is defined as an analog output. DIGITAL_IN = ThreeWireType ( 2 , 'DIGITAL_IN' ) A 3-wire sensor that is defined as an digital input. DIGITAL_OUT = ThreeWireType ( 3 , 'DIGITAL_OUT' ) A 3-wire sensor that is defined as an digital output. ENCODER = ThreeWireType ( 12 , 'ENCODER' ) A 3-wire sensor that is defined as a quadrature encoder. GYRO = ThreeWireType ( 8 , 'GYRO' ) A 3-wire sensor that is defined as a yaw rate gyro. LIGHT_SENSOR = ThreeWireType ( 7 , 'LIGHT_SENSOR' ) A 3-wire sensor that is defined as a light sensor. LINE_SENSOR = ThreeWireType ( 6 , 'LINE_SENSOR' ) A 3-wire sensor that is defined as a line sensor. MOTOR = ThreeWireType ( 10 , 'MOTOR' ) A 3-wire sensor that is defined as a legacy vex motor. POTENTIOMETER = ThreeWireType ( 5 , 'POT' ) A 3-wire sensor that is defined as a potentiometer. SERVO = ThreeWireType ( 11 , 'SERVO' ) A 3-wire sensor that is defined as a legacy vex servo. SLEW_MOTOR = ThreeWireType ( 14 , 'SLEW_MOTOR' ) A 3-wire sensor that is defined as a legacy vex motor using slew rate control. SONAR = ThreeWireType ( 13 , 'SONAR' ) A 3-wire sensor that is defined as an ultrasonic sensor (sonar) SWITCH = ThreeWireType ( 4 , 'BUTTON' ) A 3-wire sensor that is defined as a switch. ControllerType vex.ControllerType The defined types for controller devices. PARTNER = ControllerType ( 1 , 'PARTNER' ) A controller defined as a partner controller. PRIMARY = ControllerType ( 0 , 'PRIMARY' ) A controller defined as a primary controller. AxisType vex.AxisType The defined units for inertial sensor axis. XAXIS = AxisType ( 0 , 'XAXIS' ) The X axis of the Inertial sensor. YAXIS = AxisType ( 1 , 'YAXIS' ) The Y axis of the Inertial sensor. ZAXIS = AxisType ( 2 , 'ZAXIS' ) The Z axis of the Inertial sensor. OrientationType vex.OrientationType The defined units for inertial sensor orientation. PITCH = OrientationType ( 1 , 'PITCH' ) pitch, orientation around the Y axis of the Inertial sensor. ROLL = OrientationType ( 0 , 'ROLL' ) roll, orientation around the X axis of the Inertial sensor. YAW = OrientationType ( 2 , 'YAW' ) yaw, orientation around the Z axis of the Inertial sensor. ObjectSizeType vex.ObjectSizeType The defined units for distance sensor object size. LedStateType vex.LedStateType The defined units for optical sensor led state. GestureType vex.GestureType The defined units for optical sensor gesture types. VexlinkType vex.VexlinkType The defined units for vexlink types. GENERIC = VexlinkType ( 3 , 'GENERIC' ) A vexlink type that is defined as a raw unmanaged link. MANAGER = VexlinkType ( 1 , 'MANAGER' ) A vexlink type that is defined as the manager radio. WORKER = VexlinkType ( 2 , 'WORKER' ) A vexlink type that is defined as the worker radio. EventMask vex.EventMask","title":"Enums &amp; Units"},{"location":"SDK/enums/#enums-units","text":"This page documents all enums and unit types used throughout the DishPy VEX Python SDK. These are used for specifying units, modes, and options for various API calls.","title":"Enums &amp; Units"},{"location":"SDK/enums/#ports","text":"","title":"Ports"},{"location":"SDK/enums/#vex.Ports","text":"Smartport definitions","title":"Ports"},{"location":"SDK/enums/#base-enum","text":"","title":"Base Enum"},{"location":"SDK/enums/#vex.vexEnum","text":"Base class for all enumerated types","title":"vexEnum"},{"location":"SDK/enums/#units","text":"","title":"Units"},{"location":"SDK/enums/#percentunits","text":"","title":"PercentUnits"},{"location":"SDK/enums/#vex.PercentUnits","text":"The measurement units for percentage values.","title":"PercentUnits"},{"location":"SDK/enums/#vex.PercentUnits.PERCENT","text":"A percentage unit that represents a value from 0% to 100%","title":"PERCENT"},{"location":"SDK/enums/#timeunits","text":"","title":"TimeUnits"},{"location":"SDK/enums/#vex.TimeUnits","text":"The measurement units for time values.","title":"TimeUnits"},{"location":"SDK/enums/#vex.TimeUnits.MSEC","text":"A time unit that is measured in milliseconds.","title":"MSEC"},{"location":"SDK/enums/#vex.TimeUnits.SEC","text":"A time unit that is measured in seconds.","title":"SEC"},{"location":"SDK/enums/#vex.TimeUnits.SECONDS","text":"A time unit that is measured in seconds.","title":"SECONDS"},{"location":"SDK/enums/#currentunits","text":"","title":"CurrentUnits"},{"location":"SDK/enums/#vex.CurrentUnits","text":"The measurement units for current values.","title":"CurrentUnits"},{"location":"SDK/enums/#vex.CurrentUnits.AMP","text":"A current unit that is measured in amps.","title":"AMP"},{"location":"SDK/enums/#voltageunits","text":"","title":"VoltageUnits"},{"location":"SDK/enums/#vex.VoltageUnits","text":"The measurement units for voltage values.","title":"VoltageUnits"},{"location":"SDK/enums/#vex.VoltageUnits.MV","text":"A voltage unit that is measured in millivolts.","title":"MV"},{"location":"SDK/enums/#vex.VoltageUnits.VOLT","text":"A voltage unit that is measured in volts.","title":"VOLT"},{"location":"SDK/enums/#powerunits","text":"","title":"PowerUnits"},{"location":"SDK/enums/#vex.PowerUnits","text":"The measurement units for power values.","title":"PowerUnits"},{"location":"SDK/enums/#vex.PowerUnits.WATT","text":"A power unit that is measured in watts.","title":"WATT"},{"location":"SDK/enums/#torqueunits","text":"","title":"TorqueUnits"},{"location":"SDK/enums/#vex.TorqueUnits","text":"The measurement units for torque values.","title":"TorqueUnits"},{"location":"SDK/enums/#vex.TorqueUnits.INLB","text":"A torque unit that is measured in Inch Pounds.","title":"INLB"},{"location":"SDK/enums/#vex.TorqueUnits.NM","text":"A torque unit that is measured in Newton Meters.","title":"NM"},{"location":"SDK/enums/#rotationunits","text":"","title":"RotationUnits"},{"location":"SDK/enums/#vex.RotationUnits","text":"The measurement units for rotation values.","title":"RotationUnits"},{"location":"SDK/enums/#vex.RotationUnits.DEG","text":"A rotation unit that is measured in degrees.","title":"DEG"},{"location":"SDK/enums/#vex.RotationUnits.RAW","text":"A rotation unit that is measured in raw data form.","title":"RAW"},{"location":"SDK/enums/#vex.RotationUnits.REV","text":"A rotation unit that is measured in revolutions.","title":"REV"},{"location":"SDK/enums/#velocityunits","text":"","title":"VelocityUnits"},{"location":"SDK/enums/#vex.VelocityUnits","text":"The measurement units for velocity values.","title":"VelocityUnits"},{"location":"SDK/enums/#vex.VelocityUnits.DPS","text":"A velocity unit that is measured in degrees per second.","title":"DPS"},{"location":"SDK/enums/#vex.VelocityUnits.PERCENT","text":"A velocity unit that is measured in percentage.","title":"PERCENT"},{"location":"SDK/enums/#vex.VelocityUnits.RPM","text":"A velocity unit that is measured in rotations per minute.","title":"RPM"},{"location":"SDK/enums/#distanceunits","text":"","title":"DistanceUnits"},{"location":"SDK/enums/#vex.DistanceUnits","text":"The measurement units for distance values.","title":"DistanceUnits"},{"location":"SDK/enums/#vex.DistanceUnits.CM","text":"A distance unit that is measured in centimeters.","title":"CM"},{"location":"SDK/enums/#vex.DistanceUnits.IN","text":"A distance unit that is measured in inches.","title":"IN"},{"location":"SDK/enums/#vex.DistanceUnits.MM","text":"A distance unit that is measured in millimeters.","title":"MM"},{"location":"SDK/enums/#analogunits","text":"","title":"AnalogUnits"},{"location":"SDK/enums/#vex.AnalogUnits","text":"The measurement units for analog values.","title":"AnalogUnits"},{"location":"SDK/enums/#vex.AnalogUnits.EIGHTBIT","text":"An analog unit that is measured in an 8-bit analog value (a value with 256 possible states).","title":"EIGHTBIT"},{"location":"SDK/enums/#vex.AnalogUnits.MV","text":"An analog unit that is measured in millivolts.","title":"MV"},{"location":"SDK/enums/#vex.AnalogUnits.PCT","text":"An analog unit that is measured in percentage.","title":"PCT"},{"location":"SDK/enums/#vex.AnalogUnits.TENBIT","text":"An analog unit that is measured in an 10-bit analog value (a value with 1024 possible states).","title":"TENBIT"},{"location":"SDK/enums/#vex.AnalogUnits.TWELVEBIT","text":"An analog unit that is measured in an 12-bit analog value (a value with 4096 possible states).","title":"TWELVEBIT"},{"location":"SDK/enums/#temperatureunits","text":"","title":"TemperatureUnits"},{"location":"SDK/enums/#vex.TemperatureUnits","text":"The measurement units for temperature values.","title":"TemperatureUnits"},{"location":"SDK/enums/#vex.TemperatureUnits.CELSIUS","text":"A temperature unit that is measured in celsius.","title":"CELSIUS"},{"location":"SDK/enums/#vex.TemperatureUnits.FAHRENHEIT","text":"A temperature unit that is measured in fahrenheit.","title":"FAHRENHEIT"},{"location":"SDK/enums/#device-control-enums","text":"","title":"Device &amp; Control Enums"},{"location":"SDK/enums/#directiontype","text":"","title":"DirectionType"},{"location":"SDK/enums/#vex.DirectionType","text":"The defined units for direction values.","title":"DirectionType"},{"location":"SDK/enums/#vex.DirectionType.FORWARD","text":"A direction unit that is defined as forward.","title":"FORWARD"},{"location":"SDK/enums/#vex.DirectionType.REVERSE","text":"A direction unit that is defined as backward.","title":"REVERSE"},{"location":"SDK/enums/#vex.DirectionType.UNDEFINED","text":"A direction unit used when direction is not known.","title":"UNDEFINED"},{"location":"SDK/enums/#turntype","text":"","title":"TurnType"},{"location":"SDK/enums/#vex.TurnType","text":"Bases: vexEnum The defined units for turn values.","title":"TurnType"},{"location":"SDK/enums/#vex.TurnType.LEFT","text":"A turn unit that is defined as left turning.","title":"LEFT"},{"location":"SDK/enums/#vex.TurnType.RIGHT","text":"A turn unit that is defined as right turning.","title":"RIGHT"},{"location":"SDK/enums/#vex.TurnType.UNDEFINED","text":"A turn unit unit used when direction is not known.","title":"UNDEFINED"},{"location":"SDK/enums/#braketype","text":"","title":"BrakeType"},{"location":"SDK/enums/#vex.BrakeType","text":"The defined units for motor brake values.","title":"BrakeType"},{"location":"SDK/enums/#vex.BrakeType.BRAKE","text":"A brake unit that is defined as motor brake.","title":"BRAKE"},{"location":"SDK/enums/#vex.BrakeType.COAST","text":"A brake unit that is defined as motor coast.","title":"COAST"},{"location":"SDK/enums/#vex.BrakeType.HOLD","text":"A brake unit that is defined as motor hold.","title":"HOLD"},{"location":"SDK/enums/#gearsetting","text":"","title":"GearSetting"},{"location":"SDK/enums/#vex.GearSetting","text":"The defined units for gear values.","title":"GearSetting"},{"location":"SDK/enums/#vex.GearSetting.RATIO_18_1","text":"A gear unit that is defined as the green 18:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_18_1"},{"location":"SDK/enums/#vex.GearSetting.RATIO_36_1","text":"A gear unit that is defined as the red 36:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_36_1"},{"location":"SDK/enums/#vex.GearSetting.RATIO_6_1","text":"A gear unit that is defined as the blue 6:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_6_1"},{"location":"SDK/enums/#fonttype","text":"","title":"FontType"},{"location":"SDK/enums/#vex.FontType","text":"A unit representing font type and size","title":"FontType"},{"location":"SDK/enums/#vex.FontType.CJK16","text":"Chinese/Japanese/Korean font of size 16","title":"CJK16"},{"location":"SDK/enums/#vex.FontType.MONO12","text":"proportional font of size 12","title":"MONO12"},{"location":"SDK/enums/#vex.FontType.MONO15","text":"proportional font of size 15","title":"MONO15"},{"location":"SDK/enums/#vex.FontType.MONO20","text":"monotype font of size 20","title":"MONO20"},{"location":"SDK/enums/#vex.FontType.MONO30","text":"monotype font of size 30","title":"MONO30"},{"location":"SDK/enums/#vex.FontType.MONO40","text":"monotype font of size 40","title":"MONO40"},{"location":"SDK/enums/#vex.FontType.MONO60","text":"monotype font of size 60","title":"MONO60"},{"location":"SDK/enums/#vex.FontType.PROP20","text":"proportional font of size 20","title":"PROP20"},{"location":"SDK/enums/#vex.FontType.PROP30","text":"proportional font of size 30","title":"PROP30"},{"location":"SDK/enums/#vex.FontType.PROP40","text":"proportional font of size 40","title":"PROP40"},{"location":"SDK/enums/#vex.FontType.PROP60","text":"proportional font of size 60","title":"PROP60"},{"location":"SDK/enums/#threewiretype","text":"","title":"ThreeWireType"},{"location":"SDK/enums/#vex.ThreeWireType","text":"The defined units for 3-wire devices.","title":"ThreeWireType"},{"location":"SDK/enums/#vex.ThreeWireType.ACCELEROMETER","text":"A 3-wire sensor that is defined as a accelerometer.","title":"ACCELEROMETER"},{"location":"SDK/enums/#vex.ThreeWireType.ANALOG_IN","text":"A 3-wire sensor that is defined as an analog input.","title":"ANALOG_IN"},{"location":"SDK/enums/#vex.ThreeWireType.ANALOG_OUT","text":"A 3-wire sensor that is defined as an analog output.","title":"ANALOG_OUT"},{"location":"SDK/enums/#vex.ThreeWireType.DIGITAL_IN","text":"A 3-wire sensor that is defined as an digital input.","title":"DIGITAL_IN"},{"location":"SDK/enums/#vex.ThreeWireType.DIGITAL_OUT","text":"A 3-wire sensor that is defined as an digital output.","title":"DIGITAL_OUT"},{"location":"SDK/enums/#vex.ThreeWireType.ENCODER","text":"A 3-wire sensor that is defined as a quadrature encoder.","title":"ENCODER"},{"location":"SDK/enums/#vex.ThreeWireType.GYRO","text":"A 3-wire sensor that is defined as a yaw rate gyro.","title":"GYRO"},{"location":"SDK/enums/#vex.ThreeWireType.LIGHT_SENSOR","text":"A 3-wire sensor that is defined as a light sensor.","title":"LIGHT_SENSOR"},{"location":"SDK/enums/#vex.ThreeWireType.LINE_SENSOR","text":"A 3-wire sensor that is defined as a line sensor.","title":"LINE_SENSOR"},{"location":"SDK/enums/#vex.ThreeWireType.MOTOR","text":"A 3-wire sensor that is defined as a legacy vex motor.","title":"MOTOR"},{"location":"SDK/enums/#vex.ThreeWireType.POTENTIOMETER","text":"A 3-wire sensor that is defined as a potentiometer.","title":"POTENTIOMETER"},{"location":"SDK/enums/#vex.ThreeWireType.SERVO","text":"A 3-wire sensor that is defined as a legacy vex servo.","title":"SERVO"},{"location":"SDK/enums/#vex.ThreeWireType.SLEW_MOTOR","text":"A 3-wire sensor that is defined as a legacy vex motor using slew rate control.","title":"SLEW_MOTOR"},{"location":"SDK/enums/#vex.ThreeWireType.SONAR","text":"A 3-wire sensor that is defined as an ultrasonic sensor (sonar)","title":"SONAR"},{"location":"SDK/enums/#vex.ThreeWireType.SWITCH","text":"A 3-wire sensor that is defined as a switch.","title":"SWITCH"},{"location":"SDK/enums/#controllertype","text":"","title":"ControllerType"},{"location":"SDK/enums/#vex.ControllerType","text":"The defined types for controller devices.","title":"ControllerType"},{"location":"SDK/enums/#vex.ControllerType.PARTNER","text":"A controller defined as a partner controller.","title":"PARTNER"},{"location":"SDK/enums/#vex.ControllerType.PRIMARY","text":"A controller defined as a primary controller.","title":"PRIMARY"},{"location":"SDK/enums/#axistype","text":"","title":"AxisType"},{"location":"SDK/enums/#vex.AxisType","text":"The defined units for inertial sensor axis.","title":"AxisType"},{"location":"SDK/enums/#vex.AxisType.XAXIS","text":"The X axis of the Inertial sensor.","title":"XAXIS"},{"location":"SDK/enums/#vex.AxisType.YAXIS","text":"The Y axis of the Inertial sensor.","title":"YAXIS"},{"location":"SDK/enums/#vex.AxisType.ZAXIS","text":"The Z axis of the Inertial sensor.","title":"ZAXIS"},{"location":"SDK/enums/#orientationtype","text":"","title":"OrientationType"},{"location":"SDK/enums/#vex.OrientationType","text":"The defined units for inertial sensor orientation.","title":"OrientationType"},{"location":"SDK/enums/#vex.OrientationType.PITCH","text":"pitch, orientation around the Y axis of the Inertial sensor.","title":"PITCH"},{"location":"SDK/enums/#vex.OrientationType.ROLL","text":"roll, orientation around the X axis of the Inertial sensor.","title":"ROLL"},{"location":"SDK/enums/#vex.OrientationType.YAW","text":"yaw, orientation around the Z axis of the Inertial sensor.","title":"YAW"},{"location":"SDK/enums/#objectsizetype","text":"","title":"ObjectSizeType"},{"location":"SDK/enums/#vex.ObjectSizeType","text":"The defined units for distance sensor object size.","title":"ObjectSizeType"},{"location":"SDK/enums/#ledstatetype","text":"","title":"LedStateType"},{"location":"SDK/enums/#vex.LedStateType","text":"The defined units for optical sensor led state.","title":"LedStateType"},{"location":"SDK/enums/#gesturetype","text":"","title":"GestureType"},{"location":"SDK/enums/#vex.GestureType","text":"The defined units for optical sensor gesture types.","title":"GestureType"},{"location":"SDK/enums/#vexlinktype","text":"","title":"VexlinkType"},{"location":"SDK/enums/#vex.VexlinkType","text":"The defined units for vexlink types.","title":"VexlinkType"},{"location":"SDK/enums/#vex.VexlinkType.GENERIC","text":"A vexlink type that is defined as a raw unmanaged link.","title":"GENERIC"},{"location":"SDK/enums/#vex.VexlinkType.MANAGER","text":"A vexlink type that is defined as the manager radio.","title":"MANAGER"},{"location":"SDK/enums/#vex.VexlinkType.WORKER","text":"A vexlink type that is defined as the worker radio.","title":"WORKER"},{"location":"SDK/enums/#eventmask","text":"","title":"EventMask"},{"location":"SDK/enums/#vex.EventMask","text":"","title":"EventMask"},{"location":"SDK/full/","text":"Complete API Reference This page contains the full API reference for the VEX Python SDK as provided by DishPy. All classes, functions, enums, and types are documented here. vex BRAKE = BrakeType . BRAKE A brake unit that is defined as motor brake. COAST = BrakeType . COAST A brake unit that is defined as motor coast. DEGREES = RotationUnits . DEG A rotation unit that is measured in degrees. DPS = VelocityUnits . DPS A velocity unit that is measured in degrees per second. FORWARD = DirectionType . FORWARD A direction unit that is defined as forward. HOLD = BrakeType . HOLD A brake unit that is defined as motor hold. INCHES = DistanceUnits . IN A distance unit that is measured in inches. LEFT = TurnType . LEFT A turn unit that is defined as left turning. MM = DistanceUnits . MM A distance unit that is measured in millimeters. MSEC = TimeUnits . MSEC A time unit that is measured in milliseconds. MV = VoltageUnits . MV A voltage unit that is measured in millivolts. PARTNER = ControllerType . PARTNER A controller defined as a partner controller. PERCENT = PercentUnits . PERCENT A percentage unit that represents a value from 0% to 100% PITCH = OrientationType . PITCH pitch, orientation around the Y axis of the Inertial sensor. PRIMARY = ControllerType . PRIMARY A controller defined as a primary controller. REVERSE = DirectionType . REVERSE A direction unit that is defined as backward. RIGHT = TurnType . LEFT A turn unit that is defined as right turning. ROLL = OrientationType . ROLL roll, orientation around the X axis of the Inertial sensor. RPM = VelocityUnits . RPM A velocity unit that is measured in rotations per minute. SECONDS = TimeUnits . SECONDS A time unit that is measured in seconds. TURNS = RotationUnits . REV A rotation unit that is measured in revolutions. VOLT = VoltageUnits . VOLT A voltage unit that is measured in volts. XAXIS = AxisType . XAXIS The X axis of the Inertial sensor. YAW = OrientationType . YAW yaw, orientation around the Z axis of the Inertial sensor. YAXIS = AxisType . YAXIS The Y axis of the Inertial sensor. ZAXIS = AxisType . ZAXIS The Z axis of the Inertial sensor. Accelerometer Accelerometer class - create a new accelerometer For full functionality, three Accelerometer instances would need to be created, one for each axis. Arguments: port : The 3wire port to use for the accelerometer sensitivity (optional) : set high sensitivity mode (+/- 2G), use True or 1 Returns: An instance of the Accelerometer class Examples: accx = Accelerometer(brain.three_wire_port.a)\\ accy = Accelerometer(brain.three_wire_port.b)\\ accz = Accelerometer(brain.three_wire_port.c) acceleration () The current value of the accelerometer scaled to units of gravity Arguments: None Returns: A value in the range +/- 6 or +/-2G if high sensitivity mode is set Examples: # get accelerometer in range+/- 6G value = accz.acceleration() changed ( callback , arg = ()) Register a function to be called when the value of the accelerometer changes Arguments: callback : A function that will be called when the value of the accelerometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"accelerometer changed\") accz.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the accelerometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get accelerometer in range 0 - 4095\\ value = accz.value() # get accelerometer in range 0 - 1023\\ value = accz.value(AnalogUnits.TENBIT) AddressableLed Addressable led class Arguments: port : The 3wire port to use for the addressable led strip Returns: An instance of the AddressableLed class Examples: addr1 = AddressableLed(brain.three_wire_port.a) clear () clear all addressable led to off Arguments: None Returns: None Examples: addr1.clear() set ( data , offset = 0 ) Set the addressable led strip to provided values Arguments: data : An list of Color values offset (optional) : index of led to start at, 0 based Returns: None Examples: addr1 = AddressableLed(brain.three_wire_port.a)\\ pix = [Color(0x800000),Color(0x008000),Color(0x000080)]\\ addr1.set(pix) AnalogIn AnalogIn class - create a new analog input Arguments: port : The 3wire port to use for the analog input Returns: An instance of the AnalogIn class Examples: ana1 = AnalogIn(brain.three_wire_port.a) changed ( callback , arg = ()) Register a function to be called when the value of the analog input changes Arguments: callback : A function that will be called when the value of the analog input changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"analog input changed\") ana1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the analog input Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get analog input in range 0 - 4095\\ value = ana1.value() # get analog input in range 0 - 1023\\ value = ana1.value(AnalogUnits.TENBIT) AnalogUnits The measurement units for analog values. EIGHTBIT = AnalogUnits ( 0 , '8BIT' ) An analog unit that is measured in an 8-bit analog value (a value with 256 possible states). MV = AnalogUnits ( 0 , 'MV' ) An analog unit that is measured in millivolts. PCT = AnalogUnits ( 0 , 'PCT' ) An analog unit that is measured in percentage. TENBIT = AnalogUnits ( 0 , '10BIT' ) An analog unit that is measured in an 10-bit analog value (a value with 1024 possible states). TWELVEBIT = AnalogUnits ( 0 , '12BIT' ) An analog unit that is measured in an 12-bit analog value (a value with 4096 possible states). AxisType The defined units for inertial sensor axis. XAXIS = AxisType ( 0 , 'XAXIS' ) The X axis of the Inertial sensor. YAXIS = AxisType ( 1 , 'YAXIS' ) The Y axis of the Inertial sensor. ZAXIS = AxisType ( 2 , 'ZAXIS' ) The Z axis of the Inertial sensor. Brain Brain class The Brain class creates a number of instances of internal classes that allow access\\ to the screen, battery, 3wire ports and sd card on the V5 brain. Arguments: None Returns: An instance of the Brain class Examples: brain = Brain() battery = Brain . Battery () An instance of the Battery class screen = Brain . Lcd () An instance of the Lcd class sdcard = Brain . Sdcard () An instance of the Sdcard class three_wire_port = Triport ( Ports . PORT22 ) An instance of the Triport (3wire) class timer = Timer () An instance of the Timer class Battery Battery class - access the brain battery Arguments: None Returns: Instance of Battery class Examples: capacity () read remaining capacity of the battery Arguments: None Returns: capacity as percentage Examples: current ( units = CurrentUnits . AMP ) read the current of the battery Arguments: units (optional) : AMP, default is mA but jot available as an enum. Returns: current in supplied units Examples: temperature ( units = PercentUnits . PERCENT ) read the temperature of the battery Arguments: units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS Returns: temperature in supplied units Examples: voltage ( units = VoltageUnits . MV ) read the voltage of the battery Arguments: units (optional) : VOLTS or MV, default is MV Returns: voltage in supplied units Examples: Lcd Brain.Lcd class A class used to access to screen on the V5 for drawing and receiving touch events. Arguments: None Returns: An instance of the Brain.Lcd class clear_row ( number = None , color = Color . BLACK ) Clear screen row to a single color The color can be passed in similar ways to the Color class.\\ Arguments: row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED) clear_screen ( color = Color . BLACK ) Clear the whole screen to a single color The color can be passed in similar ways to the Color class.\\ Arguments: color (optional) : The color the screen will be set to, default is BLACK Returns: None Examples: # clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE) column () Return the current column where text will be printed draw_circle ( x , y , radius , color = None ) Draw a circle on the screen using the current pen and fill colors. Arguments: x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED) draw_image_from_file ( filename , x , y ) Display the named image from the SD Card Arguments: filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen Returns: True if successfully drawn, False on error Examples: # draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0) draw_line ( x1 , y1 , x2 , y2 ) Draw a line on the screen using the current pen color. Arguments: x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin. Returns: None Examples: # draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20) draw_pixel ( x , y ) Draw a pixel on the screen using the current pen color. Arguments: x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin. Returns: None Examples: # draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10) draw_rectangle ( x , y , width , height , color = None ) Draw a rectangle on the screen using the current pen and fill colors. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied Returns: None Examples: # draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED) get_string_height ( * args ) get height of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: height of string as integer. get_string_width ( * args ) get width of a string Arguments: arguments are in the same format as can be passed to the print function. Returns: width of string as integer. next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None pressed ( callback , arg = ()) Register a function to be called when the screen is pressed Arguments: callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen pressed\") brain.screen.pressed(foo) pressing () Returns whether the screen is currently being pressed (touched) Arguments: None Returns: True or False print ( * args , ** kwargs ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) print_at ( * args , ** kwargs ) print text on the screen at x and coordinates. Arguments: Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True. Returns: None Examples: # print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40) released ( callback , arg = ()) Register a function to be called when the screen is released (touch removed) Arguments: callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"screen released\") brain.screen.released(foo) render () Switch drawing to double buffered and render too screen. Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated. Arguments: None Returns: True if buffer was successfully rendered to screen. Examples: row () Return the current row where text will be printed set_clip_region ( x , y , width , height ) Sets the clip region for drawing to the supplied rectangle. All drawing is clipped to the given rectangle.\\ This is set on a per thread basis. Arguments: x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. Returns: None Examples: set_cursor ( row , col ) Set the cursor position used for printing text on the screen row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1 Arguments: row : The cursor row col : The cursor column Returns: None set_fill_color ( color ) Set the fill color used for drawing rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The fill color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\") set_font ( fontname ) Set the font type used for printing text on the screen Arguments: fontname : The font name Returns: None Examples: brain.screen.font_type(FontType.MONO40) set_origin ( x , y ) Set the origin used for drawing graphics on the screen drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen. Arguments: x : The origins x position relative to top left corner y : The origins y position relative to top left corner Returns: None set_pen_color ( color ) Set the pen color used for drawing lines, rectangles and circles The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread. Arguments: color : The pen color Returns: None Examples: # set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\") set_pen_width ( width ) Set the pen width used for drawing lines, rectangles and circles Arguments: width : The pen width Returns: None x_position () The X coordinate of the last screen event, press or release Arguments: None Returns: The X coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo) y_position () The Y coordinate of the last screen event, press or release Arguments: None Returns: The Y coordinate as an int Examples: def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo) Sdcard Sdcard class - access the brain sdcard Arguments: None Returns: Instance of Sdcard class Examples: appendfile ( filename , * args ) append a bytearray into a named file Append is used to add more data to an existing file. Arguments: filename : The name of the file to write buffer : A bytearray to write into the file Returns: The number of bytes written Examples: # append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \")) exists ( * args ) check to see if named file exists on the sd card Arguments: filename : The name of the file to check Returns: True if file exists Examples: filesize ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples: is_inserted () returns status of SD Card Arguments: None Returns: True if an sdcard is inserted into the brain Examples: loadfile ( filename , * args ) load the named file Arguments: filename : The name of the file to read buffer (optional) : A bytearray to read the file into Returns: A bytearray with file data Examples: # read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt') savefile ( filename , * args ) Save a bytearray into a named file If the optional bytearray is None, then an empty file is created. Arguments: filename : The name of the file to write buffer (optional) : A bytearray to write into the file Returns: The number of bytes written Examples: # write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \")) size ( filename ) returns the size in bytes of the named file Arguments: filename : The name of the file to check Returns: size of file in bytes Examples: BrakeType The defined units for motor brake values. BRAKE = BrakeType ( 1 , 'BRAKE' ) A brake unit that is defined as motor brake. COAST = BrakeType ( 0 , 'COAST' ) A brake unit that is defined as motor coast. HOLD = BrakeType ( 2 , 'HOLD' ) A brake unit that is defined as motor hold. Bumper Bumper class - create a new bumper switch Arguments: port : The 3wire port the bumper switch is connected to Returns: An instance of the Bumper class Examples: bumper1 = Bumper(brain.three_wire_port.a) pressed ( callback , arg = ()) Register a function to be called when the bumper switch is pressed Arguments: callback : A function that will be called when the bumper switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch pressed\") bumper1.pressed(foo) pressing () Returns whether the bumper switch is currently being pressed Arguments: None Returns: True or False released ( callback , arg = ()) Register a function to be called when the bumper switch is released Arguments: callback : A function that will be called when the bumper switch is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch released\") bumper1.released(foo) value () The current value of the bumper switch Arguments: None Returns: 1 or 0 Code Code class - a class for holding vision sensor codes A vision code is a collection of up to five vision signatures. Arguments: sig1 : A vision signature sig2 : A vision signature sig3 (optional) : A vision signature sig4 (optional) : A vision signature sig5 (optional) : A vision signature Returns: An instance of the Signature class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ SIG_2 = Signature(2, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ C1 = Code(SIG_1, SIG_2) id () Not used, always returns 0 Color Color class - create a new color This class is used to create instances of color objects Arguments: value : The color value, can be specified in various ways, see examples. Returns: An instance of the Color class Examples: # create blue using hex value\\ c = Color(0x0000ff) # create blue using r, g, b values\\ c = Color(0, 0, 255) # create blue using web string\\ c = Color(\"#00F\") # create blue using web string (alternate)\\ c = Color(\"#0000FF\") # create red using an existing object\\ c = Color(Color.RED) BLACK = DefinedColor ( 0 ) predefined Color black BLUE = DefinedColor ( 255 ) predefined Color blue CYAN = DefinedColor ( 65535 ) predefined Color cyan GREEN = DefinedColor ( 65280 ) predefined Color green ORANGE = DefinedColor ( 16753920 ) predefined Color orange PURPLE = DefinedColor ( 16711935 ) predefined Color purple RED = DefinedColor ( 16711680 ) predefined Color red TRANSPARENT = DefinedColor ( 0 ) predefined Color transparent WHITE = DefinedColor ( 16777215 ) predefined Color white YELLOW = DefinedColor ( 16776960 ) predefined Color yellow hsv ( hue , saturation , value ) change existing Color instance using hsv Arguments: hue : The hue of the color saturation : The saturation of the color value : The brightness of the color Returns: integer value representing the color Examples: # create a color that is red c.hsv( 0, 1.0, 1.0) is_transparent () return whether color is transparent or not Arguments: None Returns: True or False Examples: rgb ( * args ) change existing Color instance to new rgb value Arguments: value : The color value, can be specified in various ways, see examples. Returns: integer value representing the color Examples: # create a color that is red c = Color(0xFF0000) # change color to blue using single value c.rgb(0x0000FF) # change color to green using three values c.rgb(0, 255, 0) web ( value ) change existing Color instance using web string Arguments: value : The new color as a web string Returns: integer value representing the color Examples: # create a color that is red c.web('#F00') Competition Competition class - create a class used for competition control Arguments: driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts. Returns: An instance of the Competition class Examples: def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton) is_autonomous () return autonomous state of the robot Arguments: None Returns: True if autonomous is enabled is_competition_switch () return connection state of the competition switch Arguments: None Returns: True if competition switch is connected is_driver_control () return driver control state of the robot Arguments: None Returns: True if driver control is enabled is_enabled () return enable/disable state of the robot Arguments: None Returns: True if the robot is enabled is_field_control () return connection state of field controller Arguments: None Returns: True if field controller is connected Controller Controller class - create a class to access the controller Arguments: None Returns: An instance of the Controller class Examples: axis1 = Controller . Axis () The joystick axis 1 on the controller axis2 = Controller . Axis () The joystick axis 2 on the controller axis3 = Controller . Axis () The joystick axis 3 on the controller axis4 = Controller . Axis () The joystick axis 4 on the controller buttonA = Controller . Button () The A button on the controller buttonB = Controller . Button () The B button on the controller buttonDown = Controller . Button () The Down button on the controller buttonL1 = Controller . Button () The L1 button on the controller buttonL2 = Controller . Button () The L2 button on the controller buttonLeft = Controller . Button () The Left button on the controller buttonR1 = Controller . Button () The R1 button on the controller buttonR2 = Controller . Button () The R2 button on the controller buttonRight = Controller . Button () The Right button on the controller buttonUp = Controller . Button () The Up button on the controller buttonX = Controller . Button () The X button on the controller buttonY = Controller . Button () The Y button on the controller screen = Controller . Lcd () An instance of the Lcd class Axis Axis class Arguments: None Returns: An instance of an Axis class Examples: changed ( callback , arg = ()) Register a function to be called when the axis value changes Arguments: callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"axis changed\") controller.axis1.changed(foo) position () Return the current position of the axis in percentage Arguments: None Returns: A value in the range +/- 100 Examples: a = controller.axis1.position() value () Return the current position of the axis Arguments: None Returns: A value in the range +/- 127 Examples: a = controller.axis1.position() Button pressed ( callback , arg = ()) Register a function to be called when a button is pressed Arguments: callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo) pressing () Returns whether a button is currently being pressed Arguments: None Returns: True or False released ( callback , arg = ()) Register a function to be called when a button is released Arguments: callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"button released\") controller.buttonL1.released(foo) Lcd Controller.Lcd class A class used to access the screen on the V5 controller. Arguments: None Returns: An instance of the Brain.Lcd class clear_row ( number ) Clear screen row Arguments: row (optional) : The row to clear, 1, 2, or 3, default is current cursor row Returns: None Examples: # clear row 2\\ controller.screen.clear_row(2) clear_screen () Clear the whole screen Arguments: None Returns: None Examples: controller.screen.clear_screen() column () Return the current column where text will be printed next_row () Move the cursor to the beginning of the next row Arguments: None Returns: None print ( * args ) print text on the screen using current curser position. Arguments: Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 Returns: None Examples: # print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity())) row () Return the current row where text will be printed set_cursor ( row , col ) Set the cursor position used for printing text on the screen V5 controller has at most 3 lines of text Arguments: row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1. Returns: None rumble ( pattern ) Send a rumble string to the V5 controller Arguments: pattern : A pattern using '.' and '-' for short and long rumbles. Returns: None Examples: controller.rumble('..--') ControllerType The defined types for controller devices. PARTNER = ControllerType ( 1 , 'PARTNER' ) A controller defined as a partner controller. PRIMARY = ControllerType ( 0 , 'PRIMARY' ) A controller defined as a primary controller. CurrentUnits The measurement units for current values. AMP = CurrentUnits ( 0 , 'AMP' ) A current unit that is measured in amps. DigitalIn DigitalIn class - create a new digital input Arguments: port : The 3wire port to use for the digital input Returns: An instance of the DigitalIn class Examples: dig1 = DigitalIn(brain.three_wire_port.a) high ( callback , arg = ()) Register a function to be called when the digital input goes to the logic high state Arguments: callback : A function that will be called when the digital input goes to the logic high state arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"input high\") dig1.high(foo) low ( callback , arg = ()) Register a function to be called when the digital input goes to the logic low state Arguments: callback : A function that will be called when the digital input goes to the logic low state arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"input low\") dig1.low(foo) value () The current value of the digital input Arguments: None Returns: 1 or 0 DigitalOut DigitalOut class - create a new digital output Arguments: port : The 3wire port to use for the digital output Returns: An instance of the DigitalOut class Examples: dig1 = DigitalOut(brain.three_wire_port.a) set ( value ) Set the output level for the digital output Arguments: value : 0, 1, True or False Returns: None Examples: dig1.set(True) value () The current value of the digital output Arguments: None Returns: 1 or 0 DirectionType The defined units for direction values. FORWARD = DirectionType ( 0 , 'FORWARD' ) A direction unit that is defined as forward. REVERSE = DirectionType ( 1 , 'REVERSE' ) A direction unit that is defined as backward. UNDEFINED = DirectionType ( 2 , 'UNDEFINED' ) A direction unit used when direction is not known. Distance Distance class - a class for working with the distance sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Distance class Examples: dist1 = Distance(Ports.PORT1) changed ( callback , arg = ()) Register a function to be called when the distance value changes Arguments: callback : A function that will be called when the distance value changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"distance changed\") dist1.changed(foo) installed () Check for device connection Arguments: None Returns: True or False is_object_detected () Returns if an object is detected Arguments: None Returns: True or False object_distance ( units = DistanceUnits . MM ) The current distance the sensor is reading. The distance will return a large positive number if no object is detected. Arguments: units (optional): The distance units to return the distance value in. default is MM. Returns: A value for distance in the specified units. Examples: # get distance in mm\\ value = dist1.object_distance() # get distance in inches\\ value = dist1.object_distance(INCHES) object_rawsize () Get the raw value of object size the sensor is detecting. Raw size will be a number ranging from 0 to about 400\\ Larger and more reflective objects will return larger values. Arguments: None Returns: A value for object size that is a number.\\ Examples: # get object raw size\\ size = dist1.object_rawsize() object_size () Get an estimation of the object size the sensor is detecting. Arguments: None Returns: A value for object size.\\ The value will be of type ObjectSizeType Examples: # get object size\\ size = dist1.object_size() object_velocity () Returns the object velocity velocity is calculated from change of distance over time Arguments: None Returns: The velocity in m/s timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS DistanceUnits The measurement units for distance values. CM = DistanceUnits ( 2 , 'CM' ) A distance unit that is measured in centimeters. IN = DistanceUnits ( 1 , 'IN' ) A distance unit that is measured in inches. MM = DistanceUnits ( 0 , 'MM' ) A distance unit that is measured in millimeters. DriveTrain DriveTrain class - use this to create a simple drivetrain Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. Returns: A new DriveTrain object. Examples: # A simple two motor drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES) current ( units = CurrentUnits . AMP ) Returns the total current all drivetrain motors are using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The drivetrain current in provided units drive ( direction , velocity = None , units = VelocityUnits . RPM ) drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters. Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # drive forward at velocity set with set_velocity\\ drive1.drive(FORWARD) # drive forward at 50 rpm\\ drive1.drive(FORWARD, 50) # drive with negative velocity, ie. backwards\\ drive1.drive(FORWARD, -20) # drive forwards with 100% velocity\\ drive1.drive(FORWARD, 100, PERCENT) # drive forwards at 50 rpm\\ drive1.drive(FORWARD, 50, RPM) # drive forwards at 360 dps\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) drive_for ( direction , distance , units = DistanceUnits . IN , velocity = None , units_v = VelocityUnits . RPM , wait = True ) move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to move a distance. Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # drive forward 10 inches from the current position\\ drive1.drive_for(FORWARD, 10, INCHES) # drive reverse 1000mm from the current position with motors at 50 rpm\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) efficiency ( units = PercentUnits . PERCENT ) Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent get_timeout () Get the current timeout value used by the drivetrain Arguments: None Returns: Timeout value in mS is_done () Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for or turn_for status is_moving () Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for or turn_for status power ( units = PowerUnits . WATT ) Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The drivetrain power in provided units set_drive_velocity ( velocity , units = VelocityUnits . RPM ) Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None set_stopping ( mode = BrakeType . COAST ) Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. Arguments: mode : The stopping mode, COAST, BRAKE or HOLD Returns: None set_timeout ( timeout , units = TimeUnits . MSEC ) Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None set_turn_velocity ( velocity , units = VelocityUnits . RPM ) Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None stop ( mode = None ) Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None temperature ( units = TemperatureUnits . CELSIUS ) Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units torque ( units = TorqueUnits . NM ) Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units turn ( direction , velocity = None , units = VelocityUnits . RPM ) turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters. Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # turn left at velocity set with set_turn_velocity\\ drive1.turn(LEFT) # drive right at 50 rpm\\ drive1.turn(RIGHT, 50) # turn right with 100% velocity\\ drive1.turn(RIGHT, 100, PERCENT) # turn right at 50 rpm\\ drive1.turn(RIGHT, 50, RPM) # turn right at 360 dps\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) turn_for ( direction , angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to turn a specified angle. Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # turn right 90 degrees\\ drive1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) velocity ( units = VelocityUnits . RPM ) Returns average velocity of the left and right motors Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The drivetrain velocity in provided units Electromagnet Electromagnet class - a class for working with the electromagnet Arguments: port : The smartport this device is attached to Returns: An instance of the Electromagnet class Examples: em1 = Electromagnet(Ports.PORT1) drop ( duration = 1000 , units = MSEC , power = 50 ) energize the electromagnet to drop objects Arguments: duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing. Returns: None Examples: # drop with default values\\ em1.drop() # drop with custom values\\ em1.drop(250, MSEC, 90) installed () Check for device connection Arguments: None Returns: True or False pickup ( duration = 1000 , units = MSEC , power = 50 ) energize the electromagnet to pickup objects Arguments: duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing. Returns: None Examples: # pickup with default values\\ em1.pickup() # pickup with custom values\\ em1.pickup(250, MSEC, 90) set_power ( value ) set the default power to use for drop and pickup methods Arguments: value : power in range 0 to 100 Returns: None Examples: # set default power to 80\\ em1.set_power(80) temperature ( * args ) Returns the temperature of the electromagnet Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The electromagnet temperature in provided units timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Encoder Encoder class - create a new encoder sensor An encoder uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h Arguments: port : The 3wire port to use for the encoder sensor Returns: An instance of the Encoder class Examples: enc1 = Encoder(brain.three_wire_port.a) position ( units = RotationUnits . DEG ) The current position of the encoder Arguments: units (optional) : The rotation units to return the position value in, default is DEGREES. Returns: A value for encoder position in the specified units. Examples: # get encoder position\\ value = enc1.position() reset_position () Reset the encoder position to 0 Arguments: None Returns: None set_position ( value , units = RotationUnits . DEG ) set the encoder position to a new value Arguments: value : The new value to use for position. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of position to 180 degrees\\ enc1.set_position(180) value () The current value of the encoder in raw counts One full turn of the encoder is 360 counts. Arguments: None Returns: A value for encoder counts. Examples: # get encoder raw counts\\ value = enc1.value() velocity ( units = VelocityUnits . RPM ) The current velocity of the encoder Arguments: units (optional) : The velocity units to return the value in, default is RPM. Returns: A value for encoder velocity in the specified units. Examples: # get encoder velocity in rpm\\ value = enc1.velocity() Event Event class - create a new event A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event. Arguments: callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: An instance of the Event class Examples: def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\ sleep(20) # cause both foo and bar to be called\\ e.broadcast() __call__ ( callback , arg = ()) Add callback function to an existing event Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: None Examples: def bar(): print(\"bar\") # add callback function to existing event e\\ e(bar) broadcast () Broadcast to the event and cause all registered callback function to run Arguments: None Returns: None Examples: # broadcast to an existing event e\\ e.broadcast() broadcast_and_wait ( timeout = 60000 ) Broadcast to the event and cause all registered callback function to run This is similar to broadcast except that it will wait for all registered callbacks to complete before returning. Arguments: None Returns: None Examples: # broadcast to an existing event e, wait for completion\\ e.broadcast_and_wait() set ( callback , arg = ()) Add callback function to an existing event Arguments: callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function. Returns: None Examples: def bar(): print(\"bar\") # add callback function to existing event e\\ e.set(bar) FontType A unit representing font type and size CJK16 = FontType ( 10 , 'CJK16' ) Chinese/Japanese/Korean font of size 16 MONO12 = FontType ( 9 , 'MONO12' ) proportional font of size 12 MONO15 = FontType ( 8 , 'MONO15' ) proportional font of size 15 MONO20 = FontType ( 0 , 'MONO20' ) monotype font of size 20 MONO30 = FontType ( 1 , 'MONO30' ) monotype font of size 30 MONO40 = FontType ( 2 , 'MONO40' ) monotype font of size 40 MONO60 = FontType ( 3 , 'MONO60' ) monotype font of size 60 PROP20 = FontType ( 4 , 'PROP20' ) proportional font of size 20 PROP30 = FontType ( 5 , 'PROP30' ) proportional font of size 30 PROP40 = FontType ( 6 , 'PROP40' ) proportional font of size 40 PROP60 = FontType ( 7 , 'PROP60' ) proportional font of size 60 GearSetting The defined units for gear values. RATIO_18_1 = GearSetting ( 1 , 'RATIO18_1' ) A gear unit that is defined as the green 18:1 gear cartridge used in V5 Smart Motors. RATIO_36_1 = GearSetting ( 0 , 'RATIO36_1' ) A gear unit that is defined as the red 36:1 gear cartridge used in V5 Smart Motors. RATIO_6_1 = GearSetting ( 2 , 'RATIO6_1' ) A gear unit that is defined as the blue 6:1 gear cartridge used in V5 Smart Motors. GestureType The defined units for optical sensor gesture types. Gps Gps class - a class for working with the gps sensor Arguments: port : The smartport this device is attached to origin_x (optional) : The X location of the GPS with respect to origin of the robot. origin_y (optional) : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM Returns: An instance of the Gps class Examples: gps1 = Gps(Ports.PORT1) acceleration ( axis ) read the acceleration for one axis of the gps Arguments: axis : The axis to read Returns: A value for the acceleration of the axis in units of gravity. Examples: # get the acceleration for the Z axis of the gps\\ zaccel = gps1.acceleration(ZAXIS) calibrate () not used on the GPS sensor changed ( callback , arg = ()) Register a function to be called when the value of the gps heading changes This is not particularly useful as gps heading is not stable and will cause many events. Arguments: callback : A function that will be called when the value of the gps heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"heading changed\") gps1.changed(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT gyro_rate ( axis , units = VelocityUnits . DPS ) read the gyro rate for one axis of the gps Arguments: axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS Returns: A value for the gyro rate of the axis in the units specified. Examples: # get the gyro rate for the Z axis of the gps\\ zrate = gps1.gyro_rate(ZAXIS) heading ( units = RotationUnits . DEG ) read the current heading of the gps heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the gps\\ value = gps1.heading() installed ( * args ) Check for device connection Arguments: None Returns: True or False is_calibrating () not used on the GPS sensor orientation ( axis , units = RotationUnits . DEG ) read the orientation for one axis of the gps Arguments: axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES Returns: A value for the axis orientation in the units specified. Examples: # get the pitch value for the gps\\ pitch = gps1.orientation(OrientationType.PITCH) quality () read the current quality of the gps data A quality of 100 indicates the gps can see the gps field strip and is returning good readings\\ The value for quality will reduce as the confidence in x and y location lowers. Arguments: None Returns: A value of quality in the range 0 to 100 Examples: # get the current location and heading quality for the gps\\ q = gps1.quality() reset_heading () Reset the gps heading to 0 Arguments: None Returns: None reset_rotation () Reset the gps rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the gps rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the gps\\ value = gps1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the gps heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ gps1.set_heading(180) set_location ( x , y , units = DistanceUnits . MM , angle = 0 , units_r = RotationUnits . DEG ) set the initial location of the robot This gives a hint as to the location of the robot/gps sensor when it is first initialized.\\ This can be used if in the initial position the gps cannot see the gps field strip. Arguments: x : The initial X coordinate. y : The initial Y coordinate.\\ note. both X and Y must be supplied units (optional) : The units that X and Y coordinates are specified in, default is MM angle (optional) : The initial heading of the robot. units_r (optional) : The units that angle is specified in, default is DEGREES Returns: None Examples: # set the initial location of the gps\\ gps1.set_location(1000, -1000, MM, 90, DEGREES) set_origin ( x = 0 , y = 0 , units = DistanceUnits . MM ) set the origin of the gps sensor An alternate way of setting sensor origin if not provided in the Gps class constructor. Arguments: x : The X location of the GPS with respect to origin of the robot. y : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM Returns: None Examples: # set the origin of the gps\\ gps1.set_origin(6, -6, INCHES) set_rotation ( value , units = RotationUnits . DEG ) set the gps rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ gps1.set_rotation(180) set_sensor_rotation ( value , units = RotationUnits . DEG ) set the sensor rotation of the gps sensor with respect to the robot. This allows heading and rotation methods to return angles relative to the robot rather than the gps. Arguments: value : The angle of the GPS with respect to the robot. units (optional) : The units that value is specified in, default is DEGREES Returns: None Examples: # set the sensor rotation of the gps\\ gps1.set_sensor_rotation(180, DEGREES) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS x_position ( units = DistanceUnits . MM ) read the current x coordinate of the gps Arguments: units (optional) : The units to return the position in, default is MM Returns: A value for the x coordinate in the units specified. Examples: # get the current x coordinate for the gps\\ posx = gps1.x_position() y_position ( units = DistanceUnits . MM ) read the current y coordinate of the gps Arguments: units (optional) : The units to return the position in, default is MM Returns: A value for the y coordinate in the units specified. Examples: # get the current y coordinate for the gps\\ posy = gps1.y_position() Gyro Gyro class - create a new gyro sensor Arguments: port : The 3wire port to use for the gyro sensor Returns: An instance of the Gyro class Examples: gyro1 = Gyro(brain.three_wire_port.a) calibrate () Start calibration of the gyro Calibration should done when the gyro is not moving. Arguments: None Returns: None Examples: # start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC) changed ( callback , arg = ()) Register a function to be called when the value of the gyro heading changes Arguments: callback : A function that will be called when the value of the gyro heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"gyro changed\") gyro1.changed(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT heading ( units = RotationUnits . DEG ) read the current heading of the gyro heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the gyro\\ value = gyro1.heading() is_calibrating () check the calibration status of the gyro Calibration should done when the gyro is not moving. Arguments: None Returns: True when the gyro is calibrating Examples: # start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC) reset_heading () Reset the gyro heading to 0 Arguments: None Returns: None reset_rotation () Reset the gyro rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the gyro rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the gyro\\ value = gyro1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the gyro heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ gyro1.set_heading(180) set_rotation ( value , units = RotationUnits . DEG ) set the gyro rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ gyro1.set_rotation(180) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None value ( units = DEGREES ) The current value of the gyro This method is generally not used, see heading() and rotation() Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get gyro value in range 0 - 360 degrees\\ value = gyro1.value() Inertial Inertial class - a class for working with the inertial sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Inertial class Examples: imu1 = Inertial(Ports.PORT1) acceleration ( axis ) read the acceleration for one axis of the inertial sensor Arguments: axis : The axis to read Returns: A value for the acceleration of the axis in units of gravity. Examples: # get the acceleration for the Z axis of the inertial sensor\\ zaccel = imu1.acceleration(ZAXIS) calibrate () Start calibration of the inertial sensor Calibration should done when the inertial sensor is not moving. Arguments: None Returns: None Examples: # start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC) changed ( callback , arg = ()) Register a function to be called when the value of the inertial sensor heading changes Arguments: callback : A function that will be called when the value of the inertial sensor heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"heading changed\") imu1.changed(foo) collision ( callback , arg = ()) Register a function to be called when the inertial sensor detects a collision Arguments: callback : A function that will be called when the inertial sensor detects a collision arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"collision\") imu1.collision(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT gyro_rate ( axis , units = VelocityUnits . DPS ) read the gyro rate for one axis of the inertial sensor Arguments: axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS Returns: A value for the gyro rate of the axis in the units specified. Examples: # get the gyro rate for the Z axis of the inertial sensor\\ zrate = imu1.gyro_rate(ZAXIS) heading ( units = RotationUnits . DEG ) read the current heading of the inertial sensor heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the inertial sensor\\ value = imu1.heading() installed ( * args ) Check for device connection Arguments: None Returns: True or False is_calibrating () check the calibration status of the inertial sensor Calibration should done when the inertial sensor is not moving. Arguments: None Returns: True when the inertial sensor is calibrating Examples: # start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC) orientation ( axis , units = RotationUnits . DEG ) read the orientation for one axis of the inertial sensor Arguments: axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES Returns: A value for the axis orientation in the units specified. Examples: # get the pitch value for the inertial sensor\\ pitch = imu1.orientation(OrientationType.PITCH) reset_heading () Reset the inertial sensor heading to 0 Arguments: None Returns: None reset_rotation () Reset the inertial sensor rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the inertial sensor rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the inertial sensor\\ value = imu1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the inertial sensor heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ imu1.set_heading(180) set_rotation ( value , units = RotationUnits . DEG ) set the inertial sensor rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ imu1.set_rotation(180) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Led Led class - create a new led Arguments: port : The 3wire port to use for the led Returns: An instance of the Led class Examples: led1 = Led(brain.three_wire_port.a) off () Turn the led off Arguments: None Returns: None Examples: led1.off() on () Turn the led on Arguments: None Returns: None Examples: led1.on() value () The current value of the led Arguments: None Returns: 1 or 0 LedStateType The defined units for optical sensor led state. Light Light class - create a new light sensor Arguments: port : The 3wire port to use for the light sensor Returns: An instance of the Light class Examples: light1 = Light(brain.three_wire_port.a) brightness ( units = PercentUnits . PERCENT ) The current brightness of light falling on the light sensor The brightness of the light sensor is an estimation based on the raw value of the sensor.\\ A brightness of 0% is a raw value of approximated 900 or greater\\ A brightness of 100% is a raw value of 0 Arguments: units (optional) : The only valid value is PERCENT Returns: A value in the range 0 to 100% Examples: # get light sensor brightness in range of 0 -100%\\ value = light1.brightness() changed ( callback , arg = ()) Register a function to be called when the value of the light sensor changes Arguments: callback : A function that will be called when the value of the light sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"light sensor changed\") light1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the light sensor Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get light sensor in range 0 - 4095\\ value = light1.value() # get light sensor in range 0 - 1023\\ value = light1.value(AnalogUnits.TENBIT) Limit Limit class - create a new limit switch Arguments: port : The 3wire port the limit switch is connected to Returns: An instance of the Limit class Examples: limit1 = Limit(brain.three_wire_port.a) pressed ( callback , arg = ()) Register a function to be called when the limit switch is pressed Arguments: callback : A function that will be called when the limit switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch pressed\") limit1.pressed(foo) pressing () Returns whether the limit switch is currently being pressed Arguments: None Returns: True or False released ( callback , arg = ()) Register a function to be called when the limit switch is released Arguments: callback : A function that will be called when the limit switch is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch released\") limit1.released(foo) value () The current value of the limit switch Arguments: None Returns: 1 or 0 Line Line class - create a new line sensor Arguments: port : The 3wire port to use for the line sensor Returns: An instance of the Line class Examples: line1 = Line(brain.three_wire_port.a) changed ( callback , arg = ()) Register a function to be called when the value of the line sensor changes Arguments: callback : A function that will be called when the value of the line sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"line sensor changed\") line1.changed(foo) reflectivity ( units = PercentUnits . PERCENT ) The current reflectivity of the line sensor The reflectivity of the line sensor is an estimation based on the raw value of the sensor.\\ A reflectivity of 0% is a raw value of approximated 3000 or greater\\ A reflectivity of 100% is a raw value of 0 Arguments: units (optional) : The only valid value is PERCENT Returns: A value in the range 0 to 100% Examples: # get line sensor reflectivity in range of 0 -100%\\ value = line1.reflectivity() value ( units = AnalogUnits . TWELVEBIT ) The current value of the line sensor Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get line sensor in range 0 - 4095\\ value = line1.value() # get line sensor in range 0 - 1023\\ value = line1.value(AnalogUnits.TENBIT) MessageLink MessageLink class - a class for communicating using VEXlink Arguments: port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link Returns: An instance of the MessageLink class Examples: link = MessageLink(Ports.PORT1, 'james', VexlinkType.MANAGER) installed () Check for device connection Arguments: None Returns: True or False is_linked () Return link status Arguments: None Returns: True if the link is active and connected to the paired brain. receive ( timeout = 300000 ) Receive the next message Arguments: timeout (optional) : An optional timeout value in mS before the function returns. Returns: None or received message Examples: message = link.receive() received ( * args ) Register a function to be called when a message is received If the message is omitted then the callback will be called for all messages. Arguments: message (optional) : A message name for which the callback will be called callback : A function that will be called when a message is received Returns: None Examples: def cb(message, link, index, value): print(link, message, index, value) link.received('test', cb) send ( message , * args ) Send a message with optional parameters Arguments: message : A string, the message to send index (optional) : A int such as port number value (optional) : A float Returns: length of transmitted data or None on error Examples: # send the message 'test' with no parameters\\ link.send('test') # send the message 'test' with parameters\\ link.send('test', 1, 3.14) Motor Motor class - use this to create an instance of a V5 smart motor Arguments: port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False Returns: A new Motor object. Examples: motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True) command ( * args ) Returns the last velocity sent to the motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor command velocity in provided units current ( * args ) Returns the current the motor is using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The motor current in provided units direction () Returns the current direction the motor is spinning in Arguments: None Returns: The spin direction, FORWARD, REVERSE or UNDEFINED efficiency ( * args ) Returns the efficiency of the motor Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent get_timeout () Returns the current value of motor timeout Arguments: None Returns: The current timeout value installed () Check for device connection Arguments: None Returns: True or False is_done () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status is_spinning () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status position ( * args ) Returns the position of the motor Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The motor position in provided units power ( * args ) Returns the power the motor is providing Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The motor power in provided units reset_position () Reset the motor position to 0 Arguments: None Returns: None set_max_torque ( value , units ) Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. Arguments: value : the new maximum torque to use units : the units that value is passed in Returns: None Examples: # set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) set_position ( value , units = RotationUnits . DEG ) Set the current position of the motor The position returned by the position() function is set to this value. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None set_reversed ( value ) Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. Arguments: value : Reverse flag, True or False Returns: None set_stopping ( value ) Set the stopping mode of the motor Setting the action for the motor when stopped. Arguments: value : The stopping mode, COAST, BRAKE or HOLD Returns: None set_timeout ( value , units = TimeUnits . MSEC ) Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None spin ( direction , * args , ** kwargs ) Spin the motor using the provided arguments Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) spin_for ( direction , rot_or_time , * args , ** kwargs ) Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments. Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin 180 degrees from the current position\\ motor1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ motor1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) spin_to_position ( rotation , * args , ** kwargs ) Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\ This function supports keyword arguments. Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin to 180 degrees\\ motor1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ motor1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ motor1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, wait=False) stop ( mode = None ) Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None temperature ( * args ) Returns the temperature of the motor Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units timestamp () Request the timestamp of last received message from the motor Arguments: None Returns: timestamp of the last status packet in mS torque ( * args ) Returns the torque the motor is providing Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units velocity ( * args ) Returns the velocity of the motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor velocity in provided units Motor29 Motor29 class - create a new pwm motor output The Motor29 class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX MC29 motor controller\\ To minimize current draw, new values sent to the motor will have slew rate control applied Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. Returns: An instance of the Motor29 class Examples: motor1 = Motor29(brain.three_wire_port.a) set_reversed ( value ) Set the reversed flag for the motor Arguments: value : 1, 0, True or False Returns: None Examples: # set motor reversed flag True\\ motor1.set_reversed(True) set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None spin ( direction , velocity = None , units = None ) Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) stop () Stop the motor, set to 0 velocity Arguments: None Returns: None value () Read the current raw motor controller pwm value. This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get motor current pwm value\\ value = motor1.value() MotorGroup MotorGroup class - use this to create a group of motors Arguments: One or more Motor class instances Returns: A new MotorGroup object. Examples: motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ mg1 = MotorGroup(motor1, motor2) count () return the number of motors in the group Arguments: None Returns: The number of motors in the group current ( units = CurrentUnits . AMP ) Returns the total current all motors are using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The motor current in provided units direction () Returns the current direction the first motor is spinning in Arguments: None Returns: The spin direction, FORWARD, REVERSE or UNDEFINED efficiency ( units = PercentUnits . PERCENT ) Returns the efficiency of the first motor Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent is_done () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status is_spinning () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status position ( units = RotationUnits . DEG ) Returns the position of the first motor Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The motor position in provided units power ( units = PowerUnits . WATT ) Returns the power the first motor is providing Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The motor power in provided units reset_position () Reset the motor position to 0 for all motors in the group Arguments: None Returns: None set_max_torque ( value , units = TorqueUnits . NM ) Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. Arguments: value : the new maximum torque to use units : the units that value is passed in Returns: None Examples: # set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) set_position ( value , units = None ) Set the current position for all motors in the group The position returned by the position() function is set to this value. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None set_stopping ( mode = BrakeType . COAST ) Set the stopping mode for all motors in the group Setting the action for the motor when stopped. Arguments: mode : The stopping mode, COAST, BRAKE or HOLD Returns: None set_timeout ( timeout , units = TimeUnits . MSEC ) Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None set_velocity ( velocity , units = None ) Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None spin ( direction , velocity = None , units = VelocityUnits . RPM ) Spin all motors in the group using the provided arguments Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motors forward at velocity set with set_velocity\\ mg1.spin(FORWARD) # spin motors forward at 50 rpm\\ mg1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ mg1.spin(FORWARD, -20) # spin motors forwards with 100% velocity\\ mg1.spin(FORWARD, 100, PERCENT) # spin motors forwards at 50 rpm\\ mg1.spin(FORWARD, 50, RPM) # spin motors forwards at 360 dps\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) spin_for ( direction , rotation , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin 180 degrees from the current position\\ mg1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ mg1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) spin_to_position ( rotation , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\ This function supports keyword arguments. Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin to 180 degrees\\ mg1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ mg1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ mg1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, wait=False) stop ( mode = None ) Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None temperature ( units = TemperatureUnits . CELSIUS ) Returns the temperature of the first motor Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units torque ( units = TorqueUnits . NM ) Returns the torque the first motor is providing Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units velocity ( units = VelocityUnits . RPM ) Returns the velocity of the first motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor velocity in provided units MotorVictor MotorVictor class - create a new pwm motor output The MotorVictor class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX Victor motor controller\\ Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. Returns: An instance of the MotorVictor class Examples: motor1 = MotorVictor(brain.three_wire_port.a) set_reversed ( value ) Set the reversed flag for the motor Arguments: value : 1, 0, True or False Returns: None Examples: # set motor reversed flag True\\ motor1.set_reversed(True) set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None spin ( direction , velocity = None , units = None ) Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) stop () Stop the motor, set to 0 velocity Arguments: None Returns: None value () Read the current raw motor controller pwm value. This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get motor current pwm value\\ value = motor1.value() ObjectSizeType The defined units for distance sensor object size. Optical Optical class - a class for working with the optical sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Optical class Examples: opt1 = Optical(Ports.PORT1) brightness ( readraw = False ) read the brightness value from the optical sensor Arguments: readraw (optional) : return raw brightness value if True rather than percentage. Returns: brightness as a float in the range 0 - 100% Examples: brightness = opt1.brightness() color () read the color from the optical sensor Arguments: None Returns: color as an instance of the Color class Examples: c = opt1.color() gesture_disable () Disable gesture mode Arguments: None Returns: None Examples: opt1.gesture_disable() gesture_down ( callback , arg = ()) Register a function to be called when a gesture down event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture down event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"down detected\") opt1.gesture_down(foo) gesture_enable () Enable gesture mode Arguments: None Returns: None Examples: opt1.gesture_enable() gesture_left ( callback , arg = ()) Register a function to be called when a gesture left event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture left event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"left detected\") opt1.gesture_left(foo) gesture_right ( callback , arg = ()) Register a function to be called when a gesture right event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture right event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"right detected\") opt1.gesture_right(foo) gesture_up ( callback , arg = ()) Register a function to be called when a gesture up event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture up event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"up detected\") opt1.gesture_up(foo) get_gesture ( newobject = False ) get gesture data Arguments: newobject (optional) : create a new Gesture object to return data in Returns: An object with the last gesture data Examples: opt1.gesture_disable() hue () read the hue value from the optical sensor Arguments: None Returns: hue as a float in the range 0 - 359.99 degrees Examples: hue = opt1.hue() installed () Check for device connection Arguments: None Returns: True or False integration_time ( value =- 1 ) set optical sensor led to the requested power Arguments: value (optional) : integration time in mS (5 to 700) Returns: The current integration time Examples: opt1.set_light_power(50) is_near_object () check to see if the optical proximity sensor detects an object Arguments: None Returns: True if near an object Examples: if opt1.is_near_object(): print('near object') object_detect_threshold ( value ) set the threshold for object detection Arguments: value : Number in the range 0 to 255. A value of 0 will just return current value. Returns: current value Examples: opt1.object_detect_threshold(100) object_detected ( callback , arg = ()) Register a function to be called when an object detected event occurs Arguments: callback : A function that will be called when an object detected event occurs arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"object detected\") opt1.object_detected(foo) object_lost ( callback , arg = ()) Register a function to be called when an object lost event occurs Arguments: callback : A function that will be called when an object lost event occurs arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"object lost\") opt1.object_lost(foo) rgb ( raw = False ) get the optical sensor rgb value Arguments: raw (optional) : return raw or processed values Returns: A tuple with red, green, blue and brightness Examples: value=opt1.rgb() set_light ( * args ) set optical sensor led on or of Arguments: value : LedStateType.ON, LedStateType.OFF or power of led, 0 to 100% Returns: None Examples: # turn on led with previous intensity\\ opt1.set_light(LedStateType.ON) # turn on led with new intensity\\ opt1.set_light(65) set_light_power ( value ) set optical sensor led to the requested power Arguments: value : power of led, 0 to 100% Returns: None Examples: opt1.set_light_power(50) timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS OrientationType The defined units for inertial sensor orientation. PITCH = OrientationType ( 1 , 'PITCH' ) pitch, orientation around the Y axis of the Inertial sensor. ROLL = OrientationType ( 0 , 'ROLL' ) roll, orientation around the X axis of the Inertial sensor. YAW = OrientationType ( 2 , 'YAW' ) yaw, orientation around the Z axis of the Inertial sensor. PercentUnits The measurement units for percentage values. PERCENT = PercentUnits ( 0 , 'PERCENT' ) A percentage unit that represents a value from 0% to 100% Pneumatics Pneumatics class - create a new pneumatics driver class Arguments: port : The 3wire port to use for the pneumatics Returns: An instance of the Pneumatics class Examples: p1 = Pneumatics(brain.three_wire_port.a) close () Set the pneumatics driver to the close state Arguments: None Returns: None Examples: p1.close() open () Set the pneumatics driver to the open state Arguments: None Returns: None Examples: p1.open() value () The current state of the pneumatics driver Arguments: None Returns: 1 or 0 Ports Smartport definitions Potentiometer Potentiometer class - create a new potentiometer Arguments: port : The 3wire port to use for the potentiometer Returns: An instance of the Potentiometer class Examples: pot1 = Potentiometer(brain.three_wire_port.a) angle ( units = RotationUnits . DEG ) The current angle of the potentiometer Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT) changed ( callback , arg = ()) Register a function to be called when the value of the potentiometer changes Arguments: callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"pot changed\") pot1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the potentiometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT) PotentiometerV2 PotentiometerV2 class - create a new potentiometer Arguments: port : The 3wire port to use for the potentiometer Returns: An instance of the PotentiometerV2 class Examples: pot1 = PotentiometerV2(brain.three_wire_port.a) angle ( units = RotationUnits . DEG ) The current angle of the potentiometer Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT) changed ( callback , arg = ()) Register a function to be called when the value of the potentiometer changes Arguments: callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"pot changed\") pot1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the potentiometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT) PowerUnits The measurement units for power values. WATT = PowerUnits ( 0 , 'WATT' ) A power unit that is measured in watts. Pwm Pwm class - create a new pwm output The pwm class will create raw RC style pwm waveform.\\ A pwm output of 0% corresponds to pulse width of 1.5mS every 16mS\\ A pwm output of 100% corresponds to pulse width of 2mS\\ A pwm output of -100% corresponds to pulse width of 1mS Arguments: port : The 3wire port to use for the pwm output Returns: An instance of the Pwm class Examples: pwm1 = Pwm(brain.three_wire_port.a) state ( value , units = PercentUnits . PERCENT ) Set the current PWM value in percent. Arguments: value : The new value for pwm output, -100 to +100 percent. units (optional) : units must be specified in PERCENT Returns: None Examples: # set pwm1 output to 50%\\ pwm1.state(50) value () Read the current PWM value in percent. Arguments: None Returns: A value in the range -100 to +100 percent. Examples: # get pwm1 current value\\ value = pwm1.value() Rotation Rotation class - a class for working with the rotation sensor Arguments: port : The smartport this device is attached to reverse (optional) : set to reverse the angle and position returned by the sensor. Returns: An instance of the Rotation class Examples: rot1 = Rotation(Ports.PORT1)\\ rot2 = Rotation(Ports.PORT2, True) angle ( units = RotationUnits . DEG ) The current angle of the rotation sensor Arguments: units (optional) : A valid RotationUnits type, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get rotation sensor angle angle = rot1.angle() changed ( callback , arg = ()) Register a function to be called when the value of the rotation sensor changes Arguments: callback : A function that will be called when the value of the rotation sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"rotation changed\") rot1.changed(foo) installed () Check for device connection Arguments: None Returns: True or False position ( units = RotationUnits . DEG ) Returns the position of the rotation sensor The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated. Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The rotation sensor in provided units reset_position () Reset the rotation sensor position to 0 Arguments: None Returns: None set_position ( value , units = RotationUnits . DEG ) Set the current position of the rotation sensor The position returned by the position() function is set to this value. The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None set_reversed ( value ) Set the reversed flag for the sensor Usually this would be done in the constructor. Arguments: value : 1, 0, True or False Returns: None Examples: # set reversed flag True\\ rot1.set_reversed(True) timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS velocity ( units = VelocityUnits . RPM ) Returns the velocity of the rotation sensor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The rotation sensor velocity in provided units RotationUnits The measurement units for rotation values. DEG = RotationUnits ( 0 , 'DEG' ) A rotation unit that is measured in degrees. RAW = RotationUnits ( 99 , 'RAW' ) A rotation unit that is measured in raw data form. REV = RotationUnits ( 1 , 'REV' ) A rotation unit that is measured in revolutions. SerialLink SerialLink class - a class for communicating using VEXlink Arguments: port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link Returns: An instance of the SerialLink class Examples: link = SerialLink(Ports.PORT1, 'james', VexlinkType.MANAGER) installed () Check for device connection Arguments: None Returns: True or False is_linked () Return link status Arguments: None Returns: True if the link is active and connected to the paired brain. receive ( length , timeout = 300000 ) Receive data in the serial link Arguments: length : maximum amount of data to wait for timeout (optional) : An optional timeout value in mS before the function returns. Returns: None or bytearray with data Examples: # wait for 128 bytes of data for 1000mS\\ buffer = link.receive(128, 1000) received ( callback ) Register a function to be called when data is received This will receive a bytearray and a length indicating how much Arguments: callback : A function that will be called when data is received Returns: None Examples: def cb(buffer, length): print(buffer, length) link.received(cb) send ( buffer ) Send a buffer of length length Arguments: buffer : A string or bytearray, the message to send Returns: None Examples: # send the string 'test'\\ link.send('test') # send the bytearray 'test' with parameters\\ link.send('test', 1, 3.14) Servo Servo class - create a new servo output The Servo class will create raw RC style pwm waveform.\\ An output of 0 corresponds to pulse width of 1.5mS every 16mS\\ An output of 50 degrees corresponds to pulse width of 2mS\\ An output of -50 degrees corresponds to pulse width of 1mS Arguments: port : The 3wire port to use for the servo output Returns: An instance of the Servo class Examples: servo1 = Servo(brain.three_wire_port.a) set_position ( value , units = RotationUnits . DEG ) Set the servo position Arguments: value : The new value for the servo using the supplied units. units (optional) : The rotation units, default is PERCENT Returns: None Examples: # set servo output to 10 degrees\\ servo1.set_position(10, DEGREES) value () Read the current raw servo pwm value. This is the raw internal pwm value\\ A servo position of 0 will return 127\\ A maximum positive servo position will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get servo1 current value\\ value = servo1.value() Signature Signature class - a class for holding vision sensor signatures Arguments: index : The signature index p0 : signature value p0 p1 : signature value p1 p2 : signature value p2 p3 : signature value p3 p4 : signature value p4 p5 : signature value p5 sigrange : signature range sigtype : signature type Returns: An instance of the Signature class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1) id () Not used, always returns 0 SmartDrive Bases: DriveTrain SmartDrive class - use this to create a smart drivetrain A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\ The smartdrive inherits all drivetrain functions. Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. Returns: A new SmartDrive object. Examples: # A simple two motor smart drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ imu1 = Inertial(Ports.PORT9)\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ imu1 = Inertial(Ports.PORT9)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES) heading ( units = RotationUnits . DEG ) read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the smartdrive\\ value = smart1.heading() is_moving () Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for status is_turning () Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current turn_to_heading, turn_to_rotation or turn_for status rotation ( units = RotationUnits . DEG ) read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the smartdrive\\ value = smart1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ smart1.set_heading(180) set_rotation ( value , units = RotationUnits . DEG ) set the smartdrive rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ smart1.set_rotation(180) set_turn_constant ( value ) Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\ This constant, generally known as kp, is the gain used in the equation that\\ turns angular error into motor velocity. Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 Returns: None set_turn_direction_reverse ( value ) Set the expected turn direction for positive heading change Arguments: value : True or False Returns: None set_turn_threshold ( value ) Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\ If this is too large then turns will not be accurate, if too small then turns ma\\ not complete. Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree Returns: None turn_for ( direction , angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\ however, the smartdrive is commanded to turn a specified angle. Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # turn right 90 degrees\\ smart1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) turn_to_heading ( angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of heading() when turning the smartdrive\\ This function supports keyword arguments. Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # turn to heading 180 degrees\\ smart1.turn_to_heading(180) # turn to heading 180 degrees at 25 rpm\\ smart1.turn_to_heading(180, DEGREES, 25, RPM) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, False) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, wait=False) turn_to_rotation ( angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of rotation() when turning the smartdrive\\ This function supports keyword arguments. Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # turn to rotation 180 degrees\\ smart1.turn_to_rotation(180) # turn to rotation 400 degrees at 25 rpm\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, False) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, wait=False) Sonar Sonar class - create a new sonar (ultrasonic) sensor A sonar uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h\\ connect the wire labeled \"output\" to the lower 3wire port, eg. a Arguments: port : The 3wire port to use for the sonar sensor Returns: An instance of the Sonar class Examples: sonar1 = Sonar(brain.three_wire_port.a) distance ( units ) The current distance the sonar is detecting an object at. The sonar will return a large positive number if no object is detected in range. Arguments: units : The distance units to return the position value in. Returns: A value for sonar distance in the specified units. Examples: # get sonar distance in mm\\ value = sonar1.distance(MM) found_object () Check for an object in the range 0 - 1000mm The sonar will return True if an object is detected closer than 1000mm. Arguments: None Returns: True of an object is detected. Examples: # is an object closer than 1000mm\\ if sonar1.found_object():\\ print(\"object found\") value ( units = AnalogUnits . TWELVEBIT ) The current value of the sonar This method has no practical use, see distance. Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get sonar raw value\\ value = sonar1.value() TemperatureUnits The measurement units for temperature values. CELSIUS = TemperatureUnits ( 0 , 'CELSIUS' ) A temperature unit that is measured in celsius. FAHRENHEIT = TemperatureUnits ( 0 , 'FAHRENHEIT' ) A temperature unit that is measured in fahrenheit. Thread Thread class - create a new thread of execution This class is used to create a new thread using the vexos scheduler. Arguments: callback : A function used as the entry point for the thread arg (optional) : A tuple that is used to pass arguments to the thread entry function. Returns: An instance of the Thread class Examples: def foo(): print('the callback was called') t1 = Thread( foo ) def bar(p1, p2): print('the callback was called with ', p1, ' and ', p2) t2 = Thread( bar, (1,2) ) sleep_for ( duration , units = TimeUnits . MSEC ) sleep a thread Arguments: duration : time to sleep this thread for units (optional) : units of time, default is MSEC Returns: None stop () Stop a thread Arguments: None Returns: None ThreeWireType The defined units for 3-wire devices. ACCELEROMETER = ThreeWireType ( 9 , 'ACCELEROMETER' ) A 3-wire sensor that is defined as a accelerometer. ANALOG_IN = ThreeWireType ( 0 , 'ANALOG_IN' ) A 3-wire sensor that is defined as an analog input. ANALOG_OUT = ThreeWireType ( 1 , 'ANALOG_OUT' ) A 3-wire sensor that is defined as an analog output. DIGITAL_IN = ThreeWireType ( 2 , 'DIGITAL_IN' ) A 3-wire sensor that is defined as an digital input. DIGITAL_OUT = ThreeWireType ( 3 , 'DIGITAL_OUT' ) A 3-wire sensor that is defined as an digital output. ENCODER = ThreeWireType ( 12 , 'ENCODER' ) A 3-wire sensor that is defined as a quadrature encoder. GYRO = ThreeWireType ( 8 , 'GYRO' ) A 3-wire sensor that is defined as a yaw rate gyro. LIGHT_SENSOR = ThreeWireType ( 7 , 'LIGHT_SENSOR' ) A 3-wire sensor that is defined as a light sensor. LINE_SENSOR = ThreeWireType ( 6 , 'LINE_SENSOR' ) A 3-wire sensor that is defined as a line sensor. MOTOR = ThreeWireType ( 10 , 'MOTOR' ) A 3-wire sensor that is defined as a legacy vex motor. POTENTIOMETER = ThreeWireType ( 5 , 'POT' ) A 3-wire sensor that is defined as a potentiometer. SERVO = ThreeWireType ( 11 , 'SERVO' ) A 3-wire sensor that is defined as a legacy vex servo. SLEW_MOTOR = ThreeWireType ( 14 , 'SLEW_MOTOR' ) A 3-wire sensor that is defined as a legacy vex motor using slew rate control. SONAR = ThreeWireType ( 13 , 'SONAR' ) A 3-wire sensor that is defined as an ultrasonic sensor (sonar) SWITCH = ThreeWireType ( 4 , 'BUTTON' ) A 3-wire sensor that is defined as a switch. TimeUnits The measurement units for time values. MSEC = TimeUnits ( 1 , 'MSEC' ) A time unit that is measured in milliseconds. SEC = TimeUnits ( 0 , 'SECONDS' ) A time unit that is measured in seconds. SECONDS = TimeUnits ( 0 , 'SECONDS' ) A time unit that is measured in seconds. Timer Timer class - create a new timer This class is used to create a new timer\\ A timer can be used to measure time, access the system time and run a function at a time in the future. Arguments: None Returns: An instance of the Timer class Examples: t1 = Timer() clear () reset the timer to 0 Arguments: None Returns: None Examples: event ( callback , delay , arg = ()) register a function to be called in the future Arguments: callback : A function that will called after the supplied delay delay : The delay before the callback function is called. arg (optional) : A tuple that is used to pass arguments to the function. Returns: None Examples: def foo(arg): print('timer has expired ', arg) t1 = Timer()\\ t1.event(foo, 1000, ('Hello',)) reset () reset the timer to 0 Arguments: None Returns: None Examples: system () return the system time in mS Arguments: None Returns: system time in mS Examples: system_high_res () return the high resolution system time in uS Arguments: None Returns: system time in uS Examples: time ( units = TimeUnits . MSEC ) return the current time for this timer Arguments: units (optional) : the units that the time should be returned in, default is MSEC Returns: An the current time in specified units. Examples: value () return the current time for this timer in seconds Arguments: None Returns: An the current time in seconds. Examples: TorqueUnits The measurement units for torque values. INLB = TorqueUnits ( 1 , 'INLB' ) A torque unit that is measured in Inch Pounds. NM = TorqueUnits ( 0 , 'NM' ) A torque unit that is measured in Newton Meters. Triport installed () Check for device connection Arguments: None Returns: True or False timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS TurnType Bases: vexEnum The defined units for turn values. LEFT = TurnType ( 0 , 'LEFT' ) A turn unit that is defined as left turning. RIGHT = TurnType ( 1 , 'RIGHT' ) A turn unit that is defined as right turning. UNDEFINED = TurnType ( 2 , 'UNDEFINED' ) A turn unit unit used when direction is not known. VelocityUnits The measurement units for velocity values. DPS = VelocityUnits ( 2 , 'DPS' ) A velocity unit that is measured in degrees per second. PERCENT = VelocityUnits ( 0 , 'PCT' ) A velocity unit that is measured in percentage. RPM = VelocityUnits ( 1 , 'RPM' ) A velocity unit that is measured in rotations per minute. VexlinkType The defined units for vexlink types. GENERIC = VexlinkType ( 3 , 'GENERIC' ) A vexlink type that is defined as a raw unmanaged link. MANAGER = VexlinkType ( 1 , 'MANAGER' ) A vexlink type that is defined as the manager radio. WORKER = VexlinkType ( 2 , 'WORKER' ) A vexlink type that is defined as the worker radio. Vision Vision class - a class for working with the vision sensor Arguments: port : The smartport this device is attached to brightness (optional) : set the brightness value for the vision sensor sigs (optional) : one or more signature objects Returns: An instance of the Vision class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1) installed () Check for device connection Arguments: None Returns: True or False take_snapshot ( index , count = 1 ) Request the vision sensor to filter latest objects to match signature or code Arguments: index : A signature, code or signature id. count (optional) : the maximum number of objects to obtain. default is 1. Returns: tuple of VisionObject or None if nothing is available Examples: # look for and return 1 object matching SIG_1\\ objects = vision1.take_snapshot(SIG_1) # look for and return a maximum of 4 objects matching SIG_1\\ objects = vision1.take_snapshot(SIG_1, 4) timestamp () Request the timestamp of last received message from the vision sensor Arguments: None Returns: timestamp of the last status packet in mS VisionObject A vision object, not instantiated by user programs VoltageUnits The measurement units for voltage values. MV = VoltageUnits ( 0 , 'mV' ) A voltage unit that is measured in millivolts. VOLT = VoltageUnits ( 0 , 'VOLT' ) A voltage unit that is measured in volts. vexEnum Base class for all enumerated types clear_errors () clear any brain on screen errors Arguments: None Returns: None info () return a string with VEX Python version information on_screen_errors ( value ) enable or disable the display of brain on screen errors Arguments: value : True or False Returns: None sleep ( duration , units = TimeUnits . MSEC ) delay the current thread for the provided number of seconds or milliseconds. Arguments: duration: The number of seconds or milliseconds to sleep for units: The units of duration, optional, default is milliseconds Returns: None wait ( duration , units = TimeUnits . MSEC ) delay the current thread for the provided number of seconds or milliseconds. Arguments: duration: The number of seconds or milliseconds to sleep for units: The units of duration, optional, default is milliseconds Returns: None","title":"Complete API Reference"},{"location":"SDK/full/#complete-api-reference","text":"This page contains the full API reference for the VEX Python SDK as provided by DishPy. All classes, functions, enums, and types are documented here.","title":"Complete API Reference"},{"location":"SDK/full/#vex","text":"","title":"vex"},{"location":"SDK/full/#vex.BRAKE","text":"A brake unit that is defined as motor brake.","title":"BRAKE"},{"location":"SDK/full/#vex.COAST","text":"A brake unit that is defined as motor coast.","title":"COAST"},{"location":"SDK/full/#vex.DEGREES","text":"A rotation unit that is measured in degrees.","title":"DEGREES"},{"location":"SDK/full/#vex.DPS","text":"A velocity unit that is measured in degrees per second.","title":"DPS"},{"location":"SDK/full/#vex.FORWARD","text":"A direction unit that is defined as forward.","title":"FORWARD"},{"location":"SDK/full/#vex.HOLD","text":"A brake unit that is defined as motor hold.","title":"HOLD"},{"location":"SDK/full/#vex.INCHES","text":"A distance unit that is measured in inches.","title":"INCHES"},{"location":"SDK/full/#vex.LEFT","text":"A turn unit that is defined as left turning.","title":"LEFT"},{"location":"SDK/full/#vex.MM","text":"A distance unit that is measured in millimeters.","title":"MM"},{"location":"SDK/full/#vex.MSEC","text":"A time unit that is measured in milliseconds.","title":"MSEC"},{"location":"SDK/full/#vex.MV","text":"A voltage unit that is measured in millivolts.","title":"MV"},{"location":"SDK/full/#vex.PARTNER","text":"A controller defined as a partner controller.","title":"PARTNER"},{"location":"SDK/full/#vex.PERCENT","text":"A percentage unit that represents a value from 0% to 100%","title":"PERCENT"},{"location":"SDK/full/#vex.PITCH","text":"pitch, orientation around the Y axis of the Inertial sensor.","title":"PITCH"},{"location":"SDK/full/#vex.PRIMARY","text":"A controller defined as a primary controller.","title":"PRIMARY"},{"location":"SDK/full/#vex.REVERSE","text":"A direction unit that is defined as backward.","title":"REVERSE"},{"location":"SDK/full/#vex.RIGHT","text":"A turn unit that is defined as right turning.","title":"RIGHT"},{"location":"SDK/full/#vex.ROLL","text":"roll, orientation around the X axis of the Inertial sensor.","title":"ROLL"},{"location":"SDK/full/#vex.RPM","text":"A velocity unit that is measured in rotations per minute.","title":"RPM"},{"location":"SDK/full/#vex.SECONDS","text":"A time unit that is measured in seconds.","title":"SECONDS"},{"location":"SDK/full/#vex.TURNS","text":"A rotation unit that is measured in revolutions.","title":"TURNS"},{"location":"SDK/full/#vex.VOLT","text":"A voltage unit that is measured in volts.","title":"VOLT"},{"location":"SDK/full/#vex.XAXIS","text":"The X axis of the Inertial sensor.","title":"XAXIS"},{"location":"SDK/full/#vex.YAW","text":"yaw, orientation around the Z axis of the Inertial sensor.","title":"YAW"},{"location":"SDK/full/#vex.YAXIS","text":"The Y axis of the Inertial sensor.","title":"YAXIS"},{"location":"SDK/full/#vex.ZAXIS","text":"The Z axis of the Inertial sensor.","title":"ZAXIS"},{"location":"SDK/full/#vex.Accelerometer","text":"","title":"Accelerometer"},{"location":"SDK/full/#vex.Accelerometer--accelerometer-class-create-a-new-accelerometer","text":"For full functionality, three Accelerometer instances would need to be created, one for each axis.","title":"Accelerometer class - create a new accelerometer"},{"location":"SDK/full/#vex.Accelerometer--arguments","text":"port : The 3wire port to use for the accelerometer sensitivity (optional) : set high sensitivity mode (+/- 2G), use True or 1","title":"Arguments:"},{"location":"SDK/full/#vex.Accelerometer--returns","text":"An instance of the Accelerometer class","title":"Returns:"},{"location":"SDK/full/#vex.Accelerometer--examples","text":"accx = Accelerometer(brain.three_wire_port.a)\\ accy = Accelerometer(brain.three_wire_port.b)\\ accz = Accelerometer(brain.three_wire_port.c)","title":"Examples:"},{"location":"SDK/full/#vex.Accelerometer.acceleration","text":"","title":"acceleration"},{"location":"SDK/full/#vex.Accelerometer.acceleration--the-current-value-of-the-accelerometer-scaled-to-units-of-gravity","text":"","title":"The current value of the accelerometer scaled to units of gravity"},{"location":"SDK/full/#vex.Accelerometer.acceleration--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Accelerometer.acceleration--returns","text":"A value in the range +/- 6 or +/-2G if high sensitivity mode is set","title":"Returns:"},{"location":"SDK/full/#vex.Accelerometer.acceleration--examples","text":"# get accelerometer in range+/- 6G value = accz.acceleration()","title":"Examples:"},{"location":"SDK/full/#vex.Accelerometer.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Accelerometer.changed--register-a-function-to-be-called-when-the-value-of-the-accelerometer-changes","text":"","title":"Register a function to be called when the value of the accelerometer changes"},{"location":"SDK/full/#vex.Accelerometer.changed--arguments","text":"callback : A function that will be called when the value of the accelerometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Accelerometer.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Accelerometer.changed--examples","text":"def foo(): print(\"accelerometer changed\") accz.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Accelerometer.value","text":"","title":"value"},{"location":"SDK/full/#vex.Accelerometer.value--the-current-value-of-the-accelerometer","text":"","title":"The current value of the accelerometer"},{"location":"SDK/full/#vex.Accelerometer.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.Accelerometer.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Accelerometer.value--examples","text":"# get accelerometer in range 0 - 4095\\ value = accz.value() # get accelerometer in range 0 - 1023\\ value = accz.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.AddressableLed","text":"","title":"AddressableLed"},{"location":"SDK/full/#vex.AddressableLed--addressable-led-class","text":"","title":"Addressable led class"},{"location":"SDK/full/#vex.AddressableLed--arguments","text":"port : The 3wire port to use for the addressable led strip","title":"Arguments:"},{"location":"SDK/full/#vex.AddressableLed--returns","text":"An instance of the AddressableLed class","title":"Returns:"},{"location":"SDK/full/#vex.AddressableLed--examples","text":"addr1 = AddressableLed(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.AddressableLed.clear","text":"","title":"clear"},{"location":"SDK/full/#vex.AddressableLed.clear--clear-all-addressable-led-to-off","text":"","title":"clear all addressable led to off"},{"location":"SDK/full/#vex.AddressableLed.clear--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.AddressableLed.clear--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.AddressableLed.clear--examples","text":"addr1.clear()","title":"Examples:"},{"location":"SDK/full/#vex.AddressableLed.set","text":"","title":"set"},{"location":"SDK/full/#vex.AddressableLed.set--set-the-addressable-led-strip-to-provided-values","text":"","title":"Set the addressable led strip to provided values"},{"location":"SDK/full/#vex.AddressableLed.set--arguments","text":"data : An list of Color values offset (optional) : index of led to start at, 0 based","title":"Arguments:"},{"location":"SDK/full/#vex.AddressableLed.set--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.AddressableLed.set--examples","text":"addr1 = AddressableLed(brain.three_wire_port.a)\\ pix = [Color(0x800000),Color(0x008000),Color(0x000080)]\\ addr1.set(pix)","title":"Examples:"},{"location":"SDK/full/#vex.AnalogIn","text":"","title":"AnalogIn"},{"location":"SDK/full/#vex.AnalogIn--analogin-class-create-a-new-analog-input","text":"","title":"AnalogIn class - create a new analog input"},{"location":"SDK/full/#vex.AnalogIn--arguments","text":"port : The 3wire port to use for the analog input","title":"Arguments:"},{"location":"SDK/full/#vex.AnalogIn--returns","text":"An instance of the AnalogIn class","title":"Returns:"},{"location":"SDK/full/#vex.AnalogIn--examples","text":"ana1 = AnalogIn(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.AnalogIn.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.AnalogIn.changed--register-a-function-to-be-called-when-the-value-of-the-analog-input-changes","text":"","title":"Register a function to be called when the value of the analog input changes"},{"location":"SDK/full/#vex.AnalogIn.changed--arguments","text":"callback : A function that will be called when the value of the analog input changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.AnalogIn.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.AnalogIn.changed--examples","text":"def foo(): print(\"analog input changed\") ana1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.AnalogIn.value","text":"","title":"value"},{"location":"SDK/full/#vex.AnalogIn.value--the-current-value-of-the-analog-input","text":"","title":"The current value of the analog input"},{"location":"SDK/full/#vex.AnalogIn.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.AnalogIn.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.AnalogIn.value--examples","text":"# get analog input in range 0 - 4095\\ value = ana1.value() # get analog input in range 0 - 1023\\ value = ana1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.AnalogUnits","text":"The measurement units for analog values.","title":"AnalogUnits"},{"location":"SDK/full/#vex.AnalogUnits.EIGHTBIT","text":"An analog unit that is measured in an 8-bit analog value (a value with 256 possible states).","title":"EIGHTBIT"},{"location":"SDK/full/#vex.AnalogUnits.MV","text":"An analog unit that is measured in millivolts.","title":"MV"},{"location":"SDK/full/#vex.AnalogUnits.PCT","text":"An analog unit that is measured in percentage.","title":"PCT"},{"location":"SDK/full/#vex.AnalogUnits.TENBIT","text":"An analog unit that is measured in an 10-bit analog value (a value with 1024 possible states).","title":"TENBIT"},{"location":"SDK/full/#vex.AnalogUnits.TWELVEBIT","text":"An analog unit that is measured in an 12-bit analog value (a value with 4096 possible states).","title":"TWELVEBIT"},{"location":"SDK/full/#vex.AxisType","text":"The defined units for inertial sensor axis.","title":"AxisType"},{"location":"SDK/full/#vex.AxisType.XAXIS","text":"The X axis of the Inertial sensor.","title":"XAXIS"},{"location":"SDK/full/#vex.AxisType.YAXIS","text":"The Y axis of the Inertial sensor.","title":"YAXIS"},{"location":"SDK/full/#vex.AxisType.ZAXIS","text":"The Z axis of the Inertial sensor.","title":"ZAXIS"},{"location":"SDK/full/#vex.Brain","text":"","title":"Brain"},{"location":"SDK/full/#vex.Brain--brain-class","text":"The Brain class creates a number of instances of internal classes that allow access\\ to the screen, battery, 3wire ports and sd card on the V5 brain.","title":"Brain class"},{"location":"SDK/full/#vex.Brain--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain--returns","text":"An instance of the Brain class","title":"Returns:"},{"location":"SDK/full/#vex.Brain--examples","text":"brain = Brain()","title":"Examples:"},{"location":"SDK/full/#vex.Brain.battery","text":"An instance of the Battery class","title":"battery"},{"location":"SDK/full/#vex.Brain.screen","text":"An instance of the Lcd class","title":"screen"},{"location":"SDK/full/#vex.Brain.sdcard","text":"An instance of the Sdcard class","title":"sdcard"},{"location":"SDK/full/#vex.Brain.three_wire_port","text":"An instance of the Triport (3wire) class","title":"three_wire_port"},{"location":"SDK/full/#vex.Brain.timer","text":"An instance of the Timer class","title":"timer"},{"location":"SDK/full/#vex.Brain.Battery","text":"","title":"Battery"},{"location":"SDK/full/#vex.Brain.Battery--battery-class-access-the-brain-battery","text":"","title":"Battery class - access the brain battery"},{"location":"SDK/full/#vex.Brain.Battery--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Battery--returns","text":"Instance of Battery class","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Battery--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Battery.capacity","text":"","title":"capacity"},{"location":"SDK/full/#vex.Brain.Battery.capacity--read-remaining-capacity-of-the-battery","text":"","title":"read remaining capacity of the battery"},{"location":"SDK/full/#vex.Brain.Battery.capacity--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Battery.capacity--returns","text":"capacity as percentage","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Battery.capacity--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Battery.current","text":"","title":"current"},{"location":"SDK/full/#vex.Brain.Battery.current--read-the-current-of-the-battery","text":"","title":"read the current of the battery"},{"location":"SDK/full/#vex.Brain.Battery.current--arguments","text":"units (optional) : AMP, default is mA but jot available as an enum.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Battery.current--returns","text":"current in supplied units","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Battery.current--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Battery.temperature","text":"","title":"temperature"},{"location":"SDK/full/#vex.Brain.Battery.temperature--read-the-temperature-of-the-battery","text":"","title":"read the temperature of the battery"},{"location":"SDK/full/#vex.Brain.Battery.temperature--arguments","text":"units (optional) : PERCENT, CELSIUS or FAHRENHEIT, default is CELSIUS","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Battery.temperature--returns","text":"temperature in supplied units","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Battery.temperature--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Battery.voltage","text":"","title":"voltage"},{"location":"SDK/full/#vex.Brain.Battery.voltage--read-the-voltage-of-the-battery","text":"","title":"read the voltage of the battery"},{"location":"SDK/full/#vex.Brain.Battery.voltage--arguments","text":"units (optional) : VOLTS or MV, default is MV","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Battery.voltage--returns","text":"voltage in supplied units","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Battery.voltage--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd","text":"","title":"Lcd"},{"location":"SDK/full/#vex.Brain.Lcd--brainlcd-class","text":"A class used to access to screen on the V5 for drawing and receiving touch events.","title":"Brain.Lcd class"},{"location":"SDK/full/#vex.Brain.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd--returns","text":"An instance of the Brain.Lcd class","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/full/#vex.Brain.Lcd.clear_row--clear-screen-row-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear screen row to a single color"},{"location":"SDK/full/#vex.Brain.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, default is current cursor row color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_row--examples","text":"# clear row to black\\ brain.screen.clear_row() # clear row 2 to red\\ brain.screen.clear_row(2, Color.RED)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/full/#vex.Brain.Lcd.clear_screen--clear-the-whole-screen-to-a-single-color","text":"The color can be passed in similar ways to the Color class.\\","title":"Clear the whole screen to a single color"},{"location":"SDK/full/#vex.Brain.Lcd.clear_screen--arguments","text":"color (optional) : The color the screen will be set to, default is BLACK","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.clear_screen--examples","text":"# clear screen to black\\ brain.screen.clear_screen() # clear screen to blue using predefined color\\ brain.screen.clear_screen(Color.BLUE)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.column","text":"Return the current column where text will be printed","title":"column"},{"location":"SDK/full/#vex.Brain.Lcd.draw_circle","text":"","title":"draw_circle"},{"location":"SDK/full/#vex.Brain.Lcd.draw_circle--draw-a-circle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a circle on the screen using the current pen and fill colors."},{"location":"SDK/full/#vex.Brain.Lcd.draw_circle--arguments","text":"x : The x position of the circle center referenced to the screen origin. y : The y position of the circle center referenced to the screen origin. radius : The height of the circle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_circle--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_circle--examples","text":"# draw a green circle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_circle(50, 50, 10) # draw a green circle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_circle(100, 50, 10, Color.RED)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_image_from_file","text":"","title":"draw_image_from_file"},{"location":"SDK/full/#vex.Brain.Lcd.draw_image_from_file--display-the-named-image-from-the-sd-card","text":"","title":"Display the named image from the SD Card"},{"location":"SDK/full/#vex.Brain.Lcd.draw_image_from_file--arguments","text":"filename : The file name of the image. x : The X coordinate for the top left corner of the image on the screen y : The Y coordinate for the top left corner of the image on the screen","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_image_from_file--returns","text":"True if successfully drawn, False on error","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_image_from_file--examples","text":"# draw the vex.bmp image on the screen at coordinate 0, 0\\ # an image named vex.bmp must be on the SD Card in the root folder\\ brain.screen.draw_image_from_file('vex.bmp', 0, 0)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_line","text":"","title":"draw_line"},{"location":"SDK/full/#vex.Brain.Lcd.draw_line--draw-a-line-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a line on the screen using the current pen color."},{"location":"SDK/full/#vex.Brain.Lcd.draw_line--arguments","text":"x1 : The x position of the beginning of the line referenced to the screen origin. y1 : The y position of the beginning of the line referenced to the screen origin. x2 : The x position of the end of the line referenced to the screen origin. y2 : The y position of the end of the line referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_line--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_line--examples","text":"# draw a red line on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_line(10, 10, 20, 20)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_pixel","text":"","title":"draw_pixel"},{"location":"SDK/full/#vex.Brain.Lcd.draw_pixel--draw-a-pixel-on-the-screen-using-the-current-pen-color","text":"","title":"Draw a pixel on the screen using the current pen color."},{"location":"SDK/full/#vex.Brain.Lcd.draw_pixel--arguments","text":"x : The x position to draw the pixel referenced to the screen origin. y : The y position to draw the pixel referenced to the screen origin.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_pixel--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_pixel--examples","text":"# draw a red pixel on the screen\\ brain.screen.set_pen_color(Color.RED)\\ brain.screen.draw_pixel(10, 10)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_rectangle","text":"","title":"draw_rectangle"},{"location":"SDK/full/#vex.Brain.Lcd.draw_rectangle--draw-a-rectangle-on-the-screen-using-the-current-pen-and-fill-colors","text":"","title":"Draw a rectangle on the screen using the current pen and fill colors."},{"location":"SDK/full/#vex.Brain.Lcd.draw_rectangle--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle. color (optional) : An optional fill color, the current fill color will be used if not supplied","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_rectangle--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.draw_rectangle--examples","text":"# draw a green rectangle on the screen that is filled using blue\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.set_fill_color(Color.BLUE)\\ brain.screen.draw_rectangle(10, 10, 20, 20) # draw a green rectangle on the screen that is filled using red\\ brain.screen.set_pen_color(Color.GREEN)\\ brain.screen.draw_rectangle(50, 50, 20, 20, Color.RED)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_height","text":"","title":"get_string_height"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_height--get-height-of-a-string","text":"","title":"get height of a string"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_height--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_height--returns","text":"height of string as integer.","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_width","text":"","title":"get_string_width"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_width--get-width-of-a-string","text":"","title":"get width of a string"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_width--arguments","text":"arguments are in the same format as can be passed to the print function.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.get_string_width--returns","text":"width of string as integer.","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/full/#vex.Brain.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/full/#vex.Brain.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.next_row--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.pressed","text":"","title":"pressed"},{"location":"SDK/full/#vex.Brain.Lcd.pressed--register-a-function-to-be-called-when-the-screen-is-pressed","text":"","title":"Register a function to be called when the screen is pressed"},{"location":"SDK/full/#vex.Brain.Lcd.pressed--arguments","text":"callback : A function that will be called when the screen is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.pressed--examples","text":"def foo(): print(\"screen pressed\") brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.pressing","text":"","title":"pressing"},{"location":"SDK/full/#vex.Brain.Lcd.pressing--returns-whether-the-screen-is-currently-being-pressed-touched","text":"","title":"Returns whether the screen is currently being pressed (touched)"},{"location":"SDK/full/#vex.Brain.Lcd.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.print","text":"","title":"print"},{"location":"SDK/full/#vex.Brain.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/full/#vex.Brain.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ brain.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ brain.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ brain.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity()))","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.print_at","text":"","title":"print_at"},{"location":"SDK/full/#vex.Brain.Lcd.print_at--print-text-on-the-screen-at-x-and-coordinates","text":"","title":"print text on the screen at x and coordinates."},{"location":"SDK/full/#vex.Brain.Lcd.print_at--arguments","text":"Required keyword arguments x : The x position of the text referenced to the screen origin. y : The y position of the text referenced to the screen origin. Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2 opaque : text does not clear background pixels if set to False. default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.print_at--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.print_at--examples","text":"# print the number 1 on the screen at position x=100, y=40\\ brain.screen.print_at(1, x=100, y=40) # print the numbers 1, 2, 3 and 4 on the screen at position x=100, y=40\\ brain.screen.print_at(1, 2, 3, 4, x=100, y=40) # print motor1 velocity on the screen using a format string at position x=100, y=40\\ brain.screen.print_at(\"motor 1 : % 7.2f\" %(motor1.velocity()), x=100, y=40)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.released","text":"","title":"released"},{"location":"SDK/full/#vex.Brain.Lcd.released--register-a-function-to-be-called-when-the-screen-is-released-touch-removed","text":"","title":"Register a function to be called when the screen is released (touch removed)"},{"location":"SDK/full/#vex.Brain.Lcd.released--arguments","text":"callback : A function that will be called when the screen is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.released--examples","text":"def foo(): print(\"screen released\") brain.screen.released(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.render","text":"","title":"render"},{"location":"SDK/full/#vex.Brain.Lcd.render--switch-drawing-to-double-buffered-and-render-too-screen","text":"Once called, further drawing will not appear on the screen until the next time\\ render is called. This function will block until the screen can be updated.","title":"Switch drawing to double buffered and render too screen."},{"location":"SDK/full/#vex.Brain.Lcd.render--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.render--returns","text":"True if buffer was successfully rendered to screen.","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.render--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.row","text":"Return the current row where text will be printed","title":"row"},{"location":"SDK/full/#vex.Brain.Lcd.set_clip_region","text":"","title":"set_clip_region"},{"location":"SDK/full/#vex.Brain.Lcd.set_clip_region--sets-the-clip-region-for-drawing-to-the-supplied-rectangle","text":"All drawing is clipped to the given rectangle.\\ This is set on a per thread basis.","title":"Sets the clip region for drawing to the supplied rectangle."},{"location":"SDK/full/#vex.Brain.Lcd.set_clip_region--arguments","text":"x : The x position of the rectangle top/left corner referenced to the screen origin. y : The y position of the rectangle top/left corner referenced to the screen origin. width : The width of the rectangle. height : The height of the rectangle.","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_clip_region--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_clip_region--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/full/#vex.Brain.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"row and column spacing will take into account the selected font.\\ The base cell size if 10x20 pixels for the MONO20 font.\\ text may not accurately print if using a proportional font.\\ The top, left corner of the screen is position 1,1","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/full/#vex.Brain.Lcd.set_cursor--arguments","text":"row : The cursor row col : The cursor column","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_cursor--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_fill_color","text":"","title":"set_fill_color"},{"location":"SDK/full/#vex.Brain.Lcd.set_fill_color--set-the-fill-color-used-for-drawing-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the fill color used for drawing rectangles and circles"},{"location":"SDK/full/#vex.Brain.Lcd.set_fill_color--arguments","text":"color : The fill color","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_fill_color--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_fill_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_fill_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_fill_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_fill_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.set_font","text":"","title":"set_font"},{"location":"SDK/full/#vex.Brain.Lcd.set_font--set-the-font-type-used-for-printing-text-on-the-screen","text":"","title":"Set the font type used for printing text on the screen"},{"location":"SDK/full/#vex.Brain.Lcd.set_font--arguments","text":"fontname : The font name","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_font--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_font--examples","text":"brain.screen.font_type(FontType.MONO40)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.set_origin","text":"","title":"set_origin"},{"location":"SDK/full/#vex.Brain.Lcd.set_origin--set-the-origin-used-for-drawing-graphics-on-the-screen","text":"drawing functions consider the top left corner of the screen as the origin.\\ This function can move the origin to an alternate position such as the center of the screen.","title":"Set the origin used for drawing graphics on the screen"},{"location":"SDK/full/#vex.Brain.Lcd.set_origin--arguments","text":"x : The origins x position relative to top left corner y : The origins y position relative to top left corner","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_origin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_color","text":"","title":"set_pen_color"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_color--set-the-pen-color-used-for-drawing-lines-rectangles-and-circles","text":"The color can be passed in similar ways to the Color class.\\ The color is specific to the running thread.","title":"Set the pen color used for drawing lines, rectangles and circles"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_color--arguments","text":"color : The pen color","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_color--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_color--examples","text":"# set pen color red using a hex value\\ brain.screen.set_pen_color(0xFF0000) # set pen color blue using predefined color\\ brain.screen.set_pen_color(Color.BLUE) # set pen color green using web string\\ brain.screen.set_pen_color(\"#00FF00\")","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_width","text":"","title":"set_pen_width"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_width--set-the-pen-width-used-for-drawing-lines-rectangles-and-circles","text":"","title":"Set the pen width used for drawing lines, rectangles and circles"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_width--arguments","text":"width : The pen width","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.set_pen_width--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.x_position","text":"","title":"x_position"},{"location":"SDK/full/#vex.Brain.Lcd.x_position--the-x-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The X coordinate of the last screen event, press or release"},{"location":"SDK/full/#vex.Brain.Lcd.x_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.x_position--returns","text":"The X coordinate as an int","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.x_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.x_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Lcd.y_position","text":"","title":"y_position"},{"location":"SDK/full/#vex.Brain.Lcd.y_position--the-y-coordinate-of-the-last-screen-event-press-or-release","text":"","title":"The Y coordinate of the last screen event, press or release"},{"location":"SDK/full/#vex.Brain.Lcd.y_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Lcd.y_position--returns","text":"The Y coordinate as an int","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Lcd.y_position--examples","text":"def foo(): print(\"screen pressed at \", brain.screen.y_position()) brain.screen.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard","text":"","title":"Sdcard"},{"location":"SDK/full/#vex.Brain.Sdcard--sdcard-class-access-the-brain-sdcard","text":"","title":"Sdcard class - access the brain sdcard"},{"location":"SDK/full/#vex.Brain.Sdcard--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard--returns","text":"Instance of Sdcard class","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.appendfile","text":"","title":"appendfile"},{"location":"SDK/full/#vex.Brain.Sdcard.appendfile--append-a-bytearray-into-a-named-file","text":"Append is used to add more data to an existing file.","title":"append a bytearray into a named file"},{"location":"SDK/full/#vex.Brain.Sdcard.appendfile--arguments","text":"filename : The name of the file to write buffer : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.appendfile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.appendfile--examples","text":"# append bytearray into file\\ brain.sdcard.appendfile('MyTextFile.txt', bytearray(\"World \"))","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.exists","text":"","title":"exists"},{"location":"SDK/full/#vex.Brain.Sdcard.exists--check-to-see-if-named-file-exists-on-the-sd-card","text":"","title":"check to see if named file exists on the sd card"},{"location":"SDK/full/#vex.Brain.Sdcard.exists--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.exists--returns","text":"True if file exists","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.exists--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.filesize","text":"","title":"filesize"},{"location":"SDK/full/#vex.Brain.Sdcard.filesize--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/full/#vex.Brain.Sdcard.filesize--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.filesize--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.filesize--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.is_inserted","text":"","title":"is_inserted"},{"location":"SDK/full/#vex.Brain.Sdcard.is_inserted--returns-status-of-sd-card","text":"","title":"returns status of SD Card"},{"location":"SDK/full/#vex.Brain.Sdcard.is_inserted--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.is_inserted--returns","text":"True if an sdcard is inserted into the brain","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.is_inserted--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.loadfile","text":"","title":"loadfile"},{"location":"SDK/full/#vex.Brain.Sdcard.loadfile--load-the-named-file","text":"","title":"load the named file"},{"location":"SDK/full/#vex.Brain.Sdcard.loadfile--arguments","text":"filename : The name of the file to read buffer (optional) : A bytearray to read the file into","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.loadfile--returns","text":"A bytearray with file data","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.loadfile--examples","text":"# read file into new bytearray\\ b = brain.sdcard.loadfile('MyTextFile.txt')","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.savefile","text":"","title":"savefile"},{"location":"SDK/full/#vex.Brain.Sdcard.savefile--save-a-bytearray-into-a-named-file","text":"If the optional bytearray is None, then an empty file is created.","title":"Save a bytearray into a named file"},{"location":"SDK/full/#vex.Brain.Sdcard.savefile--arguments","text":"filename : The name of the file to write buffer (optional) : A bytearray to write into the file","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.savefile--returns","text":"The number of bytes written","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.savefile--examples","text":"# write bytearray into file\\ brain.sdcard.savefile('MyTextFile.txt', bytearray(\"Hello \"))","title":"Examples:"},{"location":"SDK/full/#vex.Brain.Sdcard.size","text":"","title":"size"},{"location":"SDK/full/#vex.Brain.Sdcard.size--returns-the-size-in-bytes-of-the-named-file","text":"","title":"returns the size in bytes of the named file"},{"location":"SDK/full/#vex.Brain.Sdcard.size--arguments","text":"filename : The name of the file to check","title":"Arguments:"},{"location":"SDK/full/#vex.Brain.Sdcard.size--returns","text":"size of file in bytes","title":"Returns:"},{"location":"SDK/full/#vex.Brain.Sdcard.size--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.BrakeType","text":"The defined units for motor brake values.","title":"BrakeType"},{"location":"SDK/full/#vex.BrakeType.BRAKE","text":"A brake unit that is defined as motor brake.","title":"BRAKE"},{"location":"SDK/full/#vex.BrakeType.COAST","text":"A brake unit that is defined as motor coast.","title":"COAST"},{"location":"SDK/full/#vex.BrakeType.HOLD","text":"A brake unit that is defined as motor hold.","title":"HOLD"},{"location":"SDK/full/#vex.Bumper","text":"","title":"Bumper"},{"location":"SDK/full/#vex.Bumper--bumper-class-create-a-new-bumper-switch","text":"","title":"Bumper class - create a new bumper switch"},{"location":"SDK/full/#vex.Bumper--arguments","text":"port : The 3wire port the bumper switch is connected to","title":"Arguments:"},{"location":"SDK/full/#vex.Bumper--returns","text":"An instance of the Bumper class","title":"Returns:"},{"location":"SDK/full/#vex.Bumper--examples","text":"bumper1 = Bumper(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Bumper.pressed","text":"","title":"pressed"},{"location":"SDK/full/#vex.Bumper.pressed--register-a-function-to-be-called-when-the-bumper-switch-is-pressed","text":"","title":"Register a function to be called when the bumper switch is pressed"},{"location":"SDK/full/#vex.Bumper.pressed--arguments","text":"callback : A function that will be called when the bumper switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Bumper.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Bumper.pressed--examples","text":"def foo(): print(\"switch pressed\") bumper1.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Bumper.pressing","text":"","title":"pressing"},{"location":"SDK/full/#vex.Bumper.pressing--returns-whether-the-bumper-switch-is-currently-being-pressed","text":"","title":"Returns whether the bumper switch is currently being pressed"},{"location":"SDK/full/#vex.Bumper.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Bumper.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Bumper.released","text":"","title":"released"},{"location":"SDK/full/#vex.Bumper.released--register-a-function-to-be-called-when-the-bumper-switch-is-released","text":"","title":"Register a function to be called when the bumper switch is released"},{"location":"SDK/full/#vex.Bumper.released--arguments","text":"callback : A function that will be called when the bumper switch is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Bumper.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Bumper.released--examples","text":"def foo(): print(\"switch released\") bumper1.released(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Bumper.value","text":"","title":"value"},{"location":"SDK/full/#vex.Bumper.value--the-current-value-of-the-bumper-switch","text":"","title":"The current value of the bumper switch"},{"location":"SDK/full/#vex.Bumper.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Bumper.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.Code","text":"","title":"Code"},{"location":"SDK/full/#vex.Code--code-class-a-class-for-holding-vision-sensor-codes","text":"A vision code is a collection of up to five vision signatures.","title":"Code class - a class for holding vision sensor codes"},{"location":"SDK/full/#vex.Code--arguments","text":"sig1 : A vision signature sig2 : A vision signature sig3 (optional) : A vision signature sig4 (optional) : A vision signature sig5 (optional) : A vision signature","title":"Arguments:"},{"location":"SDK/full/#vex.Code--returns","text":"An instance of the Signature class","title":"Returns:"},{"location":"SDK/full/#vex.Code--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ SIG_2 = Signature(2, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ C1 = Code(SIG_1, SIG_2)","title":"Examples:"},{"location":"SDK/full/#vex.Code.id","text":"Not used, always returns 0","title":"id"},{"location":"SDK/full/#vex.Color","text":"","title":"Color"},{"location":"SDK/full/#vex.Color--color-class-create-a-new-color","text":"This class is used to create instances of color objects","title":"Color class - create a new color"},{"location":"SDK/full/#vex.Color--arguments","text":"value : The color value, can be specified in various ways, see examples.","title":"Arguments:"},{"location":"SDK/full/#vex.Color--returns","text":"An instance of the Color class","title":"Returns:"},{"location":"SDK/full/#vex.Color--examples","text":"# create blue using hex value\\ c = Color(0x0000ff) # create blue using r, g, b values\\ c = Color(0, 0, 255) # create blue using web string\\ c = Color(\"#00F\") # create blue using web string (alternate)\\ c = Color(\"#0000FF\") # create red using an existing object\\ c = Color(Color.RED)","title":"Examples:"},{"location":"SDK/full/#vex.Color.BLACK","text":"predefined Color black","title":"BLACK"},{"location":"SDK/full/#vex.Color.BLUE","text":"predefined Color blue","title":"BLUE"},{"location":"SDK/full/#vex.Color.CYAN","text":"predefined Color cyan","title":"CYAN"},{"location":"SDK/full/#vex.Color.GREEN","text":"predefined Color green","title":"GREEN"},{"location":"SDK/full/#vex.Color.ORANGE","text":"predefined Color orange","title":"ORANGE"},{"location":"SDK/full/#vex.Color.PURPLE","text":"predefined Color purple","title":"PURPLE"},{"location":"SDK/full/#vex.Color.RED","text":"predefined Color red","title":"RED"},{"location":"SDK/full/#vex.Color.TRANSPARENT","text":"predefined Color transparent","title":"TRANSPARENT"},{"location":"SDK/full/#vex.Color.WHITE","text":"predefined Color white","title":"WHITE"},{"location":"SDK/full/#vex.Color.YELLOW","text":"predefined Color yellow","title":"YELLOW"},{"location":"SDK/full/#vex.Color.hsv","text":"","title":"hsv"},{"location":"SDK/full/#vex.Color.hsv--change-existing-color-instance-using-hsv","text":"","title":"change existing Color instance using hsv"},{"location":"SDK/full/#vex.Color.hsv--arguments","text":"hue : The hue of the color saturation : The saturation of the color value : The brightness of the color","title":"Arguments:"},{"location":"SDK/full/#vex.Color.hsv--returns","text":"integer value representing the color","title":"Returns:"},{"location":"SDK/full/#vex.Color.hsv--examples","text":"# create a color that is red c.hsv( 0, 1.0, 1.0)","title":"Examples:"},{"location":"SDK/full/#vex.Color.is_transparent","text":"","title":"is_transparent"},{"location":"SDK/full/#vex.Color.is_transparent--return-whether-color-is-transparent-or-not","text":"","title":"return whether color is transparent or not"},{"location":"SDK/full/#vex.Color.is_transparent--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Color.is_transparent--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Color.is_transparent--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Color.rgb","text":"","title":"rgb"},{"location":"SDK/full/#vex.Color.rgb--change-existing-color-instance-to-new-rgb-value","text":"","title":"change existing Color instance to new rgb value"},{"location":"SDK/full/#vex.Color.rgb--arguments","text":"value : The color value, can be specified in various ways, see examples.","title":"Arguments:"},{"location":"SDK/full/#vex.Color.rgb--returns","text":"integer value representing the color","title":"Returns:"},{"location":"SDK/full/#vex.Color.rgb--examples","text":"# create a color that is red c = Color(0xFF0000) # change color to blue using single value c.rgb(0x0000FF) # change color to green using three values c.rgb(0, 255, 0)","title":"Examples:"},{"location":"SDK/full/#vex.Color.web","text":"","title":"web"},{"location":"SDK/full/#vex.Color.web--change-existing-color-instance-using-web-string","text":"","title":"change existing Color instance using web string"},{"location":"SDK/full/#vex.Color.web--arguments","text":"value : The new color as a web string","title":"Arguments:"},{"location":"SDK/full/#vex.Color.web--returns","text":"integer value representing the color","title":"Returns:"},{"location":"SDK/full/#vex.Color.web--examples","text":"# create a color that is red c.web('#F00')","title":"Examples:"},{"location":"SDK/full/#vex.Competition","text":"","title":"Competition"},{"location":"SDK/full/#vex.Competition--competition-class-create-a-class-used-for-competition-control","text":"","title":"Competition class - create a class used for competition control"},{"location":"SDK/full/#vex.Competition--arguments","text":"driver : A function called as a thread when the driver control period starts. autonomous : A function called as a thread when the driver control period starts.","title":"Arguments:"},{"location":"SDK/full/#vex.Competition--returns","text":"An instance of the Competition class","title":"Returns:"},{"location":"SDK/full/#vex.Competition--examples","text":"def driver(): print(\"driver called\") def auton(): print(\"auton called\") comp = Competition(driver, auton)","title":"Examples:"},{"location":"SDK/full/#vex.Competition.is_autonomous","text":"","title":"is_autonomous"},{"location":"SDK/full/#vex.Competition.is_autonomous--return-autonomous-state-of-the-robot","text":"","title":"return autonomous state of the robot"},{"location":"SDK/full/#vex.Competition.is_autonomous--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Competition.is_autonomous--returns","text":"True if autonomous is enabled","title":"Returns:"},{"location":"SDK/full/#vex.Competition.is_competition_switch","text":"","title":"is_competition_switch"},{"location":"SDK/full/#vex.Competition.is_competition_switch--return-connection-state-of-the-competition-switch","text":"","title":"return connection state of the competition switch"},{"location":"SDK/full/#vex.Competition.is_competition_switch--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Competition.is_competition_switch--returns","text":"True if competition switch is connected","title":"Returns:"},{"location":"SDK/full/#vex.Competition.is_driver_control","text":"","title":"is_driver_control"},{"location":"SDK/full/#vex.Competition.is_driver_control--return-driver-control-state-of-the-robot","text":"","title":"return driver control state of the robot"},{"location":"SDK/full/#vex.Competition.is_driver_control--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Competition.is_driver_control--returns","text":"True if driver control is enabled","title":"Returns:"},{"location":"SDK/full/#vex.Competition.is_enabled","text":"","title":"is_enabled"},{"location":"SDK/full/#vex.Competition.is_enabled--return-enabledisable-state-of-the-robot","text":"","title":"return enable/disable state of the robot"},{"location":"SDK/full/#vex.Competition.is_enabled--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Competition.is_enabled--returns","text":"True if the robot is enabled","title":"Returns:"},{"location":"SDK/full/#vex.Competition.is_field_control","text":"","title":"is_field_control"},{"location":"SDK/full/#vex.Competition.is_field_control--return-connection-state-of-field-controller","text":"","title":"return connection state of field controller"},{"location":"SDK/full/#vex.Competition.is_field_control--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Competition.is_field_control--returns","text":"True if field controller is connected","title":"Returns:"},{"location":"SDK/full/#vex.Controller","text":"","title":"Controller"},{"location":"SDK/full/#vex.Controller--controller-class-create-a-class-to-access-the-controller","text":"","title":"Controller class - create a class to access the controller"},{"location":"SDK/full/#vex.Controller--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller--returns","text":"An instance of the Controller class","title":"Returns:"},{"location":"SDK/full/#vex.Controller--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Controller.axis1","text":"The joystick axis 1 on the controller","title":"axis1"},{"location":"SDK/full/#vex.Controller.axis2","text":"The joystick axis 2 on the controller","title":"axis2"},{"location":"SDK/full/#vex.Controller.axis3","text":"The joystick axis 3 on the controller","title":"axis3"},{"location":"SDK/full/#vex.Controller.axis4","text":"The joystick axis 4 on the controller","title":"axis4"},{"location":"SDK/full/#vex.Controller.buttonA","text":"The A button on the controller","title":"buttonA"},{"location":"SDK/full/#vex.Controller.buttonB","text":"The B button on the controller","title":"buttonB"},{"location":"SDK/full/#vex.Controller.buttonDown","text":"The Down button on the controller","title":"buttonDown"},{"location":"SDK/full/#vex.Controller.buttonL1","text":"The L1 button on the controller","title":"buttonL1"},{"location":"SDK/full/#vex.Controller.buttonL2","text":"The L2 button on the controller","title":"buttonL2"},{"location":"SDK/full/#vex.Controller.buttonLeft","text":"The Left button on the controller","title":"buttonLeft"},{"location":"SDK/full/#vex.Controller.buttonR1","text":"The R1 button on the controller","title":"buttonR1"},{"location":"SDK/full/#vex.Controller.buttonR2","text":"The R2 button on the controller","title":"buttonR2"},{"location":"SDK/full/#vex.Controller.buttonRight","text":"The Right button on the controller","title":"buttonRight"},{"location":"SDK/full/#vex.Controller.buttonUp","text":"The Up button on the controller","title":"buttonUp"},{"location":"SDK/full/#vex.Controller.buttonX","text":"The X button on the controller","title":"buttonX"},{"location":"SDK/full/#vex.Controller.buttonY","text":"The Y button on the controller","title":"buttonY"},{"location":"SDK/full/#vex.Controller.screen","text":"An instance of the Lcd class","title":"screen"},{"location":"SDK/full/#vex.Controller.Axis","text":"","title":"Axis"},{"location":"SDK/full/#vex.Controller.Axis--axis-class","text":"","title":"Axis class"},{"location":"SDK/full/#vex.Controller.Axis--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Axis--returns","text":"An instance of an Axis class","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Axis--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Axis.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Controller.Axis.changed--register-a-function-to-be-called-when-the-axis-value-changes","text":"","title":"Register a function to be called when the axis value changes"},{"location":"SDK/full/#vex.Controller.Axis.changed--arguments","text":"callback : A function that will be called when the axis value changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Axis.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Axis.changed--examples","text":"def foo(): print(\"axis changed\") controller.axis1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Axis.position","text":"","title":"position"},{"location":"SDK/full/#vex.Controller.Axis.position--return-the-current-position-of-the-axis-in-percentage","text":"","title":"Return the current position of the axis in percentage"},{"location":"SDK/full/#vex.Controller.Axis.position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Axis.position--returns","text":"A value in the range +/- 100","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Axis.position--examples","text":"a = controller.axis1.position()","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Axis.value","text":"","title":"value"},{"location":"SDK/full/#vex.Controller.Axis.value--return-the-current-position-of-the-axis","text":"","title":"Return the current position of the axis"},{"location":"SDK/full/#vex.Controller.Axis.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Axis.value--returns","text":"A value in the range +/- 127","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Axis.value--examples","text":"a = controller.axis1.position()","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Button","text":"","title":"Button"},{"location":"SDK/full/#vex.Controller.Button.pressed","text":"","title":"pressed"},{"location":"SDK/full/#vex.Controller.Button.pressed--register-a-function-to-be-called-when-a-button-is-pressed","text":"","title":"Register a function to be called when a button is pressed"},{"location":"SDK/full/#vex.Controller.Button.pressed--arguments","text":"callback : A function that will be called when the button is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Button.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Button.pressed--examples","text":"def foo(): print(\"button pressed\") controller.buttonL1.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Button.pressing","text":"","title":"pressing"},{"location":"SDK/full/#vex.Controller.Button.pressing--returns-whether-a-button-is-currently-being-pressed","text":"","title":"Returns whether a button is currently being pressed"},{"location":"SDK/full/#vex.Controller.Button.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Button.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Button.released","text":"","title":"released"},{"location":"SDK/full/#vex.Controller.Button.released--register-a-function-to-be-called-when-a-button-is-released","text":"","title":"Register a function to be called when a button is released"},{"location":"SDK/full/#vex.Controller.Button.released--arguments","text":"callback : A function that will be called when the button is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Button.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Button.released--examples","text":"def foo(): print(\"button released\") controller.buttonL1.released(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Lcd","text":"","title":"Lcd"},{"location":"SDK/full/#vex.Controller.Lcd--controllerlcd-class","text":"A class used to access the screen on the V5 controller.","title":"Controller.Lcd class"},{"location":"SDK/full/#vex.Controller.Lcd--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd--returns","text":"An instance of the Brain.Lcd class","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_row","text":"","title":"clear_row"},{"location":"SDK/full/#vex.Controller.Lcd.clear_row--clear-screen-row","text":"","title":"Clear screen row"},{"location":"SDK/full/#vex.Controller.Lcd.clear_row--arguments","text":"row (optional) : The row to clear, 1, 2, or 3, default is current cursor row","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_row--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_row--examples","text":"# clear row 2\\ controller.screen.clear_row(2)","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_screen","text":"","title":"clear_screen"},{"location":"SDK/full/#vex.Controller.Lcd.clear_screen--clear-the-whole-screen","text":"","title":"Clear the whole screen"},{"location":"SDK/full/#vex.Controller.Lcd.clear_screen--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_screen--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Lcd.clear_screen--examples","text":"controller.screen.clear_screen()","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Lcd.column","text":"Return the current column where text will be printed","title":"column"},{"location":"SDK/full/#vex.Controller.Lcd.next_row","text":"","title":"next_row"},{"location":"SDK/full/#vex.Controller.Lcd.next_row--move-the-cursor-to-the-beginning-of-the-next-row","text":"","title":"Move the cursor to the beginning of the next row"},{"location":"SDK/full/#vex.Controller.Lcd.next_row--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd.next_row--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Lcd.print","text":"","title":"print"},{"location":"SDK/full/#vex.Controller.Lcd.print--print-text-on-the-screen-using-current-curser-position","text":"","title":"print text on the screen using current curser position."},{"location":"SDK/full/#vex.Controller.Lcd.print--arguments","text":"Optional keyword arguments: sep : string inserted between values, default a space. precision : the number of decimal places to display when printing simple numbers, default is 2","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd.print--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.Lcd.print--examples","text":"# print the number 1 on the screen at current cursor position\\ controller.screen.print(1) # print the numbers 1, 2, 3 and 4 on the screen at current cursor position separated by a '-'\\ controller.screen.print(1, 2, 3, 4, sep='-') # print motor1 velocity on the screen using a format string\\ controller.screen.print(\"motor 1 : % 7.2f\" %(motor1.velocity()))","title":"Examples:"},{"location":"SDK/full/#vex.Controller.Lcd.row","text":"Return the current row where text will be printed","title":"row"},{"location":"SDK/full/#vex.Controller.Lcd.set_cursor","text":"","title":"set_cursor"},{"location":"SDK/full/#vex.Controller.Lcd.set_cursor--set-the-cursor-position-used-for-printing-text-on-the-screen","text":"V5 controller has at most 3 lines of text","title":"Set the cursor position used for printing text on the screen"},{"location":"SDK/full/#vex.Controller.Lcd.set_cursor--arguments","text":"row : The cursor row. 1, 2 or 3 col : The cursor column. The first column is 1.","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.Lcd.set_cursor--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.rumble","text":"","title":"rumble"},{"location":"SDK/full/#vex.Controller.rumble--send-a-rumble-string-to-the-v5-controller","text":"","title":"Send a rumble string to the V5 controller"},{"location":"SDK/full/#vex.Controller.rumble--arguments","text":"pattern : A pattern using '.' and '-' for short and long rumbles.","title":"Arguments:"},{"location":"SDK/full/#vex.Controller.rumble--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Controller.rumble--examples","text":"controller.rumble('..--')","title":"Examples:"},{"location":"SDK/full/#vex.ControllerType","text":"The defined types for controller devices.","title":"ControllerType"},{"location":"SDK/full/#vex.ControllerType.PARTNER","text":"A controller defined as a partner controller.","title":"PARTNER"},{"location":"SDK/full/#vex.ControllerType.PRIMARY","text":"A controller defined as a primary controller.","title":"PRIMARY"},{"location":"SDK/full/#vex.CurrentUnits","text":"The measurement units for current values.","title":"CurrentUnits"},{"location":"SDK/full/#vex.CurrentUnits.AMP","text":"A current unit that is measured in amps.","title":"AMP"},{"location":"SDK/full/#vex.DigitalIn","text":"","title":"DigitalIn"},{"location":"SDK/full/#vex.DigitalIn--digitalin-class-create-a-new-digital-input","text":"","title":"DigitalIn class - create a new digital input"},{"location":"SDK/full/#vex.DigitalIn--arguments","text":"port : The 3wire port to use for the digital input","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalIn--returns","text":"An instance of the DigitalIn class","title":"Returns:"},{"location":"SDK/full/#vex.DigitalIn--examples","text":"dig1 = DigitalIn(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.DigitalIn.high","text":"","title":"high"},{"location":"SDK/full/#vex.DigitalIn.high--register-a-function-to-be-called-when-the-digital-input-goes-to-the-logic-high-state","text":"","title":"Register a function to be called when the digital input goes to the logic high state"},{"location":"SDK/full/#vex.DigitalIn.high--arguments","text":"callback : A function that will be called when the digital input goes to the logic high state arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalIn.high--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.DigitalIn.high--examples","text":"def foo(): print(\"input high\") dig1.high(foo)","title":"Examples:"},{"location":"SDK/full/#vex.DigitalIn.low","text":"","title":"low"},{"location":"SDK/full/#vex.DigitalIn.low--register-a-function-to-be-called-when-the-digital-input-goes-to-the-logic-low-state","text":"","title":"Register a function to be called when the digital input goes to the logic low state"},{"location":"SDK/full/#vex.DigitalIn.low--arguments","text":"callback : A function that will be called when the digital input goes to the logic low state arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalIn.low--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.DigitalIn.low--examples","text":"def foo(): print(\"input low\") dig1.low(foo)","title":"Examples:"},{"location":"SDK/full/#vex.DigitalIn.value","text":"","title":"value"},{"location":"SDK/full/#vex.DigitalIn.value--the-current-value-of-the-digital-input","text":"","title":"The current value of the digital input"},{"location":"SDK/full/#vex.DigitalIn.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalIn.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.DigitalOut","text":"","title":"DigitalOut"},{"location":"SDK/full/#vex.DigitalOut--digitalout-class-create-a-new-digital-output","text":"","title":"DigitalOut class - create a new digital output"},{"location":"SDK/full/#vex.DigitalOut--arguments","text":"port : The 3wire port to use for the digital output","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalOut--returns","text":"An instance of the DigitalOut class","title":"Returns:"},{"location":"SDK/full/#vex.DigitalOut--examples","text":"dig1 = DigitalOut(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.DigitalOut.set","text":"","title":"set"},{"location":"SDK/full/#vex.DigitalOut.set--set-the-output-level-for-the-digital-output","text":"","title":"Set the output level for the digital output"},{"location":"SDK/full/#vex.DigitalOut.set--arguments","text":"value : 0, 1, True or False","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalOut.set--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DigitalOut.set--examples","text":"dig1.set(True)","title":"Examples:"},{"location":"SDK/full/#vex.DigitalOut.value","text":"","title":"value"},{"location":"SDK/full/#vex.DigitalOut.value--the-current-value-of-the-digital-output","text":"","title":"The current value of the digital output"},{"location":"SDK/full/#vex.DigitalOut.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DigitalOut.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.DirectionType","text":"The defined units for direction values.","title":"DirectionType"},{"location":"SDK/full/#vex.DirectionType.FORWARD","text":"A direction unit that is defined as forward.","title":"FORWARD"},{"location":"SDK/full/#vex.DirectionType.REVERSE","text":"A direction unit that is defined as backward.","title":"REVERSE"},{"location":"SDK/full/#vex.DirectionType.UNDEFINED","text":"A direction unit used when direction is not known.","title":"UNDEFINED"},{"location":"SDK/full/#vex.Distance","text":"","title":"Distance"},{"location":"SDK/full/#vex.Distance--distance-class-a-class-for-working-with-the-distance-sensor","text":"","title":"Distance class - a class for working with the distance sensor"},{"location":"SDK/full/#vex.Distance--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/full/#vex.Distance--returns","text":"An instance of the Distance class","title":"Returns:"},{"location":"SDK/full/#vex.Distance--examples","text":"dist1 = Distance(Ports.PORT1)","title":"Examples:"},{"location":"SDK/full/#vex.Distance.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Distance.changed--register-a-function-to-be-called-when-the-distance-value-changes","text":"","title":"Register a function to be called when the distance value changes"},{"location":"SDK/full/#vex.Distance.changed--arguments","text":"callback : A function that will be called when the distance value changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Distance.changed--examples","text":"def foo(): print(\"distance changed\") dist1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Distance.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Distance.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Distance.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Distance.is_object_detected","text":"","title":"is_object_detected"},{"location":"SDK/full/#vex.Distance.is_object_detected--returns-if-an-object-is-detected","text":"","title":"Returns if an object is detected"},{"location":"SDK/full/#vex.Distance.is_object_detected--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.is_object_detected--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Distance.object_distance","text":"","title":"object_distance"},{"location":"SDK/full/#vex.Distance.object_distance--the-current-distance-the-sensor-is-reading","text":"The distance will return a large positive number if no object is detected.","title":"The current distance the sensor is reading."},{"location":"SDK/full/#vex.Distance.object_distance--arguments","text":"units (optional): The distance units to return the distance value in. default is MM.","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.object_distance--returns","text":"A value for distance in the specified units.","title":"Returns:"},{"location":"SDK/full/#vex.Distance.object_distance--examples","text":"# get distance in mm\\ value = dist1.object_distance() # get distance in inches\\ value = dist1.object_distance(INCHES)","title":"Examples:"},{"location":"SDK/full/#vex.Distance.object_rawsize","text":"","title":"object_rawsize"},{"location":"SDK/full/#vex.Distance.object_rawsize--get-the-raw-value-of-object-size-the-sensor-is-detecting","text":"Raw size will be a number ranging from 0 to about 400\\ Larger and more reflective objects will return larger values.","title":"Get the raw value of object size the sensor is detecting."},{"location":"SDK/full/#vex.Distance.object_rawsize--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.object_rawsize--returns","text":"A value for object size that is a number.\\","title":"Returns:"},{"location":"SDK/full/#vex.Distance.object_rawsize--examples","text":"# get object raw size\\ size = dist1.object_rawsize()","title":"Examples:"},{"location":"SDK/full/#vex.Distance.object_size","text":"","title":"object_size"},{"location":"SDK/full/#vex.Distance.object_size--get-an-estimation-of-the-object-size-the-sensor-is-detecting","text":"","title":"Get an estimation of the object size the sensor is detecting."},{"location":"SDK/full/#vex.Distance.object_size--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.object_size--returns","text":"A value for object size.\\ The value will be of type ObjectSizeType","title":"Returns:"},{"location":"SDK/full/#vex.Distance.object_size--examples","text":"# get object size\\ size = dist1.object_size()","title":"Examples:"},{"location":"SDK/full/#vex.Distance.object_velocity","text":"","title":"object_velocity"},{"location":"SDK/full/#vex.Distance.object_velocity--returns-the-object-velocity","text":"velocity is calculated from change of distance over time","title":"Returns the object velocity"},{"location":"SDK/full/#vex.Distance.object_velocity--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.object_velocity--returns","text":"The velocity in m/s","title":"Returns:"},{"location":"SDK/full/#vex.Distance.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Distance.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Distance.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Distance.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.DistanceUnits","text":"The measurement units for distance values.","title":"DistanceUnits"},{"location":"SDK/full/#vex.DistanceUnits.CM","text":"A distance unit that is measured in centimeters.","title":"CM"},{"location":"SDK/full/#vex.DistanceUnits.IN","text":"A distance unit that is measured in inches.","title":"IN"},{"location":"SDK/full/#vex.DistanceUnits.MM","text":"A distance unit that is measured in millimeters.","title":"MM"},{"location":"SDK/full/#vex.DriveTrain","text":"","title":"DriveTrain"},{"location":"SDK/full/#vex.DriveTrain--drivetrain-class-use-this-to-create-a-simple-drivetrain","text":"","title":"DriveTrain class - use this to create a simple drivetrain"},{"location":"SDK/full/#vex.DriveTrain--arguments","text":"lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used.","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain--returns","text":"A new DriveTrain object.","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain--examples","text":"# A simple two motor drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES)","title":"Examples:"},{"location":"SDK/full/#vex.DriveTrain.current","text":"","title":"current"},{"location":"SDK/full/#vex.DriveTrain.current--returns-the-total-current-all-drivetrain-motors-are-using","text":"","title":"Returns the total current all drivetrain motors are using"},{"location":"SDK/full/#vex.DriveTrain.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.current--returns","text":"The drivetrain current in provided units","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.drive","text":"","title":"drive"},{"location":"SDK/full/#vex.DriveTrain.drive--drive-the-drivetrain-using-the-provided-arguments","text":"The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters.","title":"drive the drivetrain using the provided arguments"},{"location":"SDK/full/#vex.DriveTrain.drive--arguments","text":"direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.drive--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.drive--examples","text":"# drive forward at velocity set with set_velocity\\ drive1.drive(FORWARD) # drive forward at 50 rpm\\ drive1.drive(FORWARD, 50) # drive with negative velocity, ie. backwards\\ drive1.drive(FORWARD, -20) # drive forwards with 100% velocity\\ drive1.drive(FORWARD, 100, PERCENT) # drive forwards at 50 rpm\\ drive1.drive(FORWARD, 50, RPM) # drive forwards at 360 dps\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.DriveTrain.drive_for","text":"","title":"drive_for"},{"location":"SDK/full/#vex.DriveTrain.drive_for--move-the-drivetrain-using-the-provided-arguments","text":"The drive_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to move a distance.","title":"move the drivetrain using the provided arguments"},{"location":"SDK/full/#vex.DriveTrain.drive_for--arguments","text":"direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.drive_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.drive_for--examples","text":"# drive forward 10 inches from the current position\\ drive1.drive_for(FORWARD, 10, INCHES) # drive reverse 1000mm from the current position with motors at 50 rpm\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM)","title":"Examples:"},{"location":"SDK/full/#vex.DriveTrain.efficiency","text":"","title":"efficiency"},{"location":"SDK/full/#vex.DriveTrain.efficiency--returns-the-average-efficiency-of-the-left-and-right-motors","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the average efficiency of the left and right motors"},{"location":"SDK/full/#vex.DriveTrain.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.efficiency--returns","text":"The motor efficiency in percent","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.get_timeout","text":"","title":"get_timeout"},{"location":"SDK/full/#vex.DriveTrain.get_timeout--get-the-current-timeout-value-used-by-the-drivetrain","text":"","title":"Get the current timeout value used by the drivetrain"},{"location":"SDK/full/#vex.DriveTrain.get_timeout--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.get_timeout--returns","text":"Timeout value in mS","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.is_done","text":"","title":"is_done"},{"location":"SDK/full/#vex.DriveTrain.is_done--returns-the-current-status-of-the-drive_for-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for or turn_for command"},{"location":"SDK/full/#vex.DriveTrain.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.is_done--returns","text":"The current drive_for or turn_for status","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.is_moving","text":"","title":"is_moving"},{"location":"SDK/full/#vex.DriveTrain.is_moving--returns-the-current-status-of-the-drive_for-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for or turn_for command"},{"location":"SDK/full/#vex.DriveTrain.is_moving--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.is_moving--returns","text":"The current drive_for or turn_for status","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.power","text":"","title":"power"},{"location":"SDK/full/#vex.DriveTrain.power--returns-the-total-power-all-drivetrain-motors-are-using","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the total power all drivetrain motors are using"},{"location":"SDK/full/#vex.DriveTrain.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.power--returns","text":"The drivetrain power in provided units","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.set_drive_velocity","text":"","title":"set_drive_velocity"},{"location":"SDK/full/#vex.DriveTrain.set_drive_velocity--set-default-velocity-for-drive-commands","text":"This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function.","title":"Set default velocity for drive commands"},{"location":"SDK/full/#vex.DriveTrain.set_drive_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.set_drive_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/full/#vex.DriveTrain.set_stopping--set-the-stopping-mode-for-all-motors-on-the-drivetrain","text":"Setting the action for the motors when stopped.","title":"Set the stopping mode for all motors on the drivetrain"},{"location":"SDK/full/#vex.DriveTrain.set_stopping--arguments","text":"mode : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.set_stopping--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/full/#vex.DriveTrain.set_timeout--set-the-timeout-value-used-all-motors-on-the-drivetrain","text":"The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False.","title":"Set the timeout value used all motors on the drivetrain"},{"location":"SDK/full/#vex.DriveTrain.set_timeout--arguments","text":"timeout : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.set_timeout--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.set_turn_velocity","text":"","title":"set_turn_velocity"},{"location":"SDK/full/#vex.DriveTrain.set_turn_velocity--set-default-velocity-for-turn-commands","text":"This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function.","title":"Set default velocity for turn commands"},{"location":"SDK/full/#vex.DriveTrain.set_turn_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.set_turn_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.DriveTrain.stop--stop-the-drivetrain-set-to-0-velocity-and-set-current-stopping_mode","text":"The motors will be stopped and set to COAST, BRAKE or HOLD","title":"Stop the drivetrain, set to 0 velocity and set current stopping_mode"},{"location":"SDK/full/#vex.DriveTrain.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.temperature","text":"","title":"temperature"},{"location":"SDK/full/#vex.DriveTrain.temperature--returns-the-average-temperature-of-the-left-and-right-motors","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the average temperature of the left and right motors"},{"location":"SDK/full/#vex.DriveTrain.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.temperature--returns","text":"The motor temperature in provided units","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.torque","text":"","title":"torque"},{"location":"SDK/full/#vex.DriveTrain.torque--returns-the-total-torque-all-drivetrain-motors-are-using","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the total torque all drivetrain motors are using"},{"location":"SDK/full/#vex.DriveTrain.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.torque--returns","text":"The motor torque in provided units","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.turn","text":"","title":"turn"},{"location":"SDK/full/#vex.DriveTrain.turn--turn-the-drivetrain-using-the-provided-arguments","text":"The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters.","title":"turn the drivetrain using the provided arguments"},{"location":"SDK/full/#vex.DriveTrain.turn--arguments","text":"direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.turn--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.turn--examples","text":"# turn left at velocity set with set_turn_velocity\\ drive1.turn(LEFT) # drive right at 50 rpm\\ drive1.turn(RIGHT, 50) # turn right with 100% velocity\\ drive1.turn(RIGHT, 100, PERCENT) # turn right at 50 rpm\\ drive1.turn(RIGHT, 50, RPM) # turn right at 360 dps\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.DriveTrain.turn_for","text":"","title":"turn_for"},{"location":"SDK/full/#vex.DriveTrain.turn_for--turn-the-drivetrain-using-the-provided-arguments","text":"The turn_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to turn a specified angle.","title":"turn the drivetrain using the provided arguments"},{"location":"SDK/full/#vex.DriveTrain.turn_for--arguments","text":"direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.turn_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/full/#vex.DriveTrain.turn_for--examples","text":"# turn right 90 degrees\\ drive1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM)","title":"Examples:"},{"location":"SDK/full/#vex.DriveTrain.velocity","text":"","title":"velocity"},{"location":"SDK/full/#vex.DriveTrain.velocity--returns-average-velocity-of-the-left-and-right-motors","text":"","title":"Returns average velocity of the left and right motors"},{"location":"SDK/full/#vex.DriveTrain.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.DriveTrain.velocity--returns","text":"The drivetrain velocity in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet","text":"","title":"Electromagnet"},{"location":"SDK/full/#vex.Electromagnet--electromagnet-class-a-class-for-working-with-the-electromagnet","text":"","title":"Electromagnet class - a class for working with the electromagnet"},{"location":"SDK/full/#vex.Electromagnet--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet--returns","text":"An instance of the Electromagnet class","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet--examples","text":"em1 = Electromagnet(Ports.PORT1)","title":"Examples:"},{"location":"SDK/full/#vex.Electromagnet.drop","text":"","title":"drop"},{"location":"SDK/full/#vex.Electromagnet.drop--energize-the-electromagnet-to-drop-objects","text":"","title":"energize the electromagnet to drop objects"},{"location":"SDK/full/#vex.Electromagnet.drop--arguments","text":"duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing.","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.drop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet.drop--examples","text":"# drop with default values\\ em1.drop() # drop with custom values\\ em1.drop(250, MSEC, 90)","title":"Examples:"},{"location":"SDK/full/#vex.Electromagnet.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Electromagnet.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Electromagnet.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet.pickup","text":"","title":"pickup"},{"location":"SDK/full/#vex.Electromagnet.pickup--energize-the-electromagnet-to-pickup-objects","text":"","title":"energize the electromagnet to pickup objects"},{"location":"SDK/full/#vex.Electromagnet.pickup--arguments","text":"duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing.","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.pickup--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet.pickup--examples","text":"# pickup with default values\\ em1.pickup() # pickup with custom values\\ em1.pickup(250, MSEC, 90)","title":"Examples:"},{"location":"SDK/full/#vex.Electromagnet.set_power","text":"","title":"set_power"},{"location":"SDK/full/#vex.Electromagnet.set_power--set-the-default-power-to-use-for-drop-and-pickup-methods","text":"","title":"set the default power to use for drop and pickup methods"},{"location":"SDK/full/#vex.Electromagnet.set_power--arguments","text":"value : power in range 0 to 100","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.set_power--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet.set_power--examples","text":"# set default power to 80\\ em1.set_power(80)","title":"Examples:"},{"location":"SDK/full/#vex.Electromagnet.temperature","text":"","title":"temperature"},{"location":"SDK/full/#vex.Electromagnet.temperature--returns-the-temperature-of-the-electromagnet","text":"","title":"Returns the temperature of the electromagnet"},{"location":"SDK/full/#vex.Electromagnet.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.temperature--returns","text":"The electromagnet temperature in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Electromagnet.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Electromagnet.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Electromagnet.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Electromagnet.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.Encoder","text":"","title":"Encoder"},{"location":"SDK/full/#vex.Encoder--encoder-class-create-a-new-encoder-sensor","text":"An encoder uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h","title":"Encoder class - create a new encoder sensor"},{"location":"SDK/full/#vex.Encoder--arguments","text":"port : The 3wire port to use for the encoder sensor","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder--returns","text":"An instance of the Encoder class","title":"Returns:"},{"location":"SDK/full/#vex.Encoder--examples","text":"enc1 = Encoder(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Encoder.position","text":"","title":"position"},{"location":"SDK/full/#vex.Encoder.position--the-current-position-of-the-encoder","text":"","title":"The current position of the encoder"},{"location":"SDK/full/#vex.Encoder.position--arguments","text":"units (optional) : The rotation units to return the position value in, default is DEGREES.","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder.position--returns","text":"A value for encoder position in the specified units.","title":"Returns:"},{"location":"SDK/full/#vex.Encoder.position--examples","text":"# get encoder position\\ value = enc1.position()","title":"Examples:"},{"location":"SDK/full/#vex.Encoder.reset_position","text":"","title":"reset_position"},{"location":"SDK/full/#vex.Encoder.reset_position--reset-the-encoder-position-to-0","text":"","title":"Reset the encoder position to 0"},{"location":"SDK/full/#vex.Encoder.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Encoder.set_position","text":"","title":"set_position"},{"location":"SDK/full/#vex.Encoder.set_position--set-the-encoder-position-to-a-new-value","text":"","title":"set the encoder position to a new value"},{"location":"SDK/full/#vex.Encoder.set_position--arguments","text":"value : The new value to use for position. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Encoder.set_position--examples","text":"# set the value of position to 180 degrees\\ enc1.set_position(180)","title":"Examples:"},{"location":"SDK/full/#vex.Encoder.value","text":"","title":"value"},{"location":"SDK/full/#vex.Encoder.value--the-current-value-of-the-encoder-in-raw-counts","text":"One full turn of the encoder is 360 counts.","title":"The current value of the encoder in raw counts"},{"location":"SDK/full/#vex.Encoder.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder.value--returns","text":"A value for encoder counts.","title":"Returns:"},{"location":"SDK/full/#vex.Encoder.value--examples","text":"# get encoder raw counts\\ value = enc1.value()","title":"Examples:"},{"location":"SDK/full/#vex.Encoder.velocity","text":"","title":"velocity"},{"location":"SDK/full/#vex.Encoder.velocity--the-current-velocity-of-the-encoder","text":"","title":"The current velocity of the encoder"},{"location":"SDK/full/#vex.Encoder.velocity--arguments","text":"units (optional) : The velocity units to return the value in, default is RPM.","title":"Arguments:"},{"location":"SDK/full/#vex.Encoder.velocity--returns","text":"A value for encoder velocity in the specified units.","title":"Returns:"},{"location":"SDK/full/#vex.Encoder.velocity--examples","text":"# get encoder velocity in rpm\\ value = enc1.velocity()","title":"Examples:"},{"location":"SDK/full/#vex.Event","text":"","title":"Event"},{"location":"SDK/full/#vex.Event--event-class-create-a-new-event","text":"A function is registered that will be called when the event broadcast() function is called. More than one function can be assigned to a single event.","title":"Event class - create a new event"},{"location":"SDK/full/#vex.Event--arguments","text":"callback (optional) : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Event--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Event--examples","text":"def foo(): print(\"foo\") def bar(): print(\"bar\") e = Event(foo)\\ e.set(bar) # There needs to be some small delay after events are created before they can be broadcast to\\ sleep(20) # cause both foo and bar to be called\\ e.broadcast()","title":"Examples:"},{"location":"SDK/full/#vex.Event.__call__","text":"","title":"__call__"},{"location":"SDK/full/#vex.Event.__call__--add-callback-function-to-an-existing-event","text":"","title":"Add callback function to an existing event"},{"location":"SDK/full/#vex.Event.__call__--arguments","text":"callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Event.__call__--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Event.__call__--examples","text":"def bar(): print(\"bar\") # add callback function to existing event e\\ e(bar)","title":"Examples:"},{"location":"SDK/full/#vex.Event.broadcast","text":"","title":"broadcast"},{"location":"SDK/full/#vex.Event.broadcast--broadcast-to-the-event-and-cause-all-registered-callback-function-to-run","text":"","title":"Broadcast to the event and cause all registered callback function to run"},{"location":"SDK/full/#vex.Event.broadcast--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Event.broadcast--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Event.broadcast--examples","text":"# broadcast to an existing event e\\ e.broadcast()","title":"Examples:"},{"location":"SDK/full/#vex.Event.broadcast_and_wait","text":"","title":"broadcast_and_wait"},{"location":"SDK/full/#vex.Event.broadcast_and_wait--broadcast-to-the-event-and-cause-all-registered-callback-function-to-run","text":"This is similar to broadcast except that it will wait for all registered callbacks to complete before returning.","title":"Broadcast to the event and cause all registered callback function to run"},{"location":"SDK/full/#vex.Event.broadcast_and_wait--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Event.broadcast_and_wait--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Event.broadcast_and_wait--examples","text":"# broadcast to an existing event e, wait for completion\\ e.broadcast_and_wait()","title":"Examples:"},{"location":"SDK/full/#vex.Event.set","text":"","title":"set"},{"location":"SDK/full/#vex.Event.set--add-callback-function-to-an-existing-event","text":"","title":"Add callback function to an existing event"},{"location":"SDK/full/#vex.Event.set--arguments","text":"callback : A function that will be called when the event is broadcast. arg (optional) : A tuple that is used to pass arguments to the event callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Event.set--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Event.set--examples","text":"def bar(): print(\"bar\") # add callback function to existing event e\\ e.set(bar)","title":"Examples:"},{"location":"SDK/full/#vex.FontType","text":"A unit representing font type and size","title":"FontType"},{"location":"SDK/full/#vex.FontType.CJK16","text":"Chinese/Japanese/Korean font of size 16","title":"CJK16"},{"location":"SDK/full/#vex.FontType.MONO12","text":"proportional font of size 12","title":"MONO12"},{"location":"SDK/full/#vex.FontType.MONO15","text":"proportional font of size 15","title":"MONO15"},{"location":"SDK/full/#vex.FontType.MONO20","text":"monotype font of size 20","title":"MONO20"},{"location":"SDK/full/#vex.FontType.MONO30","text":"monotype font of size 30","title":"MONO30"},{"location":"SDK/full/#vex.FontType.MONO40","text":"monotype font of size 40","title":"MONO40"},{"location":"SDK/full/#vex.FontType.MONO60","text":"monotype font of size 60","title":"MONO60"},{"location":"SDK/full/#vex.FontType.PROP20","text":"proportional font of size 20","title":"PROP20"},{"location":"SDK/full/#vex.FontType.PROP30","text":"proportional font of size 30","title":"PROP30"},{"location":"SDK/full/#vex.FontType.PROP40","text":"proportional font of size 40","title":"PROP40"},{"location":"SDK/full/#vex.FontType.PROP60","text":"proportional font of size 60","title":"PROP60"},{"location":"SDK/full/#vex.GearSetting","text":"The defined units for gear values.","title":"GearSetting"},{"location":"SDK/full/#vex.GearSetting.RATIO_18_1","text":"A gear unit that is defined as the green 18:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_18_1"},{"location":"SDK/full/#vex.GearSetting.RATIO_36_1","text":"A gear unit that is defined as the red 36:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_36_1"},{"location":"SDK/full/#vex.GearSetting.RATIO_6_1","text":"A gear unit that is defined as the blue 6:1 gear cartridge used in V5 Smart Motors.","title":"RATIO_6_1"},{"location":"SDK/full/#vex.GestureType","text":"The defined units for optical sensor gesture types.","title":"GestureType"},{"location":"SDK/full/#vex.Gps","text":"","title":"Gps"},{"location":"SDK/full/#vex.Gps--gps-class-a-class-for-working-with-the-gps-sensor","text":"","title":"Gps class - a class for working with the gps sensor"},{"location":"SDK/full/#vex.Gps--arguments","text":"port : The smartport this device is attached to origin_x (optional) : The X location of the GPS with respect to origin of the robot. origin_y (optional) : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM","title":"Arguments:"},{"location":"SDK/full/#vex.Gps--returns","text":"An instance of the Gps class","title":"Returns:"},{"location":"SDK/full/#vex.Gps--examples","text":"gps1 = Gps(Ports.PORT1)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.acceleration","text":"","title":"acceleration"},{"location":"SDK/full/#vex.Gps.acceleration--read-the-acceleration-for-one-axis-of-the-gps","text":"","title":"read the acceleration for one axis of the gps"},{"location":"SDK/full/#vex.Gps.acceleration--arguments","text":"axis : The axis to read","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.acceleration--returns","text":"A value for the acceleration of the axis in units of gravity.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.acceleration--examples","text":"# get the acceleration for the Z axis of the gps\\ zaccel = gps1.acceleration(ZAXIS)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.calibrate","text":"not used on the GPS sensor","title":"calibrate"},{"location":"SDK/full/#vex.Gps.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Gps.changed--register-a-function-to-be-called-when-the-value-of-the-gps-heading-changes","text":"This is not particularly useful as gps heading is not stable and will cause many events.","title":"Register a function to be called when the value of the gps heading changes"},{"location":"SDK/full/#vex.Gps.changed--arguments","text":"callback : A function that will be called when the value of the gps heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Gps.changed--examples","text":"def foo(): print(\"heading changed\") gps1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/full/#vex.Gps.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Gps.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/full/#vex.Gps.gyro_rate","text":"","title":"gyro_rate"},{"location":"SDK/full/#vex.Gps.gyro_rate--read-the-gyro-rate-for-one-axis-of-the-gps","text":"","title":"read the gyro rate for one axis of the gps"},{"location":"SDK/full/#vex.Gps.gyro_rate--arguments","text":"axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.gyro_rate--returns","text":"A value for the gyro rate of the axis in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.gyro_rate--examples","text":"# get the gyro rate for the Z axis of the gps\\ zrate = gps1.gyro_rate(ZAXIS)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.heading","text":"","title":"heading"},{"location":"SDK/full/#vex.Gps.heading--read-the-current-heading-of-the-gps","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the gps"},{"location":"SDK/full/#vex.Gps.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.heading--examples","text":"# get the current heading for the gps\\ value = gps1.heading()","title":"Examples:"},{"location":"SDK/full/#vex.Gps.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Gps.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Gps.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Gps.is_calibrating","text":"not used on the GPS sensor","title":"is_calibrating"},{"location":"SDK/full/#vex.Gps.orientation","text":"","title":"orientation"},{"location":"SDK/full/#vex.Gps.orientation--read-the-orientation-for-one-axis-of-the-gps","text":"","title":"read the orientation for one axis of the gps"},{"location":"SDK/full/#vex.Gps.orientation--arguments","text":"axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.orientation--returns","text":"A value for the axis orientation in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.orientation--examples","text":"# get the pitch value for the gps\\ pitch = gps1.orientation(OrientationType.PITCH)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.quality","text":"","title":"quality"},{"location":"SDK/full/#vex.Gps.quality--read-the-current-quality-of-the-gps-data","text":"A quality of 100 indicates the gps can see the gps field strip and is returning good readings\\ The value for quality will reduce as the confidence in x and y location lowers.","title":"read the current quality of the gps data"},{"location":"SDK/full/#vex.Gps.quality--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.quality--returns","text":"A value of quality in the range 0 to 100","title":"Returns:"},{"location":"SDK/full/#vex.Gps.quality--examples","text":"# get the current location and heading quality for the gps\\ q = gps1.quality()","title":"Examples:"},{"location":"SDK/full/#vex.Gps.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/full/#vex.Gps.reset_heading--reset-the-gps-heading-to-0","text":"","title":"Reset the gps heading to 0"},{"location":"SDK/full/#vex.Gps.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/full/#vex.Gps.reset_rotation--reset-the-gps-rotation-to-0","text":"","title":"Reset the gps rotation to 0"},{"location":"SDK/full/#vex.Gps.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.rotation","text":"","title":"rotation"},{"location":"SDK/full/#vex.Gps.rotation--read-the-current-rotation-of-the-gps","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps.","title":"read the current rotation of the gps"},{"location":"SDK/full/#vex.Gps.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.rotation--examples","text":"# get the current rotation for the gps\\ value = gps1.rotation()","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_heading","text":"","title":"set_heading"},{"location":"SDK/full/#vex.Gps.set_heading--set-the-gps-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the gps heading to a new value"},{"location":"SDK/full/#vex.Gps.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.set_heading--examples","text":"# set the value of heading to 180 degrees\\ gps1.set_heading(180)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_location","text":"","title":"set_location"},{"location":"SDK/full/#vex.Gps.set_location--set-the-initial-location-of-the-robot","text":"This gives a hint as to the location of the robot/gps sensor when it is first initialized.\\ This can be used if in the initial position the gps cannot see the gps field strip.","title":"set the initial location of the robot"},{"location":"SDK/full/#vex.Gps.set_location--arguments","text":"x : The initial X coordinate. y : The initial Y coordinate.\\ note. both X and Y must be supplied units (optional) : The units that X and Y coordinates are specified in, default is MM angle (optional) : The initial heading of the robot. units_r (optional) : The units that angle is specified in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_location--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.set_location--examples","text":"# set the initial location of the gps\\ gps1.set_location(1000, -1000, MM, 90, DEGREES)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_origin","text":"","title":"set_origin"},{"location":"SDK/full/#vex.Gps.set_origin--set-the-origin-of-the-gps-sensor","text":"An alternate way of setting sensor origin if not provided in the Gps class constructor.","title":"set the origin of the gps sensor"},{"location":"SDK/full/#vex.Gps.set_origin--arguments","text":"x : The X location of the GPS with respect to origin of the robot. y : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_origin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.set_origin--examples","text":"# set the origin of the gps\\ gps1.set_origin(6, -6, INCHES)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/full/#vex.Gps.set_rotation--set-the-gps-rotation-to-a-new-value","text":"","title":"set the gps rotation to a new value"},{"location":"SDK/full/#vex.Gps.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ gps1.set_rotation(180)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_sensor_rotation","text":"","title":"set_sensor_rotation"},{"location":"SDK/full/#vex.Gps.set_sensor_rotation--set-the-sensor-rotation-of-the-gps-sensor-with-respect-to-the-robot","text":"This allows heading and rotation methods to return angles relative to the robot rather than the gps.","title":"set the sensor rotation of the gps sensor with respect to the robot."},{"location":"SDK/full/#vex.Gps.set_sensor_rotation--arguments","text":"value : The angle of the GPS with respect to the robot. units (optional) : The units that value is specified in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_sensor_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.set_sensor_rotation--examples","text":"# set the sensor rotation of the gps\\ gps1.set_sensor_rotation(180, DEGREES)","title":"Examples:"},{"location":"SDK/full/#vex.Gps.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/full/#vex.Gps.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Gps.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gps.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Gps.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Gps.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.Gps.x_position","text":"","title":"x_position"},{"location":"SDK/full/#vex.Gps.x_position--read-the-current-x-coordinate-of-the-gps","text":"","title":"read the current x coordinate of the gps"},{"location":"SDK/full/#vex.Gps.x_position--arguments","text":"units (optional) : The units to return the position in, default is MM","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.x_position--returns","text":"A value for the x coordinate in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.x_position--examples","text":"# get the current x coordinate for the gps\\ posx = gps1.x_position()","title":"Examples:"},{"location":"SDK/full/#vex.Gps.y_position","text":"","title":"y_position"},{"location":"SDK/full/#vex.Gps.y_position--read-the-current-y-coordinate-of-the-gps","text":"","title":"read the current y coordinate of the gps"},{"location":"SDK/full/#vex.Gps.y_position--arguments","text":"units (optional) : The units to return the position in, default is MM","title":"Arguments:"},{"location":"SDK/full/#vex.Gps.y_position--returns","text":"A value for the y coordinate in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Gps.y_position--examples","text":"# get the current y coordinate for the gps\\ posy = gps1.y_position()","title":"Examples:"},{"location":"SDK/full/#vex.Gyro","text":"","title":"Gyro"},{"location":"SDK/full/#vex.Gyro--gyro-class-create-a-new-gyro-sensor","text":"","title":"Gyro class - create a new gyro sensor"},{"location":"SDK/full/#vex.Gyro--arguments","text":"port : The 3wire port to use for the gyro sensor","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro--returns","text":"An instance of the Gyro class","title":"Returns:"},{"location":"SDK/full/#vex.Gyro--examples","text":"gyro1 = Gyro(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.calibrate","text":"","title":"calibrate"},{"location":"SDK/full/#vex.Gyro.calibrate--start-calibration-of-the-gyro","text":"Calibration should done when the gyro is not moving.","title":"Start calibration of the gyro"},{"location":"SDK/full/#vex.Gyro.calibrate--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.calibrate--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.calibrate--examples","text":"# start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Gyro.changed--register-a-function-to-be-called-when-the-value-of-the-gyro-heading-changes","text":"","title":"Register a function to be called when the value of the gyro heading changes"},{"location":"SDK/full/#vex.Gyro.changed--arguments","text":"callback : A function that will be called when the value of the gyro heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.changed--examples","text":"def foo(): print(\"gyro changed\") gyro1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/full/#vex.Gyro.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Gyro.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.heading","text":"","title":"heading"},{"location":"SDK/full/#vex.Gyro.heading--read-the-current-heading-of-the-gyro","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the gyro"},{"location":"SDK/full/#vex.Gyro.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.heading--examples","text":"# get the current heading for the gyro\\ value = gyro1.heading()","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.is_calibrating","text":"","title":"is_calibrating"},{"location":"SDK/full/#vex.Gyro.is_calibrating--check-the-calibration-status-of-the-gyro","text":"Calibration should done when the gyro is not moving.","title":"check the calibration status of the gyro"},{"location":"SDK/full/#vex.Gyro.is_calibrating--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.is_calibrating--returns","text":"True when the gyro is calibrating","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.is_calibrating--examples","text":"# start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/full/#vex.Gyro.reset_heading--reset-the-gyro-heading-to-0","text":"","title":"Reset the gyro heading to 0"},{"location":"SDK/full/#vex.Gyro.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/full/#vex.Gyro.reset_rotation--reset-the-gyro-rotation-to-0","text":"","title":"Reset the gyro rotation to 0"},{"location":"SDK/full/#vex.Gyro.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.rotation","text":"","title":"rotation"},{"location":"SDK/full/#vex.Gyro.rotation--read-the-current-rotation-of-the-gyro","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro.","title":"read the current rotation of the gyro"},{"location":"SDK/full/#vex.Gyro.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.rotation--examples","text":"# get the current rotation for the gyro\\ value = gyro1.rotation()","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.set_heading","text":"","title":"set_heading"},{"location":"SDK/full/#vex.Gyro.set_heading--set-the-gyro-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the gyro heading to a new value"},{"location":"SDK/full/#vex.Gyro.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.set_heading--examples","text":"# set the value of heading to 180 degrees\\ gyro1.set_heading(180)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/full/#vex.Gyro.set_rotation--set-the-gyro-rotation-to-a-new-value","text":"","title":"set the gyro rotation to a new value"},{"location":"SDK/full/#vex.Gyro.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ gyro1.set_rotation(180)","title":"Examples:"},{"location":"SDK/full/#vex.Gyro.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/full/#vex.Gyro.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Gyro.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.value","text":"","title":"value"},{"location":"SDK/full/#vex.Gyro.value--the-current-value-of-the-gyro","text":"This method is generally not used, see heading() and rotation()","title":"The current value of the gyro"},{"location":"SDK/full/#vex.Gyro.value--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Gyro.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Gyro.value--examples","text":"# get gyro value in range 0 - 360 degrees\\ value = gyro1.value()","title":"Examples:"},{"location":"SDK/full/#vex.Inertial","text":"","title":"Inertial"},{"location":"SDK/full/#vex.Inertial--inertial-class-a-class-for-working-with-the-inertial-sensor","text":"","title":"Inertial class - a class for working with the inertial sensor"},{"location":"SDK/full/#vex.Inertial--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial--returns","text":"An instance of the Inertial class","title":"Returns:"},{"location":"SDK/full/#vex.Inertial--examples","text":"imu1 = Inertial(Ports.PORT1)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.acceleration","text":"","title":"acceleration"},{"location":"SDK/full/#vex.Inertial.acceleration--read-the-acceleration-for-one-axis-of-the-inertial-sensor","text":"","title":"read the acceleration for one axis of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.acceleration--arguments","text":"axis : The axis to read","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.acceleration--returns","text":"A value for the acceleration of the axis in units of gravity.","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.acceleration--examples","text":"# get the acceleration for the Z axis of the inertial sensor\\ zaccel = imu1.acceleration(ZAXIS)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.calibrate","text":"","title":"calibrate"},{"location":"SDK/full/#vex.Inertial.calibrate--start-calibration-of-the-inertial-sensor","text":"Calibration should done when the inertial sensor is not moving.","title":"Start calibration of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.calibrate--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.calibrate--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.calibrate--examples","text":"# start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Inertial.changed--register-a-function-to-be-called-when-the-value-of-the-inertial-sensor-heading-changes","text":"","title":"Register a function to be called when the value of the inertial sensor heading changes"},{"location":"SDK/full/#vex.Inertial.changed--arguments","text":"callback : A function that will be called when the value of the inertial sensor heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.changed--examples","text":"def foo(): print(\"heading changed\") imu1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.collision","text":"","title":"collision"},{"location":"SDK/full/#vex.Inertial.collision--register-a-function-to-be-called-when-the-inertial-sensor-detects-a-collision","text":"","title":"Register a function to be called when the inertial sensor detects a collision"},{"location":"SDK/full/#vex.Inertial.collision--arguments","text":"callback : A function that will be called when the inertial sensor detects a collision arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.collision--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.collision--examples","text":"def foo(): print(\"collision\") imu1.collision(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/full/#vex.Inertial.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Inertial.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.gyro_rate","text":"","title":"gyro_rate"},{"location":"SDK/full/#vex.Inertial.gyro_rate--read-the-gyro-rate-for-one-axis-of-the-inertial-sensor","text":"","title":"read the gyro rate for one axis of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.gyro_rate--arguments","text":"axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.gyro_rate--returns","text":"A value for the gyro rate of the axis in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.gyro_rate--examples","text":"# get the gyro rate for the Z axis of the inertial sensor\\ zrate = imu1.gyro_rate(ZAXIS)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.heading","text":"","title":"heading"},{"location":"SDK/full/#vex.Inertial.heading--read-the-current-heading-of-the-inertial-sensor","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.heading--examples","text":"# get the current heading for the inertial sensor\\ value = imu1.heading()","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Inertial.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Inertial.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.is_calibrating","text":"","title":"is_calibrating"},{"location":"SDK/full/#vex.Inertial.is_calibrating--check-the-calibration-status-of-the-inertial-sensor","text":"Calibration should done when the inertial sensor is not moving.","title":"check the calibration status of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.is_calibrating--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.is_calibrating--returns","text":"True when the inertial sensor is calibrating","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.is_calibrating--examples","text":"# start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.orientation","text":"","title":"orientation"},{"location":"SDK/full/#vex.Inertial.orientation--read-the-orientation-for-one-axis-of-the-inertial-sensor","text":"","title":"read the orientation for one axis of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.orientation--arguments","text":"axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.orientation--returns","text":"A value for the axis orientation in the units specified.","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.orientation--examples","text":"# get the pitch value for the inertial sensor\\ pitch = imu1.orientation(OrientationType.PITCH)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/full/#vex.Inertial.reset_heading--reset-the-inertial-sensor-heading-to-0","text":"","title":"Reset the inertial sensor heading to 0"},{"location":"SDK/full/#vex.Inertial.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/full/#vex.Inertial.reset_rotation--reset-the-inertial-sensor-rotation-to-0","text":"","title":"Reset the inertial sensor rotation to 0"},{"location":"SDK/full/#vex.Inertial.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.rotation","text":"","title":"rotation"},{"location":"SDK/full/#vex.Inertial.rotation--read-the-current-rotation-of-the-inertial-sensor","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps.","title":"read the current rotation of the inertial sensor"},{"location":"SDK/full/#vex.Inertial.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.rotation--examples","text":"# get the current rotation for the inertial sensor\\ value = imu1.rotation()","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.set_heading","text":"","title":"set_heading"},{"location":"SDK/full/#vex.Inertial.set_heading--set-the-inertial-sensor-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the inertial sensor heading to a new value"},{"location":"SDK/full/#vex.Inertial.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.set_heading--examples","text":"# set the value of heading to 180 degrees\\ imu1.set_heading(180)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/full/#vex.Inertial.set_rotation--set-the-inertial-sensor-rotation-to-a-new-value","text":"","title":"set the inertial sensor rotation to a new value"},{"location":"SDK/full/#vex.Inertial.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ imu1.set_rotation(180)","title":"Examples:"},{"location":"SDK/full/#vex.Inertial.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/full/#vex.Inertial.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/full/#vex.Inertial.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Inertial.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Inertial.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Inertial.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Inertial.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.Led","text":"","title":"Led"},{"location":"SDK/full/#vex.Led--led-class-create-a-new-led","text":"","title":"Led class - create a new led"},{"location":"SDK/full/#vex.Led--arguments","text":"port : The 3wire port to use for the led","title":"Arguments:"},{"location":"SDK/full/#vex.Led--returns","text":"An instance of the Led class","title":"Returns:"},{"location":"SDK/full/#vex.Led--examples","text":"led1 = Led(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Led.off","text":"","title":"off"},{"location":"SDK/full/#vex.Led.off--turn-the-led-off","text":"","title":"Turn the led off"},{"location":"SDK/full/#vex.Led.off--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Led.off--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Led.off--examples","text":"led1.off()","title":"Examples:"},{"location":"SDK/full/#vex.Led.on","text":"","title":"on"},{"location":"SDK/full/#vex.Led.on--turn-the-led-on","text":"","title":"Turn the led on"},{"location":"SDK/full/#vex.Led.on--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Led.on--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Led.on--examples","text":"led1.on()","title":"Examples:"},{"location":"SDK/full/#vex.Led.value","text":"","title":"value"},{"location":"SDK/full/#vex.Led.value--the-current-value-of-the-led","text":"","title":"The current value of the led"},{"location":"SDK/full/#vex.Led.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Led.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.LedStateType","text":"The defined units for optical sensor led state.","title":"LedStateType"},{"location":"SDK/full/#vex.Light","text":"","title":"Light"},{"location":"SDK/full/#vex.Light--light-class-create-a-new-light-sensor","text":"","title":"Light class - create a new light sensor"},{"location":"SDK/full/#vex.Light--arguments","text":"port : The 3wire port to use for the light sensor","title":"Arguments:"},{"location":"SDK/full/#vex.Light--returns","text":"An instance of the Light class","title":"Returns:"},{"location":"SDK/full/#vex.Light--examples","text":"light1 = Light(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Light.brightness","text":"","title":"brightness"},{"location":"SDK/full/#vex.Light.brightness--the-current-brightness-of-light-falling-on-the-light-sensor","text":"The brightness of the light sensor is an estimation based on the raw value of the sensor.\\ A brightness of 0% is a raw value of approximated 900 or greater\\ A brightness of 100% is a raw value of 0","title":"The current brightness of light falling on the light sensor"},{"location":"SDK/full/#vex.Light.brightness--arguments","text":"units (optional) : The only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.Light.brightness--returns","text":"A value in the range 0 to 100%","title":"Returns:"},{"location":"SDK/full/#vex.Light.brightness--examples","text":"# get light sensor brightness in range of 0 -100%\\ value = light1.brightness()","title":"Examples:"},{"location":"SDK/full/#vex.Light.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Light.changed--register-a-function-to-be-called-when-the-value-of-the-light-sensor-changes","text":"","title":"Register a function to be called when the value of the light sensor changes"},{"location":"SDK/full/#vex.Light.changed--arguments","text":"callback : A function that will be called when the value of the light sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Light.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Light.changed--examples","text":"def foo(): print(\"light sensor changed\") light1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Light.value","text":"","title":"value"},{"location":"SDK/full/#vex.Light.value--the-current-value-of-the-light-sensor","text":"","title":"The current value of the light sensor"},{"location":"SDK/full/#vex.Light.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.Light.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Light.value--examples","text":"# get light sensor in range 0 - 4095\\ value = light1.value() # get light sensor in range 0 - 1023\\ value = light1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.Limit","text":"","title":"Limit"},{"location":"SDK/full/#vex.Limit--limit-class-create-a-new-limit-switch","text":"","title":"Limit class - create a new limit switch"},{"location":"SDK/full/#vex.Limit--arguments","text":"port : The 3wire port the limit switch is connected to","title":"Arguments:"},{"location":"SDK/full/#vex.Limit--returns","text":"An instance of the Limit class","title":"Returns:"},{"location":"SDK/full/#vex.Limit--examples","text":"limit1 = Limit(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Limit.pressed","text":"","title":"pressed"},{"location":"SDK/full/#vex.Limit.pressed--register-a-function-to-be-called-when-the-limit-switch-is-pressed","text":"","title":"Register a function to be called when the limit switch is pressed"},{"location":"SDK/full/#vex.Limit.pressed--arguments","text":"callback : A function that will be called when the limit switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Limit.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Limit.pressed--examples","text":"def foo(): print(\"switch pressed\") limit1.pressed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Limit.pressing","text":"","title":"pressing"},{"location":"SDK/full/#vex.Limit.pressing--returns-whether-the-limit-switch-is-currently-being-pressed","text":"","title":"Returns whether the limit switch is currently being pressed"},{"location":"SDK/full/#vex.Limit.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Limit.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Limit.released","text":"","title":"released"},{"location":"SDK/full/#vex.Limit.released--register-a-function-to-be-called-when-the-limit-switch-is-released","text":"","title":"Register a function to be called when the limit switch is released"},{"location":"SDK/full/#vex.Limit.released--arguments","text":"callback : A function that will be called when the limit switch is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Limit.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Limit.released--examples","text":"def foo(): print(\"switch released\") limit1.released(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Limit.value","text":"","title":"value"},{"location":"SDK/full/#vex.Limit.value--the-current-value-of-the-limit-switch","text":"","title":"The current value of the limit switch"},{"location":"SDK/full/#vex.Limit.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Limit.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.Line","text":"","title":"Line"},{"location":"SDK/full/#vex.Line--line-class-create-a-new-line-sensor","text":"","title":"Line class - create a new line sensor"},{"location":"SDK/full/#vex.Line--arguments","text":"port : The 3wire port to use for the line sensor","title":"Arguments:"},{"location":"SDK/full/#vex.Line--returns","text":"An instance of the Line class","title":"Returns:"},{"location":"SDK/full/#vex.Line--examples","text":"line1 = Line(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Line.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Line.changed--register-a-function-to-be-called-when-the-value-of-the-line-sensor-changes","text":"","title":"Register a function to be called when the value of the line sensor changes"},{"location":"SDK/full/#vex.Line.changed--arguments","text":"callback : A function that will be called when the value of the line sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Line.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Line.changed--examples","text":"def foo(): print(\"line sensor changed\") line1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Line.reflectivity","text":"","title":"reflectivity"},{"location":"SDK/full/#vex.Line.reflectivity--the-current-reflectivity-of-the-line-sensor","text":"The reflectivity of the line sensor is an estimation based on the raw value of the sensor.\\ A reflectivity of 0% is a raw value of approximated 3000 or greater\\ A reflectivity of 100% is a raw value of 0","title":"The current reflectivity of the line sensor"},{"location":"SDK/full/#vex.Line.reflectivity--arguments","text":"units (optional) : The only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.Line.reflectivity--returns","text":"A value in the range 0 to 100%","title":"Returns:"},{"location":"SDK/full/#vex.Line.reflectivity--examples","text":"# get line sensor reflectivity in range of 0 -100%\\ value = line1.reflectivity()","title":"Examples:"},{"location":"SDK/full/#vex.Line.value","text":"","title":"value"},{"location":"SDK/full/#vex.Line.value--the-current-value-of-the-line-sensor","text":"","title":"The current value of the line sensor"},{"location":"SDK/full/#vex.Line.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.Line.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Line.value--examples","text":"# get line sensor in range 0 - 4095\\ value = line1.value() # get line sensor in range 0 - 1023\\ value = line1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.MessageLink","text":"","title":"MessageLink"},{"location":"SDK/full/#vex.MessageLink--messagelink-class-a-class-for-communicating-using-vexlink","text":"","title":"MessageLink class - a class for communicating using VEXlink"},{"location":"SDK/full/#vex.MessageLink--arguments","text":"port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink--returns","text":"An instance of the MessageLink class","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink--examples","text":"link = MessageLink(Ports.PORT1, 'james', VexlinkType.MANAGER)","title":"Examples:"},{"location":"SDK/full/#vex.MessageLink.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.MessageLink.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.MessageLink.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink.is_linked","text":"","title":"is_linked"},{"location":"SDK/full/#vex.MessageLink.is_linked--return-link-status","text":"","title":"Return link status"},{"location":"SDK/full/#vex.MessageLink.is_linked--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink.is_linked--returns","text":"True if the link is active and connected to the paired brain.","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink.receive","text":"","title":"receive"},{"location":"SDK/full/#vex.MessageLink.receive--receive-the-next-message","text":"","title":"Receive the next message"},{"location":"SDK/full/#vex.MessageLink.receive--arguments","text":"timeout (optional) : An optional timeout value in mS before the function returns.","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink.receive--returns","text":"None or received message","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink.receive--examples","text":"message = link.receive()","title":"Examples:"},{"location":"SDK/full/#vex.MessageLink.received","text":"","title":"received"},{"location":"SDK/full/#vex.MessageLink.received--register-a-function-to-be-called-when-a-message-is-received","text":"If the message is omitted then the callback will be called for all messages.","title":"Register a function to be called when a message is received"},{"location":"SDK/full/#vex.MessageLink.received--arguments","text":"message (optional) : A message name for which the callback will be called callback : A function that will be called when a message is received","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink.received--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink.received--examples","text":"def cb(message, link, index, value): print(link, message, index, value) link.received('test', cb)","title":"Examples:"},{"location":"SDK/full/#vex.MessageLink.send","text":"","title":"send"},{"location":"SDK/full/#vex.MessageLink.send--send-a-message-with-optional-parameters","text":"","title":"Send a message with optional parameters"},{"location":"SDK/full/#vex.MessageLink.send--arguments","text":"message : A string, the message to send index (optional) : A int such as port number value (optional) : A float","title":"Arguments:"},{"location":"SDK/full/#vex.MessageLink.send--returns","text":"length of transmitted data or None on error","title":"Returns:"},{"location":"SDK/full/#vex.MessageLink.send--examples","text":"# send the message 'test' with no parameters\\ link.send('test') # send the message 'test' with parameters\\ link.send('test', 1, 3.14)","title":"Examples:"},{"location":"SDK/full/#vex.Motor","text":"","title":"Motor"},{"location":"SDK/full/#vex.Motor--motor-class-use-this-to-create-an-instance-of-a-v5-smart-motor","text":"","title":"Motor class - use this to create an instance of a V5 smart motor"},{"location":"SDK/full/#vex.Motor--arguments","text":"port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False","title":"Arguments:"},{"location":"SDK/full/#vex.Motor--returns","text":"A new Motor object.","title":"Returns:"},{"location":"SDK/full/#vex.Motor--examples","text":"motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)","title":"Examples:"},{"location":"SDK/full/#vex.Motor.command","text":"","title":"command"},{"location":"SDK/full/#vex.Motor.command--returns-the-last-velocity-sent-to-the-motor","text":"","title":"Returns the last velocity sent to the motor"},{"location":"SDK/full/#vex.Motor.command--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.command--returns","text":"The motor command velocity in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.current","text":"","title":"current"},{"location":"SDK/full/#vex.Motor.current--returns-the-current-the-motor-is-using","text":"","title":"Returns the current the motor is using"},{"location":"SDK/full/#vex.Motor.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.current--returns","text":"The motor current in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.direction","text":"","title":"direction"},{"location":"SDK/full/#vex.Motor.direction--returns-the-current-direction-the-motor-is-spinning-in","text":"","title":"Returns the current direction the motor is spinning in"},{"location":"SDK/full/#vex.Motor.direction--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.direction--returns","text":"The spin direction, FORWARD, REVERSE or UNDEFINED","title":"Returns:"},{"location":"SDK/full/#vex.Motor.efficiency","text":"","title":"efficiency"},{"location":"SDK/full/#vex.Motor.efficiency--returns-the-efficiency-of-the-motor","text":"","title":"Returns the efficiency of the motor"},{"location":"SDK/full/#vex.Motor.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.efficiency--returns","text":"The motor efficiency in percent","title":"Returns:"},{"location":"SDK/full/#vex.Motor.get_timeout","text":"","title":"get_timeout"},{"location":"SDK/full/#vex.Motor.get_timeout--returns-the-current-value-of-motor-timeout","text":"","title":"Returns the current value of motor timeout"},{"location":"SDK/full/#vex.Motor.get_timeout--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.get_timeout--returns","text":"The current timeout value","title":"Returns:"},{"location":"SDK/full/#vex.Motor.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Motor.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Motor.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Motor.is_done","text":"","title":"is_done"},{"location":"SDK/full/#vex.Motor.is_done--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/full/#vex.Motor.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.is_done--returns","text":"The current spin_to_position or spin_for status","title":"Returns:"},{"location":"SDK/full/#vex.Motor.is_spinning","text":"","title":"is_spinning"},{"location":"SDK/full/#vex.Motor.is_spinning--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/full/#vex.Motor.is_spinning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.is_spinning--returns","text":"The current spin_to_position or spin_for status","title":"Returns:"},{"location":"SDK/full/#vex.Motor.position","text":"","title":"position"},{"location":"SDK/full/#vex.Motor.position--returns-the-position-of-the-motor","text":"","title":"Returns the position of the motor"},{"location":"SDK/full/#vex.Motor.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.position--returns","text":"The motor position in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.power","text":"","title":"power"},{"location":"SDK/full/#vex.Motor.power--returns-the-power-the-motor-is-providing","text":"","title":"Returns the power the motor is providing"},{"location":"SDK/full/#vex.Motor.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.power--returns","text":"The motor power in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.reset_position","text":"","title":"reset_position"},{"location":"SDK/full/#vex.Motor.reset_position--reset-the-motor-position-to-0","text":"","title":"Reset the motor position to 0"},{"location":"SDK/full/#vex.Motor.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_max_torque","text":"","title":"set_max_torque"},{"location":"SDK/full/#vex.Motor.set_max_torque--set-the-maximum-torque-the-motor-will-use","text":"The torque can be set as torque, current or percent of maximum.","title":"Set the maximum torque the motor will use"},{"location":"SDK/full/#vex.Motor.set_max_torque--arguments","text":"value : the new maximum torque to use units : the units that value is passed in","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_max_torque--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_max_torque--examples","text":"# set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT)","title":"Examples:"},{"location":"SDK/full/#vex.Motor.set_position","text":"","title":"set_position"},{"location":"SDK/full/#vex.Motor.set_position--set-the-current-position-of-the-motor","text":"The position returned by the position() function is set to this value.","title":"Set the current position of the motor"},{"location":"SDK/full/#vex.Motor.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/full/#vex.Motor.set_reversed--set-the-reverse-flag-for-the-motor","text":"Setting the reverse flag will cause spin commands to run the motor in reverse.","title":"Set the reverse flag for the motor"},{"location":"SDK/full/#vex.Motor.set_reversed--arguments","text":"value : Reverse flag, True or False","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/full/#vex.Motor.set_stopping--set-the-stopping-mode-of-the-motor","text":"Setting the action for the motor when stopped.","title":"Set the stopping mode of the motor"},{"location":"SDK/full/#vex.Motor.set_stopping--arguments","text":"value : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_stopping--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/full/#vex.Motor.set_timeout--set-the-timeout-value-used-by-the-motor","text":"The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False.","title":"Set the timeout value used by the motor"},{"location":"SDK/full/#vex.Motor.set_timeout--arguments","text":"value : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_timeout--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/full/#vex.Motor.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/full/#vex.Motor.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.set_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.spin","text":"","title":"spin"},{"location":"SDK/full/#vex.Motor.spin--spin-the-motor-using-the-provided-arguments","text":"","title":"Spin the motor using the provided arguments"},{"location":"SDK/full/#vex.Motor.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.Motor.spin_for","text":"","title":"spin_for"},{"location":"SDK/full/#vex.Motor.spin_for--spin-the-motor-to-a-relative-position-using-the-provided-arguments","text":"Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments.","title":"Spin the motor to a relative position using the provided arguments"},{"location":"SDK/full/#vex.Motor.spin_for--arguments","text":"dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.spin_for--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.spin_for--examples","text":"# spin 180 degrees from the current position\\ motor1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ motor1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.Motor.spin_to_position","text":"","title":"spin_to_position"},{"location":"SDK/full/#vex.Motor.spin_to_position--spin-the-motor-to-an-absolute-position-using-the-provided-arguments","text":"Move the motor to the requested position.\\ This function supports keyword arguments.","title":"Spin the motor to an absolute position using the provided arguments"},{"location":"SDK/full/#vex.Motor.spin_to_position--arguments","text":"rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.spin_to_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.spin_to_position--examples","text":"# spin to 180 degrees\\ motor1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ motor1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ motor1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.Motor.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.Motor.stop--stop-the-motor-set-to-0-velocity-and-set-current-stopping_mode","text":"The motor will be stopped and set to COAST, BRAKE or HOLD","title":"Stop the motor, set to 0 velocity and set current stopping_mode"},{"location":"SDK/full/#vex.Motor.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor.temperature","text":"","title":"temperature"},{"location":"SDK/full/#vex.Motor.temperature--returns-the-temperature-of-the-motor","text":"","title":"Returns the temperature of the motor"},{"location":"SDK/full/#vex.Motor.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.temperature--returns","text":"The motor temperature in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Motor.timestamp--request-the-timestamp-of-last-received-message-from-the-motor","text":"","title":"Request the timestamp of last received message from the motor"},{"location":"SDK/full/#vex.Motor.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.Motor.torque","text":"","title":"torque"},{"location":"SDK/full/#vex.Motor.torque--returns-the-torque-the-motor-is-providing","text":"","title":"Returns the torque the motor is providing"},{"location":"SDK/full/#vex.Motor.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.torque--returns","text":"The motor torque in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor.velocity","text":"","title":"velocity"},{"location":"SDK/full/#vex.Motor.velocity--returns-the-velocity-of-the-motor","text":"","title":"Returns the velocity of the motor"},{"location":"SDK/full/#vex.Motor.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor.velocity--returns","text":"The motor velocity in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Motor29","text":"","title":"Motor29"},{"location":"SDK/full/#vex.Motor29--motor29-class-create-a-new-pwm-motor-output","text":"The Motor29 class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX MC29 motor controller\\ To minimize current draw, new values sent to the motor will have slew rate control applied","title":"Motor29 class - create a new pwm motor output"},{"location":"SDK/full/#vex.Motor29--arguments","text":"port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False.","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29--returns","text":"An instance of the Motor29 class","title":"Returns:"},{"location":"SDK/full/#vex.Motor29--examples","text":"motor1 = Motor29(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Motor29.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/full/#vex.Motor29.set_reversed--set-the-reversed-flag-for-the-motor","text":"","title":"Set the reversed flag for the motor"},{"location":"SDK/full/#vex.Motor29.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor29.set_reversed--examples","text":"# set motor reversed flag True\\ motor1.set_reversed(True)","title":"Examples:"},{"location":"SDK/full/#vex.Motor29.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/full/#vex.Motor29.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/full/#vex.Motor29.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29.set_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor29.spin","text":"","title":"spin"},{"location":"SDK/full/#vex.Motor29.spin--spin-the-motor-using-the-provided-arguments","text":"The motor is assumed to have a maximum velocity of 100 rpm.","title":"Spin the motor using the provided arguments"},{"location":"SDK/full/#vex.Motor29.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor29.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.Motor29.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.Motor29.stop--stop-the-motor-set-to-0-velocity","text":"","title":"Stop the motor, set to 0 velocity"},{"location":"SDK/full/#vex.Motor29.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Motor29.value","text":"","title":"value"},{"location":"SDK/full/#vex.Motor29.value--read-the-current-raw-motor-controller-pwm-value","text":"This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255","title":"Read the current raw motor controller pwm value."},{"location":"SDK/full/#vex.Motor29.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Motor29.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/full/#vex.Motor29.value--examples","text":"# get motor current pwm value\\ value = motor1.value()","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup","text":"","title":"MotorGroup"},{"location":"SDK/full/#vex.MotorGroup--motorgroup-class-use-this-to-create-a-group-of-motors","text":"","title":"MotorGroup class - use this to create a group of motors"},{"location":"SDK/full/#vex.MotorGroup--arguments","text":"One or more Motor class instances","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup--returns","text":"A new MotorGroup object.","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup--examples","text":"motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ mg1 = MotorGroup(motor1, motor2)","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup.count","text":"","title":"count"},{"location":"SDK/full/#vex.MotorGroup.count--return-the-number-of-motors-in-the-group","text":"","title":"return the number of motors in the group"},{"location":"SDK/full/#vex.MotorGroup.count--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.count--returns","text":"The number of motors in the group","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.current","text":"","title":"current"},{"location":"SDK/full/#vex.MotorGroup.current--returns-the-total-current-all-motors-are-using","text":"","title":"Returns the total current all motors are using"},{"location":"SDK/full/#vex.MotorGroup.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.current--returns","text":"The motor current in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.direction","text":"","title":"direction"},{"location":"SDK/full/#vex.MotorGroup.direction--returns-the-current-direction-the-first-motor-is-spinning-in","text":"","title":"Returns the current direction the first motor is spinning in"},{"location":"SDK/full/#vex.MotorGroup.direction--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.direction--returns","text":"The spin direction, FORWARD, REVERSE or UNDEFINED","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.efficiency","text":"","title":"efficiency"},{"location":"SDK/full/#vex.MotorGroup.efficiency--returns-the-efficiency-of-the-first-motor","text":"","title":"Returns the efficiency of the first motor"},{"location":"SDK/full/#vex.MotorGroup.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.efficiency--returns","text":"The motor efficiency in percent","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.is_done","text":"","title":"is_done"},{"location":"SDK/full/#vex.MotorGroup.is_done--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/full/#vex.MotorGroup.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.is_done--returns","text":"The current spin_to_position or spin_for status","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.is_spinning","text":"","title":"is_spinning"},{"location":"SDK/full/#vex.MotorGroup.is_spinning--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/full/#vex.MotorGroup.is_spinning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.is_spinning--returns","text":"The current spin_to_position or spin_for status","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.position","text":"","title":"position"},{"location":"SDK/full/#vex.MotorGroup.position--returns-the-position-of-the-first-motor","text":"","title":"Returns the position of the first motor"},{"location":"SDK/full/#vex.MotorGroup.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.position--returns","text":"The motor position in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.power","text":"","title":"power"},{"location":"SDK/full/#vex.MotorGroup.power--returns-the-power-the-first-motor-is-providing","text":"","title":"Returns the power the first motor is providing"},{"location":"SDK/full/#vex.MotorGroup.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.power--returns","text":"The motor power in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.reset_position","text":"","title":"reset_position"},{"location":"SDK/full/#vex.MotorGroup.reset_position--reset-the-motor-position-to-0-for-all-motors-in-the-group","text":"","title":"Reset the motor position to 0 for all motors in the group"},{"location":"SDK/full/#vex.MotorGroup.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.set_max_torque","text":"","title":"set_max_torque"},{"location":"SDK/full/#vex.MotorGroup.set_max_torque--set-the-maximum-torque-all-motors-in-the-group-will-use","text":"The torque can be set as torque, current or percent of maximum.","title":"Set the maximum torque all motors in the group will use"},{"location":"SDK/full/#vex.MotorGroup.set_max_torque--arguments","text":"value : the new maximum torque to use units : the units that value is passed in","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.set_max_torque--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.set_max_torque--examples","text":"# set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT)","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup.set_position","text":"","title":"set_position"},{"location":"SDK/full/#vex.MotorGroup.set_position--set-the-current-position-for-all-motors-in-the-group","text":"The position returned by the position() function is set to this value.","title":"Set the current position for all motors in the group"},{"location":"SDK/full/#vex.MotorGroup.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/full/#vex.MotorGroup.set_stopping--set-the-stopping-mode-for-all-motors-in-the-group","text":"Setting the action for the motor when stopped.","title":"Set the stopping mode for all motors in the group"},{"location":"SDK/full/#vex.MotorGroup.set_stopping--arguments","text":"mode : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.set_stopping--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/full/#vex.MotorGroup.set_timeout--set-the-timeout-value-used-for-all-motors-in-the-group","text":"The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False.","title":"Set the timeout value used for all motors in the group"},{"location":"SDK/full/#vex.MotorGroup.set_timeout--arguments","text":"timeout : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.set_timeout--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/full/#vex.MotorGroup.set_velocity--set-default-velocity-for-all-motors-in-the-group","text":"This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function.","title":"Set default velocity for all motors in the group"},{"location":"SDK/full/#vex.MotorGroup.set_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.set_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.spin","text":"","title":"spin"},{"location":"SDK/full/#vex.MotorGroup.spin--spin-all-motors-in-the-group-using-the-provided-arguments","text":"","title":"Spin all motors in the group using the provided arguments"},{"location":"SDK/full/#vex.MotorGroup.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.spin--examples","text":"# spin motors forward at velocity set with set_velocity\\ mg1.spin(FORWARD) # spin motors forward at 50 rpm\\ mg1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ mg1.spin(FORWARD, -20) # spin motors forwards with 100% velocity\\ mg1.spin(FORWARD, 100, PERCENT) # spin motors forwards at 50 rpm\\ mg1.spin(FORWARD, 50, RPM) # spin motors forwards at 360 dps\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup.spin_for","text":"","title":"spin_for"},{"location":"SDK/full/#vex.MotorGroup.spin_for--spin-all-motors-in-the-group-to-a-relative-position-using-the-provided-arguments","text":"Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments.","title":"Spin all motors in the group to a relative position using the provided arguments"},{"location":"SDK/full/#vex.MotorGroup.spin_for--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.spin_for--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.spin_for--examples","text":"# spin 180 degrees from the current position\\ mg1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ mg1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup.spin_to_position","text":"","title":"spin_to_position"},{"location":"SDK/full/#vex.MotorGroup.spin_to_position--spin-all-motors-in-the-group-to-an-absolute-position-using-the-provided-arguments","text":"Move the motor to the requested position.\\ This function supports keyword arguments.","title":"Spin all motors in the group to an absolute position using the provided arguments"},{"location":"SDK/full/#vex.MotorGroup.spin_to_position--arguments","text":"rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.spin_to_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.spin_to_position--examples","text":"# spin to 180 degrees\\ mg1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ mg1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ mg1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.MotorGroup.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.MotorGroup.stop--stop-all-motors-in-the-group-set-to-0-velocity-and-set-current-stopping_mode","text":"The motor will be stopped and set to COAST, BRAKE or HOLD","title":"Stop all motors in the group, set to 0 velocity and set current stopping_mode"},{"location":"SDK/full/#vex.MotorGroup.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.temperature","text":"","title":"temperature"},{"location":"SDK/full/#vex.MotorGroup.temperature--returns-the-temperature-of-the-first-motor","text":"","title":"Returns the temperature of the first motor"},{"location":"SDK/full/#vex.MotorGroup.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.temperature--returns","text":"The motor temperature in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.torque","text":"","title":"torque"},{"location":"SDK/full/#vex.MotorGroup.torque--returns-the-torque-the-first-motor-is-providing","text":"","title":"Returns the torque the first motor is providing"},{"location":"SDK/full/#vex.MotorGroup.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.torque--returns","text":"The motor torque in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorGroup.velocity","text":"","title":"velocity"},{"location":"SDK/full/#vex.MotorGroup.velocity--returns-the-velocity-of-the-first-motor","text":"","title":"Returns the velocity of the first motor"},{"location":"SDK/full/#vex.MotorGroup.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorGroup.velocity--returns","text":"The motor velocity in provided units","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor","text":"","title":"MotorVictor"},{"location":"SDK/full/#vex.MotorVictor--motorvictor-class-create-a-new-pwm-motor-output","text":"The MotorVictor class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX Victor motor controller\\","title":"MotorVictor class - create a new pwm motor output"},{"location":"SDK/full/#vex.MotorVictor--arguments","text":"port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False.","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor--returns","text":"An instance of the MotorVictor class","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor--examples","text":"motor1 = MotorVictor(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.MotorVictor.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/full/#vex.MotorVictor.set_reversed--set-the-reversed-flag-for-the-motor","text":"","title":"Set the reversed flag for the motor"},{"location":"SDK/full/#vex.MotorVictor.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor.set_reversed--examples","text":"# set motor reversed flag True\\ motor1.set_reversed(True)","title":"Examples:"},{"location":"SDK/full/#vex.MotorVictor.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/full/#vex.MotorVictor.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/full/#vex.MotorVictor.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor.set_velocity--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor.spin","text":"","title":"spin"},{"location":"SDK/full/#vex.MotorVictor.spin--spin-the-motor-using-the-provided-arguments","text":"The motor is assumed to have a maximum velocity of 100 rpm.","title":"Spin the motor using the provided arguments"},{"location":"SDK/full/#vex.MotorVictor.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS)","title":"Examples:"},{"location":"SDK/full/#vex.MotorVictor.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.MotorVictor.stop--stop-the-motor-set-to-0-velocity","text":"","title":"Stop the motor, set to 0 velocity"},{"location":"SDK/full/#vex.MotorVictor.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor.value","text":"","title":"value"},{"location":"SDK/full/#vex.MotorVictor.value--read-the-current-raw-motor-controller-pwm-value","text":"This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255","title":"Read the current raw motor controller pwm value."},{"location":"SDK/full/#vex.MotorVictor.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.MotorVictor.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/full/#vex.MotorVictor.value--examples","text":"# get motor current pwm value\\ value = motor1.value()","title":"Examples:"},{"location":"SDK/full/#vex.ObjectSizeType","text":"The defined units for distance sensor object size.","title":"ObjectSizeType"},{"location":"SDK/full/#vex.Optical","text":"","title":"Optical"},{"location":"SDK/full/#vex.Optical--optical-class-a-class-for-working-with-the-optical-sensor","text":"","title":"Optical class - a class for working with the optical sensor"},{"location":"SDK/full/#vex.Optical--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/full/#vex.Optical--returns","text":"An instance of the Optical class","title":"Returns:"},{"location":"SDK/full/#vex.Optical--examples","text":"opt1 = Optical(Ports.PORT1)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.brightness","text":"","title":"brightness"},{"location":"SDK/full/#vex.Optical.brightness--read-the-brightness-value-from-the-optical-sensor","text":"","title":"read the brightness value from the optical sensor"},{"location":"SDK/full/#vex.Optical.brightness--arguments","text":"readraw (optional) : return raw brightness value if True rather than percentage.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.brightness--returns","text":"brightness as a float in the range 0 - 100%","title":"Returns:"},{"location":"SDK/full/#vex.Optical.brightness--examples","text":"brightness = opt1.brightness()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.color","text":"","title":"color"},{"location":"SDK/full/#vex.Optical.color--read-the-color-from-the-optical-sensor","text":"","title":"read the color from the optical sensor"},{"location":"SDK/full/#vex.Optical.color--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.color--returns","text":"color as an instance of the Color class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.color--examples","text":"c = opt1.color()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_disable","text":"","title":"gesture_disable"},{"location":"SDK/full/#vex.Optical.gesture_disable--disable-gesture-mode","text":"","title":"Disable gesture mode"},{"location":"SDK/full/#vex.Optical.gesture_disable--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_disable--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_disable--examples","text":"opt1.gesture_disable()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_down","text":"","title":"gesture_down"},{"location":"SDK/full/#vex.Optical.gesture_down--register-a-function-to-be-called-when-a-gesture-down-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture down event is detected"},{"location":"SDK/full/#vex.Optical.gesture_down--arguments","text":"callback : A function that will be called when a gesture down event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_down--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_down--examples","text":"def foo(): print(\"down detected\") opt1.gesture_down(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_enable","text":"","title":"gesture_enable"},{"location":"SDK/full/#vex.Optical.gesture_enable--enable-gesture-mode","text":"","title":"Enable gesture mode"},{"location":"SDK/full/#vex.Optical.gesture_enable--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_enable--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_enable--examples","text":"opt1.gesture_enable()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_left","text":"","title":"gesture_left"},{"location":"SDK/full/#vex.Optical.gesture_left--register-a-function-to-be-called-when-a-gesture-left-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture left event is detected"},{"location":"SDK/full/#vex.Optical.gesture_left--arguments","text":"callback : A function that will be called when a gesture left event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_left--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_left--examples","text":"def foo(): print(\"left detected\") opt1.gesture_left(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_right","text":"","title":"gesture_right"},{"location":"SDK/full/#vex.Optical.gesture_right--register-a-function-to-be-called-when-a-gesture-right-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture right event is detected"},{"location":"SDK/full/#vex.Optical.gesture_right--arguments","text":"callback : A function that will be called when a gesture right event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_right--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_right--examples","text":"def foo(): print(\"right detected\") opt1.gesture_right(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.gesture_up","text":"","title":"gesture_up"},{"location":"SDK/full/#vex.Optical.gesture_up--register-a-function-to-be-called-when-a-gesture-up-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture up event is detected"},{"location":"SDK/full/#vex.Optical.gesture_up--arguments","text":"callback : A function that will be called when a gesture up event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.gesture_up--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.gesture_up--examples","text":"def foo(): print(\"up detected\") opt1.gesture_up(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.get_gesture","text":"","title":"get_gesture"},{"location":"SDK/full/#vex.Optical.get_gesture--get-gesture-data","text":"","title":"get gesture data"},{"location":"SDK/full/#vex.Optical.get_gesture--arguments","text":"newobject (optional) : create a new Gesture object to return data in","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.get_gesture--returns","text":"An object with the last gesture data","title":"Returns:"},{"location":"SDK/full/#vex.Optical.get_gesture--examples","text":"opt1.gesture_disable()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.hue","text":"","title":"hue"},{"location":"SDK/full/#vex.Optical.hue--read-the-hue-value-from-the-optical-sensor","text":"","title":"read the hue value from the optical sensor"},{"location":"SDK/full/#vex.Optical.hue--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.hue--returns","text":"hue as a float in the range 0 - 359.99 degrees","title":"Returns:"},{"location":"SDK/full/#vex.Optical.hue--examples","text":"hue = opt1.hue()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Optical.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Optical.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Optical.integration_time","text":"","title":"integration_time"},{"location":"SDK/full/#vex.Optical.integration_time--set-optical-sensor-led-to-the-requested-power","text":"","title":"set optical sensor led to the requested power"},{"location":"SDK/full/#vex.Optical.integration_time--arguments","text":"value (optional) : integration time in mS (5 to 700)","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.integration_time--returns","text":"The current integration time","title":"Returns:"},{"location":"SDK/full/#vex.Optical.integration_time--examples","text":"opt1.set_light_power(50)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.is_near_object","text":"","title":"is_near_object"},{"location":"SDK/full/#vex.Optical.is_near_object--check-to-see-if-the-optical-proximity-sensor-detects-an-object","text":"","title":"check to see if the optical proximity sensor detects an object"},{"location":"SDK/full/#vex.Optical.is_near_object--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.is_near_object--returns","text":"True if near an object","title":"Returns:"},{"location":"SDK/full/#vex.Optical.is_near_object--examples","text":"if opt1.is_near_object(): print('near object')","title":"Examples:"},{"location":"SDK/full/#vex.Optical.object_detect_threshold","text":"","title":"object_detect_threshold"},{"location":"SDK/full/#vex.Optical.object_detect_threshold--set-the-threshold-for-object-detection","text":"","title":"set the threshold for object detection"},{"location":"SDK/full/#vex.Optical.object_detect_threshold--arguments","text":"value : Number in the range 0 to 255. A value of 0 will just return current value.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.object_detect_threshold--returns","text":"current value","title":"Returns:"},{"location":"SDK/full/#vex.Optical.object_detect_threshold--examples","text":"opt1.object_detect_threshold(100)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.object_detected","text":"","title":"object_detected"},{"location":"SDK/full/#vex.Optical.object_detected--register-a-function-to-be-called-when-an-object-detected-event-occurs","text":"","title":"Register a function to be called when an object detected event occurs"},{"location":"SDK/full/#vex.Optical.object_detected--arguments","text":"callback : A function that will be called when an object detected event occurs arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.object_detected--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.object_detected--examples","text":"def foo(): print(\"object detected\") opt1.object_detected(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.object_lost","text":"","title":"object_lost"},{"location":"SDK/full/#vex.Optical.object_lost--register-a-function-to-be-called-when-an-object-lost-event-occurs","text":"","title":"Register a function to be called when an object lost event occurs"},{"location":"SDK/full/#vex.Optical.object_lost--arguments","text":"callback : A function that will be called when an object lost event occurs arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.object_lost--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Optical.object_lost--examples","text":"def foo(): print(\"object lost\") opt1.object_lost(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.rgb","text":"","title":"rgb"},{"location":"SDK/full/#vex.Optical.rgb--get-the-optical-sensor-rgb-value","text":"","title":"get the optical sensor rgb value"},{"location":"SDK/full/#vex.Optical.rgb--arguments","text":"raw (optional) : return raw or processed values","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.rgb--returns","text":"A tuple with red, green, blue and brightness","title":"Returns:"},{"location":"SDK/full/#vex.Optical.rgb--examples","text":"value=opt1.rgb()","title":"Examples:"},{"location":"SDK/full/#vex.Optical.set_light","text":"","title":"set_light"},{"location":"SDK/full/#vex.Optical.set_light--set-optical-sensor-led-on-or-of","text":"","title":"set optical sensor led on or of"},{"location":"SDK/full/#vex.Optical.set_light--arguments","text":"value : LedStateType.ON, LedStateType.OFF or power of led, 0 to 100%","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.set_light--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Optical.set_light--examples","text":"# turn on led with previous intensity\\ opt1.set_light(LedStateType.ON) # turn on led with new intensity\\ opt1.set_light(65)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.set_light_power","text":"","title":"set_light_power"},{"location":"SDK/full/#vex.Optical.set_light_power--set-optical-sensor-led-to-the-requested-power","text":"","title":"set optical sensor led to the requested power"},{"location":"SDK/full/#vex.Optical.set_light_power--arguments","text":"value : power of led, 0 to 100%","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.set_light_power--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Optical.set_light_power--examples","text":"opt1.set_light_power(50)","title":"Examples:"},{"location":"SDK/full/#vex.Optical.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Optical.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Optical.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Optical.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.OrientationType","text":"The defined units for inertial sensor orientation.","title":"OrientationType"},{"location":"SDK/full/#vex.OrientationType.PITCH","text":"pitch, orientation around the Y axis of the Inertial sensor.","title":"PITCH"},{"location":"SDK/full/#vex.OrientationType.ROLL","text":"roll, orientation around the X axis of the Inertial sensor.","title":"ROLL"},{"location":"SDK/full/#vex.OrientationType.YAW","text":"yaw, orientation around the Z axis of the Inertial sensor.","title":"YAW"},{"location":"SDK/full/#vex.PercentUnits","text":"The measurement units for percentage values.","title":"PercentUnits"},{"location":"SDK/full/#vex.PercentUnits.PERCENT","text":"A percentage unit that represents a value from 0% to 100%","title":"PERCENT"},{"location":"SDK/full/#vex.Pneumatics","text":"","title":"Pneumatics"},{"location":"SDK/full/#vex.Pneumatics--pneumatics-class-create-a-new-pneumatics-driver-class","text":"","title":"Pneumatics class - create a new pneumatics driver class"},{"location":"SDK/full/#vex.Pneumatics--arguments","text":"port : The 3wire port to use for the pneumatics","title":"Arguments:"},{"location":"SDK/full/#vex.Pneumatics--returns","text":"An instance of the Pneumatics class","title":"Returns:"},{"location":"SDK/full/#vex.Pneumatics--examples","text":"p1 = Pneumatics(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Pneumatics.close","text":"","title":"close"},{"location":"SDK/full/#vex.Pneumatics.close--set-the-pneumatics-driver-to-the-close-state","text":"","title":"Set the pneumatics driver to the close state"},{"location":"SDK/full/#vex.Pneumatics.close--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Pneumatics.close--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Pneumatics.close--examples","text":"p1.close()","title":"Examples:"},{"location":"SDK/full/#vex.Pneumatics.open","text":"","title":"open"},{"location":"SDK/full/#vex.Pneumatics.open--set-the-pneumatics-driver-to-the-open-state","text":"","title":"Set the pneumatics driver to the open state"},{"location":"SDK/full/#vex.Pneumatics.open--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Pneumatics.open--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Pneumatics.open--examples","text":"p1.open()","title":"Examples:"},{"location":"SDK/full/#vex.Pneumatics.value","text":"","title":"value"},{"location":"SDK/full/#vex.Pneumatics.value--the-current-state-of-the-pneumatics-driver","text":"","title":"The current state of the pneumatics driver"},{"location":"SDK/full/#vex.Pneumatics.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Pneumatics.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/full/#vex.Ports","text":"Smartport definitions","title":"Ports"},{"location":"SDK/full/#vex.Potentiometer","text":"","title":"Potentiometer"},{"location":"SDK/full/#vex.Potentiometer--potentiometer-class-create-a-new-potentiometer","text":"","title":"Potentiometer class - create a new potentiometer"},{"location":"SDK/full/#vex.Potentiometer--arguments","text":"port : The 3wire port to use for the potentiometer","title":"Arguments:"},{"location":"SDK/full/#vex.Potentiometer--returns","text":"An instance of the Potentiometer class","title":"Returns:"},{"location":"SDK/full/#vex.Potentiometer--examples","text":"pot1 = Potentiometer(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Potentiometer.angle","text":"","title":"angle"},{"location":"SDK/full/#vex.Potentiometer.angle--the-current-angle-of-the-potentiometer","text":"","title":"The current angle of the potentiometer"},{"location":"SDK/full/#vex.Potentiometer.angle--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Potentiometer.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Potentiometer.angle--examples","text":"# get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT)","title":"Examples:"},{"location":"SDK/full/#vex.Potentiometer.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Potentiometer.changed--register-a-function-to-be-called-when-the-value-of-the-potentiometer-changes","text":"","title":"Register a function to be called when the value of the potentiometer changes"},{"location":"SDK/full/#vex.Potentiometer.changed--arguments","text":"callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Potentiometer.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Potentiometer.changed--examples","text":"def foo(): print(\"pot changed\") pot1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Potentiometer.value","text":"","title":"value"},{"location":"SDK/full/#vex.Potentiometer.value--the-current-value-of-the-potentiometer","text":"","title":"The current value of the potentiometer"},{"location":"SDK/full/#vex.Potentiometer.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.Potentiometer.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Potentiometer.value--examples","text":"# get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.PotentiometerV2","text":"","title":"PotentiometerV2"},{"location":"SDK/full/#vex.PotentiometerV2--potentiometerv2-class-create-a-new-potentiometer","text":"","title":"PotentiometerV2 class - create a new potentiometer"},{"location":"SDK/full/#vex.PotentiometerV2--arguments","text":"port : The 3wire port to use for the potentiometer","title":"Arguments:"},{"location":"SDK/full/#vex.PotentiometerV2--returns","text":"An instance of the PotentiometerV2 class","title":"Returns:"},{"location":"SDK/full/#vex.PotentiometerV2--examples","text":"pot1 = PotentiometerV2(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.PotentiometerV2.angle","text":"","title":"angle"},{"location":"SDK/full/#vex.PotentiometerV2.angle--the-current-angle-of-the-potentiometer","text":"","title":"The current angle of the potentiometer"},{"location":"SDK/full/#vex.PotentiometerV2.angle--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.PotentiometerV2.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.PotentiometerV2.angle--examples","text":"# get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT)","title":"Examples:"},{"location":"SDK/full/#vex.PotentiometerV2.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.PotentiometerV2.changed--register-a-function-to-be-called-when-the-value-of-the-potentiometer-changes","text":"","title":"Register a function to be called when the value of the potentiometer changes"},{"location":"SDK/full/#vex.PotentiometerV2.changed--arguments","text":"callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.PotentiometerV2.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.PotentiometerV2.changed--examples","text":"def foo(): print(\"pot changed\") pot1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.PotentiometerV2.value","text":"","title":"value"},{"location":"SDK/full/#vex.PotentiometerV2.value--the-current-value-of-the-potentiometer","text":"","title":"The current value of the potentiometer"},{"location":"SDK/full/#vex.PotentiometerV2.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.PotentiometerV2.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.PotentiometerV2.value--examples","text":"# get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/full/#vex.PowerUnits","text":"The measurement units for power values.","title":"PowerUnits"},{"location":"SDK/full/#vex.PowerUnits.WATT","text":"A power unit that is measured in watts.","title":"WATT"},{"location":"SDK/full/#vex.Pwm","text":"","title":"Pwm"},{"location":"SDK/full/#vex.Pwm--pwm-class-create-a-new-pwm-output","text":"The pwm class will create raw RC style pwm waveform.\\ A pwm output of 0% corresponds to pulse width of 1.5mS every 16mS\\ A pwm output of 100% corresponds to pulse width of 2mS\\ A pwm output of -100% corresponds to pulse width of 1mS","title":"Pwm class - create a new pwm output"},{"location":"SDK/full/#vex.Pwm--arguments","text":"port : The 3wire port to use for the pwm output","title":"Arguments:"},{"location":"SDK/full/#vex.Pwm--returns","text":"An instance of the Pwm class","title":"Returns:"},{"location":"SDK/full/#vex.Pwm--examples","text":"pwm1 = Pwm(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Pwm.state","text":"","title":"state"},{"location":"SDK/full/#vex.Pwm.state--set-the-current-pwm-value-in-percent","text":"","title":"Set the current PWM value in percent."},{"location":"SDK/full/#vex.Pwm.state--arguments","text":"value : The new value for pwm output, -100 to +100 percent. units (optional) : units must be specified in PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.Pwm.state--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Pwm.state--examples","text":"# set pwm1 output to 50%\\ pwm1.state(50)","title":"Examples:"},{"location":"SDK/full/#vex.Pwm.value","text":"","title":"value"},{"location":"SDK/full/#vex.Pwm.value--read-the-current-pwm-value-in-percent","text":"","title":"Read the current PWM value in percent."},{"location":"SDK/full/#vex.Pwm.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Pwm.value--returns","text":"A value in the range -100 to +100 percent.","title":"Returns:"},{"location":"SDK/full/#vex.Pwm.value--examples","text":"# get pwm1 current value\\ value = pwm1.value()","title":"Examples:"},{"location":"SDK/full/#vex.Rotation","text":"","title":"Rotation"},{"location":"SDK/full/#vex.Rotation--rotation-class-a-class-for-working-with-the-rotation-sensor","text":"","title":"Rotation class - a class for working with the rotation sensor"},{"location":"SDK/full/#vex.Rotation--arguments","text":"port : The smartport this device is attached to reverse (optional) : set to reverse the angle and position returned by the sensor.","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation--returns","text":"An instance of the Rotation class","title":"Returns:"},{"location":"SDK/full/#vex.Rotation--examples","text":"rot1 = Rotation(Ports.PORT1)\\ rot2 = Rotation(Ports.PORT2, True)","title":"Examples:"},{"location":"SDK/full/#vex.Rotation.angle","text":"","title":"angle"},{"location":"SDK/full/#vex.Rotation.angle--the-current-angle-of-the-rotation-sensor","text":"","title":"The current angle of the rotation sensor"},{"location":"SDK/full/#vex.Rotation.angle--arguments","text":"units (optional) : A valid RotationUnits type, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.angle--examples","text":"# get rotation sensor angle angle = rot1.angle()","title":"Examples:"},{"location":"SDK/full/#vex.Rotation.changed","text":"","title":"changed"},{"location":"SDK/full/#vex.Rotation.changed--register-a-function-to-be-called-when-the-value-of-the-rotation-sensor-changes","text":"","title":"Register a function to be called when the value of the rotation sensor changes"},{"location":"SDK/full/#vex.Rotation.changed--arguments","text":"callback : A function that will be called when the value of the rotation sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.changed--examples","text":"def foo(): print(\"rotation changed\") rot1.changed(foo)","title":"Examples:"},{"location":"SDK/full/#vex.Rotation.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Rotation.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Rotation.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.position","text":"","title":"position"},{"location":"SDK/full/#vex.Rotation.position--returns-the-position-of-the-rotation-sensor","text":"The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated.","title":"Returns the position of the rotation sensor"},{"location":"SDK/full/#vex.Rotation.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.position--returns","text":"The rotation sensor in provided units","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.reset_position","text":"","title":"reset_position"},{"location":"SDK/full/#vex.Rotation.reset_position--reset-the-rotation-sensor-position-to-0","text":"","title":"Reset the rotation sensor position to 0"},{"location":"SDK/full/#vex.Rotation.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.set_position","text":"","title":"set_position"},{"location":"SDK/full/#vex.Rotation.set_position--set-the-current-position-of-the-rotation-sensor","text":"The position returned by the position() function is set to this value. The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated.","title":"Set the current position of the rotation sensor"},{"location":"SDK/full/#vex.Rotation.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/full/#vex.Rotation.set_reversed--set-the-reversed-flag-for-the-sensor","text":"Usually this would be done in the constructor.","title":"Set the reversed flag for the sensor"},{"location":"SDK/full/#vex.Rotation.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.set_reversed--examples","text":"# set reversed flag True\\ rot1.set_reversed(True)","title":"Examples:"},{"location":"SDK/full/#vex.Rotation.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Rotation.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Rotation.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.Rotation.velocity","text":"","title":"velocity"},{"location":"SDK/full/#vex.Rotation.velocity--returns-the-velocity-of-the-rotation-sensor","text":"","title":"Returns the velocity of the rotation sensor"},{"location":"SDK/full/#vex.Rotation.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/full/#vex.Rotation.velocity--returns","text":"The rotation sensor velocity in provided units","title":"Returns:"},{"location":"SDK/full/#vex.RotationUnits","text":"The measurement units for rotation values.","title":"RotationUnits"},{"location":"SDK/full/#vex.RotationUnits.DEG","text":"A rotation unit that is measured in degrees.","title":"DEG"},{"location":"SDK/full/#vex.RotationUnits.RAW","text":"A rotation unit that is measured in raw data form.","title":"RAW"},{"location":"SDK/full/#vex.RotationUnits.REV","text":"A rotation unit that is measured in revolutions.","title":"REV"},{"location":"SDK/full/#vex.SerialLink","text":"","title":"SerialLink"},{"location":"SDK/full/#vex.SerialLink--seriallink-class-a-class-for-communicating-using-vexlink","text":"","title":"SerialLink class - a class for communicating using VEXlink"},{"location":"SDK/full/#vex.SerialLink--arguments","text":"port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink--returns","text":"An instance of the SerialLink class","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink--examples","text":"link = SerialLink(Ports.PORT1, 'james', VexlinkType.MANAGER)","title":"Examples:"},{"location":"SDK/full/#vex.SerialLink.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.SerialLink.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.SerialLink.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink.is_linked","text":"","title":"is_linked"},{"location":"SDK/full/#vex.SerialLink.is_linked--return-link-status","text":"","title":"Return link status"},{"location":"SDK/full/#vex.SerialLink.is_linked--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink.is_linked--returns","text":"True if the link is active and connected to the paired brain.","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink.receive","text":"","title":"receive"},{"location":"SDK/full/#vex.SerialLink.receive--receive-data-in-the-serial-link","text":"","title":"Receive data in the serial link"},{"location":"SDK/full/#vex.SerialLink.receive--arguments","text":"length : maximum amount of data to wait for timeout (optional) : An optional timeout value in mS before the function returns.","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink.receive--returns","text":"None or bytearray with data","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink.receive--examples","text":"# wait for 128 bytes of data for 1000mS\\ buffer = link.receive(128, 1000)","title":"Examples:"},{"location":"SDK/full/#vex.SerialLink.received","text":"","title":"received"},{"location":"SDK/full/#vex.SerialLink.received--register-a-function-to-be-called-when-data-is-received","text":"This will receive a bytearray and a length indicating how much","title":"Register a function to be called when data is received"},{"location":"SDK/full/#vex.SerialLink.received--arguments","text":"callback : A function that will be called when data is received","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink.received--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink.received--examples","text":"def cb(buffer, length): print(buffer, length) link.received(cb)","title":"Examples:"},{"location":"SDK/full/#vex.SerialLink.send","text":"","title":"send"},{"location":"SDK/full/#vex.SerialLink.send--send-a-buffer-of-length-length","text":"","title":"Send a buffer of length length"},{"location":"SDK/full/#vex.SerialLink.send--arguments","text":"buffer : A string or bytearray, the message to send","title":"Arguments:"},{"location":"SDK/full/#vex.SerialLink.send--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SerialLink.send--examples","text":"# send the string 'test'\\ link.send('test') # send the bytearray 'test' with parameters\\ link.send('test', 1, 3.14)","title":"Examples:"},{"location":"SDK/full/#vex.Servo","text":"","title":"Servo"},{"location":"SDK/full/#vex.Servo--servo-class-create-a-new-servo-output","text":"The Servo class will create raw RC style pwm waveform.\\ An output of 0 corresponds to pulse width of 1.5mS every 16mS\\ An output of 50 degrees corresponds to pulse width of 2mS\\ An output of -50 degrees corresponds to pulse width of 1mS","title":"Servo class - create a new servo output"},{"location":"SDK/full/#vex.Servo--arguments","text":"port : The 3wire port to use for the servo output","title":"Arguments:"},{"location":"SDK/full/#vex.Servo--returns","text":"An instance of the Servo class","title":"Returns:"},{"location":"SDK/full/#vex.Servo--examples","text":"servo1 = Servo(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Servo.set_position","text":"","title":"set_position"},{"location":"SDK/full/#vex.Servo.set_position--set-the-servo-position","text":"","title":"Set the servo position"},{"location":"SDK/full/#vex.Servo.set_position--arguments","text":"value : The new value for the servo using the supplied units. units (optional) : The rotation units, default is PERCENT","title":"Arguments:"},{"location":"SDK/full/#vex.Servo.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Servo.set_position--examples","text":"# set servo output to 10 degrees\\ servo1.set_position(10, DEGREES)","title":"Examples:"},{"location":"SDK/full/#vex.Servo.value","text":"","title":"value"},{"location":"SDK/full/#vex.Servo.value--read-the-current-raw-servo-pwm-value","text":"This is the raw internal pwm value\\ A servo position of 0 will return 127\\ A maximum positive servo position will return 255","title":"Read the current raw servo pwm value."},{"location":"SDK/full/#vex.Servo.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Servo.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/full/#vex.Servo.value--examples","text":"# get servo1 current value\\ value = servo1.value()","title":"Examples:"},{"location":"SDK/full/#vex.Signature","text":"","title":"Signature"},{"location":"SDK/full/#vex.Signature--signature-class-a-class-for-holding-vision-sensor-signatures","text":"","title":"Signature class - a class for holding vision sensor signatures"},{"location":"SDK/full/#vex.Signature--arguments","text":"index : The signature index p0 : signature value p0 p1 : signature value p1 p2 : signature value p2 p3 : signature value p3 p4 : signature value p4 p5 : signature value p5 sigrange : signature range sigtype : signature type","title":"Arguments:"},{"location":"SDK/full/#vex.Signature--returns","text":"An instance of the Signature class","title":"Returns:"},{"location":"SDK/full/#vex.Signature--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1)","title":"Examples:"},{"location":"SDK/full/#vex.Signature.id","text":"Not used, always returns 0","title":"id"},{"location":"SDK/full/#vex.SmartDrive","text":"Bases: DriveTrain","title":"SmartDrive"},{"location":"SDK/full/#vex.SmartDrive--smartdrive-class-use-this-to-create-a-smart-drivetrain","text":"A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\ The smartdrive inherits all drivetrain functions.","title":"SmartDrive class - use this to create a smart drivetrain"},{"location":"SDK/full/#vex.SmartDrive--arguments","text":"lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used.","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive--returns","text":"A new SmartDrive object.","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive--examples","text":"# A simple two motor smart drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ imu1 = Inertial(Ports.PORT9)\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ imu1 = Inertial(Ports.PORT9)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES)","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.heading","text":"","title":"heading"},{"location":"SDK/full/#vex.SmartDrive.heading--read-the-current-heading-of-the-smartdrive","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the smartdrive"},{"location":"SDK/full/#vex.SmartDrive.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.heading--examples","text":"# get the current heading for the smartdrive\\ value = smart1.heading()","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.is_moving","text":"","title":"is_moving"},{"location":"SDK/full/#vex.SmartDrive.is_moving--returns-the-current-status-of-the-drive_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for command"},{"location":"SDK/full/#vex.SmartDrive.is_moving--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.is_moving--returns","text":"The current drive_for status","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.is_turning","text":"","title":"is_turning"},{"location":"SDK/full/#vex.SmartDrive.is_turning--returns-the-current-status-of-the-turn_to_heading-turn_to_rotation-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command"},{"location":"SDK/full/#vex.SmartDrive.is_turning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.is_turning--returns","text":"The current turn_to_heading, turn_to_rotation or turn_for status","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.rotation","text":"","title":"rotation"},{"location":"SDK/full/#vex.SmartDrive.rotation--read-the-current-rotation-of-the-smartdrive","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro.","title":"read the current rotation of the smartdrive"},{"location":"SDK/full/#vex.SmartDrive.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.rotation--examples","text":"# get the current rotation for the smartdrive\\ value = smart1.rotation()","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.set_heading","text":"","title":"set_heading"},{"location":"SDK/full/#vex.SmartDrive.set_heading--set-the-smartdrive-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the smartdrive heading to a new value"},{"location":"SDK/full/#vex.SmartDrive.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.set_heading--examples","text":"# set the value of heading to 180 degrees\\ smart1.set_heading(180)","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/full/#vex.SmartDrive.set_rotation--set-the-smartdrive-rotation-to-a-new-value","text":"","title":"set the smartdrive rotation to a new value"},{"location":"SDK/full/#vex.SmartDrive.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ smart1.set_rotation(180)","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_constant","text":"","title":"set_turn_constant"},{"location":"SDK/full/#vex.SmartDrive.set_turn_constant--set-the-turning-constant-for-the-smartdrive","text":"The smartdrive uses a simple P controller when doing turns.\\ This constant, generally known as kp, is the gain used in the equation that\\ turns angular error into motor velocity.","title":"Set the turning constant for the smartdrive"},{"location":"SDK/full/#vex.SmartDrive.set_turn_constant--arguments","text":"value : The new turn constant in the range 0.1 - 4.0, the default is 1.0","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_constant--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_direction_reverse","text":"","title":"set_turn_direction_reverse"},{"location":"SDK/full/#vex.SmartDrive.set_turn_direction_reverse--set-the-expected-turn-direction-for-positive-heading-change","text":"","title":"Set the expected turn direction for positive heading change"},{"location":"SDK/full/#vex.SmartDrive.set_turn_direction_reverse--arguments","text":"value : True or False","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_direction_reverse--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_threshold","text":"","title":"set_turn_threshold"},{"location":"SDK/full/#vex.SmartDrive.set_turn_threshold--set-the-turning-threshold-for-the-smartdrive","text":"This is the threshold value used to determine that turns are complete.\\ If this is too large then turns will not be accurate, if too small then turns ma\\ not complete.","title":"Set the turning threshold for the smartdrive"},{"location":"SDK/full/#vex.SmartDrive.set_turn_threshold--arguments","text":"value : The new turn threshold in degrees, the default for a smartdrive is 1 degree","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.set_turn_threshold--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.turn_for","text":"","title":"turn_for"},{"location":"SDK/full/#vex.SmartDrive.turn_for--turn-the-smartdrive-using-the-provided-arguments","text":"The turn_for command is similar to the motor spin_for command,\\ however, the smartdrive is commanded to turn a specified angle.","title":"turn the smartdrive using the provided arguments"},{"location":"SDK/full/#vex.SmartDrive.turn_for--arguments","text":"direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.turn_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.turn_for--examples","text":"# turn right 90 degrees\\ smart1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM)","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_heading","text":"","title":"turn_to_heading"},{"location":"SDK/full/#vex.SmartDrive.turn_to_heading--turn-the-smartdrive-to-an-absolute-position-using-the-provided-arguments","text":"The turn_to_heading command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of heading() when turning the smartdrive\\ This function supports keyword arguments.","title":"turn the smartdrive to an absolute position using the provided arguments"},{"location":"SDK/full/#vex.SmartDrive.turn_to_heading--arguments","text":"angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_heading--examples","text":"# turn to heading 180 degrees\\ smart1.turn_to_heading(180) # turn to heading 180 degrees at 25 rpm\\ smart1.turn_to_heading(180, DEGREES, 25, RPM) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, False) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_rotation","text":"","title":"turn_to_rotation"},{"location":"SDK/full/#vex.SmartDrive.turn_to_rotation--turn-the-smartdrive-to-an-absolute-position-using-the-provided-arguments","text":"The turn_to_rotation command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of rotation() when turning the smartdrive\\ This function supports keyword arguments.","title":"turn the smartdrive to an absolute position using the provided arguments"},{"location":"SDK/full/#vex.SmartDrive.turn_to_rotation--arguments","text":"angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.SmartDrive.turn_to_rotation--examples","text":"# turn to rotation 180 degrees\\ smart1.turn_to_rotation(180) # turn to rotation 400 degrees at 25 rpm\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, False) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, wait=False)","title":"Examples:"},{"location":"SDK/full/#vex.Sonar","text":"","title":"Sonar"},{"location":"SDK/full/#vex.Sonar--sonar-class-create-a-new-sonar-ultrasonic-sensor","text":"A sonar uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h\\ connect the wire labeled \"output\" to the lower 3wire port, eg. a","title":"Sonar class - create a new sonar (ultrasonic) sensor"},{"location":"SDK/full/#vex.Sonar--arguments","text":"port : The 3wire port to use for the sonar sensor","title":"Arguments:"},{"location":"SDK/full/#vex.Sonar--returns","text":"An instance of the Sonar class","title":"Returns:"},{"location":"SDK/full/#vex.Sonar--examples","text":"sonar1 = Sonar(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/full/#vex.Sonar.distance","text":"","title":"distance"},{"location":"SDK/full/#vex.Sonar.distance--the-current-distance-the-sonar-is-detecting-an-object-at","text":"The sonar will return a large positive number if no object is detected in range.","title":"The current distance the sonar is detecting an object at."},{"location":"SDK/full/#vex.Sonar.distance--arguments","text":"units : The distance units to return the position value in.","title":"Arguments:"},{"location":"SDK/full/#vex.Sonar.distance--returns","text":"A value for sonar distance in the specified units.","title":"Returns:"},{"location":"SDK/full/#vex.Sonar.distance--examples","text":"# get sonar distance in mm\\ value = sonar1.distance(MM)","title":"Examples:"},{"location":"SDK/full/#vex.Sonar.found_object","text":"","title":"found_object"},{"location":"SDK/full/#vex.Sonar.found_object--check-for-an-object-in-the-range-0-1000mm","text":"The sonar will return True if an object is detected closer than 1000mm.","title":"Check for an object in the range 0 - 1000mm"},{"location":"SDK/full/#vex.Sonar.found_object--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Sonar.found_object--returns","text":"True of an object is detected.","title":"Returns:"},{"location":"SDK/full/#vex.Sonar.found_object--examples","text":"# is an object closer than 1000mm\\ if sonar1.found_object():\\ print(\"object found\")","title":"Examples:"},{"location":"SDK/full/#vex.Sonar.value","text":"","title":"value"},{"location":"SDK/full/#vex.Sonar.value--the-current-value-of-the-sonar","text":"This method has no practical use, see distance.","title":"The current value of the sonar"},{"location":"SDK/full/#vex.Sonar.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/full/#vex.Sonar.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/full/#vex.Sonar.value--examples","text":"# get sonar raw value\\ value = sonar1.value()","title":"Examples:"},{"location":"SDK/full/#vex.TemperatureUnits","text":"The measurement units for temperature values.","title":"TemperatureUnits"},{"location":"SDK/full/#vex.TemperatureUnits.CELSIUS","text":"A temperature unit that is measured in celsius.","title":"CELSIUS"},{"location":"SDK/full/#vex.TemperatureUnits.FAHRENHEIT","text":"A temperature unit that is measured in fahrenheit.","title":"FAHRENHEIT"},{"location":"SDK/full/#vex.Thread","text":"","title":"Thread"},{"location":"SDK/full/#vex.Thread--thread-class-create-a-new-thread-of-execution","text":"This class is used to create a new thread using the vexos scheduler.","title":"Thread class - create a new thread of execution"},{"location":"SDK/full/#vex.Thread--arguments","text":"callback : A function used as the entry point for the thread arg (optional) : A tuple that is used to pass arguments to the thread entry function.","title":"Arguments:"},{"location":"SDK/full/#vex.Thread--returns","text":"An instance of the Thread class","title":"Returns:"},{"location":"SDK/full/#vex.Thread--examples","text":"def foo(): print('the callback was called') t1 = Thread( foo ) def bar(p1, p2): print('the callback was called with ', p1, ' and ', p2) t2 = Thread( bar, (1,2) )","title":"Examples:"},{"location":"SDK/full/#vex.Thread.sleep_for","text":"","title":"sleep_for"},{"location":"SDK/full/#vex.Thread.sleep_for--sleep-a-thread","text":"","title":"sleep a thread"},{"location":"SDK/full/#vex.Thread.sleep_for--arguments","text":"duration : time to sleep this thread for units (optional) : units of time, default is MSEC","title":"Arguments:"},{"location":"SDK/full/#vex.Thread.sleep_for--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Thread.stop","text":"","title":"stop"},{"location":"SDK/full/#vex.Thread.stop--stop-a-thread","text":"","title":"Stop a thread"},{"location":"SDK/full/#vex.Thread.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Thread.stop--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.ThreeWireType","text":"The defined units for 3-wire devices.","title":"ThreeWireType"},{"location":"SDK/full/#vex.ThreeWireType.ACCELEROMETER","text":"A 3-wire sensor that is defined as a accelerometer.","title":"ACCELEROMETER"},{"location":"SDK/full/#vex.ThreeWireType.ANALOG_IN","text":"A 3-wire sensor that is defined as an analog input.","title":"ANALOG_IN"},{"location":"SDK/full/#vex.ThreeWireType.ANALOG_OUT","text":"A 3-wire sensor that is defined as an analog output.","title":"ANALOG_OUT"},{"location":"SDK/full/#vex.ThreeWireType.DIGITAL_IN","text":"A 3-wire sensor that is defined as an digital input.","title":"DIGITAL_IN"},{"location":"SDK/full/#vex.ThreeWireType.DIGITAL_OUT","text":"A 3-wire sensor that is defined as an digital output.","title":"DIGITAL_OUT"},{"location":"SDK/full/#vex.ThreeWireType.ENCODER","text":"A 3-wire sensor that is defined as a quadrature encoder.","title":"ENCODER"},{"location":"SDK/full/#vex.ThreeWireType.GYRO","text":"A 3-wire sensor that is defined as a yaw rate gyro.","title":"GYRO"},{"location":"SDK/full/#vex.ThreeWireType.LIGHT_SENSOR","text":"A 3-wire sensor that is defined as a light sensor.","title":"LIGHT_SENSOR"},{"location":"SDK/full/#vex.ThreeWireType.LINE_SENSOR","text":"A 3-wire sensor that is defined as a line sensor.","title":"LINE_SENSOR"},{"location":"SDK/full/#vex.ThreeWireType.MOTOR","text":"A 3-wire sensor that is defined as a legacy vex motor.","title":"MOTOR"},{"location":"SDK/full/#vex.ThreeWireType.POTENTIOMETER","text":"A 3-wire sensor that is defined as a potentiometer.","title":"POTENTIOMETER"},{"location":"SDK/full/#vex.ThreeWireType.SERVO","text":"A 3-wire sensor that is defined as a legacy vex servo.","title":"SERVO"},{"location":"SDK/full/#vex.ThreeWireType.SLEW_MOTOR","text":"A 3-wire sensor that is defined as a legacy vex motor using slew rate control.","title":"SLEW_MOTOR"},{"location":"SDK/full/#vex.ThreeWireType.SONAR","text":"A 3-wire sensor that is defined as an ultrasonic sensor (sonar)","title":"SONAR"},{"location":"SDK/full/#vex.ThreeWireType.SWITCH","text":"A 3-wire sensor that is defined as a switch.","title":"SWITCH"},{"location":"SDK/full/#vex.TimeUnits","text":"The measurement units for time values.","title":"TimeUnits"},{"location":"SDK/full/#vex.TimeUnits.MSEC","text":"A time unit that is measured in milliseconds.","title":"MSEC"},{"location":"SDK/full/#vex.TimeUnits.SEC","text":"A time unit that is measured in seconds.","title":"SEC"},{"location":"SDK/full/#vex.TimeUnits.SECONDS","text":"A time unit that is measured in seconds.","title":"SECONDS"},{"location":"SDK/full/#vex.Timer","text":"","title":"Timer"},{"location":"SDK/full/#vex.Timer--timer-class-create-a-new-timer","text":"This class is used to create a new timer\\ A timer can be used to measure time, access the system time and run a function at a time in the future.","title":"Timer class - create a new timer"},{"location":"SDK/full/#vex.Timer--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer--returns","text":"An instance of the Timer class","title":"Returns:"},{"location":"SDK/full/#vex.Timer--examples","text":"t1 = Timer()","title":"Examples:"},{"location":"SDK/full/#vex.Timer.clear","text":"","title":"clear"},{"location":"SDK/full/#vex.Timer.clear--reset-the-timer-to-0","text":"","title":"reset the timer to 0"},{"location":"SDK/full/#vex.Timer.clear--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.clear--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Timer.clear--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Timer.event","text":"","title":"event"},{"location":"SDK/full/#vex.Timer.event--register-a-function-to-be-called-in-the-future","text":"","title":"register a function to be called in the future"},{"location":"SDK/full/#vex.Timer.event--arguments","text":"callback : A function that will called after the supplied delay delay : The delay before the callback function is called. arg (optional) : A tuple that is used to pass arguments to the function.","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.event--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Timer.event--examples","text":"def foo(arg): print('timer has expired ', arg) t1 = Timer()\\ t1.event(foo, 1000, ('Hello',))","title":"Examples:"},{"location":"SDK/full/#vex.Timer.reset","text":"","title":"reset"},{"location":"SDK/full/#vex.Timer.reset--reset-the-timer-to-0","text":"","title":"reset the timer to 0"},{"location":"SDK/full/#vex.Timer.reset--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.reset--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.Timer.reset--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Timer.system","text":"","title":"system"},{"location":"SDK/full/#vex.Timer.system--return-the-system-time-in-ms","text":"","title":"return the system time in mS"},{"location":"SDK/full/#vex.Timer.system--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.system--returns","text":"system time in mS","title":"Returns:"},{"location":"SDK/full/#vex.Timer.system--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Timer.system_high_res","text":"","title":"system_high_res"},{"location":"SDK/full/#vex.Timer.system_high_res--return-the-high-resolution-system-time-in-us","text":"","title":"return the high resolution system time in uS"},{"location":"SDK/full/#vex.Timer.system_high_res--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.system_high_res--returns","text":"system time in uS","title":"Returns:"},{"location":"SDK/full/#vex.Timer.system_high_res--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Timer.time","text":"","title":"time"},{"location":"SDK/full/#vex.Timer.time--return-the-current-time-for-this-timer","text":"","title":"return the current time for this timer"},{"location":"SDK/full/#vex.Timer.time--arguments","text":"units (optional) : the units that the time should be returned in, default is MSEC","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.time--returns","text":"An the current time in specified units.","title":"Returns:"},{"location":"SDK/full/#vex.Timer.time--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.Timer.value","text":"","title":"value"},{"location":"SDK/full/#vex.Timer.value--return-the-current-time-for-this-timer-in-seconds","text":"","title":"return the current time for this timer in seconds"},{"location":"SDK/full/#vex.Timer.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Timer.value--returns","text":"An the current time in seconds.","title":"Returns:"},{"location":"SDK/full/#vex.Timer.value--examples","text":"","title":"Examples:"},{"location":"SDK/full/#vex.TorqueUnits","text":"The measurement units for torque values.","title":"TorqueUnits"},{"location":"SDK/full/#vex.TorqueUnits.INLB","text":"A torque unit that is measured in Inch Pounds.","title":"INLB"},{"location":"SDK/full/#vex.TorqueUnits.NM","text":"A torque unit that is measured in Newton Meters.","title":"NM"},{"location":"SDK/full/#vex.Triport","text":"","title":"Triport"},{"location":"SDK/full/#vex.Triport.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Triport.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Triport.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Triport.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Triport.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Triport.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/full/#vex.Triport.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Triport.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.TurnType","text":"Bases: vexEnum The defined units for turn values.","title":"TurnType"},{"location":"SDK/full/#vex.TurnType.LEFT","text":"A turn unit that is defined as left turning.","title":"LEFT"},{"location":"SDK/full/#vex.TurnType.RIGHT","text":"A turn unit that is defined as right turning.","title":"RIGHT"},{"location":"SDK/full/#vex.TurnType.UNDEFINED","text":"A turn unit unit used when direction is not known.","title":"UNDEFINED"},{"location":"SDK/full/#vex.VelocityUnits","text":"The measurement units for velocity values.","title":"VelocityUnits"},{"location":"SDK/full/#vex.VelocityUnits.DPS","text":"A velocity unit that is measured in degrees per second.","title":"DPS"},{"location":"SDK/full/#vex.VelocityUnits.PERCENT","text":"A velocity unit that is measured in percentage.","title":"PERCENT"},{"location":"SDK/full/#vex.VelocityUnits.RPM","text":"A velocity unit that is measured in rotations per minute.","title":"RPM"},{"location":"SDK/full/#vex.VexlinkType","text":"The defined units for vexlink types.","title":"VexlinkType"},{"location":"SDK/full/#vex.VexlinkType.GENERIC","text":"A vexlink type that is defined as a raw unmanaged link.","title":"GENERIC"},{"location":"SDK/full/#vex.VexlinkType.MANAGER","text":"A vexlink type that is defined as the manager radio.","title":"MANAGER"},{"location":"SDK/full/#vex.VexlinkType.WORKER","text":"A vexlink type that is defined as the worker radio.","title":"WORKER"},{"location":"SDK/full/#vex.Vision","text":"","title":"Vision"},{"location":"SDK/full/#vex.Vision--vision-class-a-class-for-working-with-the-vision-sensor","text":"","title":"Vision class - a class for working with the vision sensor"},{"location":"SDK/full/#vex.Vision--arguments","text":"port : The smartport this device is attached to brightness (optional) : set the brightness value for the vision sensor sigs (optional) : one or more signature objects","title":"Arguments:"},{"location":"SDK/full/#vex.Vision--returns","text":"An instance of the Vision class","title":"Returns:"},{"location":"SDK/full/#vex.Vision--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1)","title":"Examples:"},{"location":"SDK/full/#vex.Vision.installed","text":"","title":"installed"},{"location":"SDK/full/#vex.Vision.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/full/#vex.Vision.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Vision.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/full/#vex.Vision.take_snapshot","text":"","title":"take_snapshot"},{"location":"SDK/full/#vex.Vision.take_snapshot--request-the-vision-sensor-to-filter-latest-objects-to-match-signature-or-code","text":"","title":"Request the vision sensor to filter latest objects to match signature or code"},{"location":"SDK/full/#vex.Vision.take_snapshot--arguments","text":"index : A signature, code or signature id. count (optional) : the maximum number of objects to obtain. default is 1.","title":"Arguments:"},{"location":"SDK/full/#vex.Vision.take_snapshot--returns","text":"tuple of VisionObject or None if nothing is available","title":"Returns:"},{"location":"SDK/full/#vex.Vision.take_snapshot--examples","text":"# look for and return 1 object matching SIG_1\\ objects = vision1.take_snapshot(SIG_1) # look for and return a maximum of 4 objects matching SIG_1\\ objects = vision1.take_snapshot(SIG_1, 4)","title":"Examples:"},{"location":"SDK/full/#vex.Vision.timestamp","text":"","title":"timestamp"},{"location":"SDK/full/#vex.Vision.timestamp--request-the-timestamp-of-last-received-message-from-the-vision-sensor","text":"","title":"Request the timestamp of last received message from the vision sensor"},{"location":"SDK/full/#vex.Vision.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.Vision.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/full/#vex.VisionObject","text":"A vision object, not instantiated by user programs","title":"VisionObject"},{"location":"SDK/full/#vex.VoltageUnits","text":"The measurement units for voltage values.","title":"VoltageUnits"},{"location":"SDK/full/#vex.VoltageUnits.MV","text":"A voltage unit that is measured in millivolts.","title":"MV"},{"location":"SDK/full/#vex.VoltageUnits.VOLT","text":"A voltage unit that is measured in volts.","title":"VOLT"},{"location":"SDK/full/#vex.vexEnum","text":"Base class for all enumerated types","title":"vexEnum"},{"location":"SDK/full/#vex.clear_errors","text":"","title":"clear_errors"},{"location":"SDK/full/#vex.clear_errors--clear-any-brain-on-screen-errors","text":"","title":"clear any brain on screen errors"},{"location":"SDK/full/#vex.clear_errors--arguments","text":"None","title":"Arguments:"},{"location":"SDK/full/#vex.clear_errors--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.info","text":"","title":"info"},{"location":"SDK/full/#vex.info--return-a-string-with-vex-python-version-information","text":"","title":"return a string with VEX Python version information"},{"location":"SDK/full/#vex.on_screen_errors","text":"","title":"on_screen_errors"},{"location":"SDK/full/#vex.on_screen_errors--enable-or-disable-the-display-of-brain-on-screen-errors","text":"","title":"enable or disable the display of brain on screen errors"},{"location":"SDK/full/#vex.on_screen_errors--arguments","text":"value : True or False","title":"Arguments:"},{"location":"SDK/full/#vex.on_screen_errors--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.sleep","text":"","title":"sleep"},{"location":"SDK/full/#vex.sleep--delay-the-current-thread-for-the-provided-number-of-seconds-or-milliseconds","text":"","title":"delay the current thread for the provided number of seconds or milliseconds."},{"location":"SDK/full/#vex.sleep--arguments","text":"duration: The number of seconds or milliseconds to sleep for units: The units of duration, optional, default is milliseconds","title":"Arguments:"},{"location":"SDK/full/#vex.sleep--returns","text":"None","title":"Returns:"},{"location":"SDK/full/#vex.wait","text":"","title":"wait"},{"location":"SDK/full/#vex.wait--delay-the-current-thread-for-the-provided-number-of-seconds-or-milliseconds","text":"","title":"delay the current thread for the provided number of seconds or milliseconds."},{"location":"SDK/full/#vex.wait--arguments","text":"duration: The number of seconds or milliseconds to sleep for units: The units of duration, optional, default is milliseconds","title":"Arguments:"},{"location":"SDK/full/#vex.wait--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/","text":"Motors This section documents the classes related to VEX smart motors and drivetrain control in DishPy. Motor vex.Motor Motor class - use this to create an instance of a V5 smart motor Arguments: port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False Returns: A new Motor object. Examples: motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True) Source code in vex.py 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 class Motor : '''### Motor class - use this to create an instance of a V5 smart motor #### Arguments: port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False #### Returns: A new Motor object. #### Examples: motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True) ''' def __init__ ( self , port : int , * args ): self . _index = port self . _timeout = 10000 self . _velocity = 50 self . _mode = BrakeType . COAST self . _brakeMode = BrakeType . COAST self . _spinMode = False def installed ( self ): '''### Check for device connection #### Arguments: None #### Returns: True or False ''' return True def timestamp ( self ): '''### Request the timestamp of last received message from the motor #### Arguments: None #### Returns: timestamp of the last status packet in mS ''' return 0 def set_velocity ( self , value : vexnumber , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value : bool ): '''### Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. #### Arguments: value : Reverse flag, True or False #### Returns: None ''' pass def set_stopping ( self , value : BrakeType . BrakeType ): '''### Set the stopping mode of the motor Setting the action for the motor when stopped. #### Arguments: value : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass def reset_position ( self ): '''### Reset the motor position to 0 #### Arguments: None #### Returns: None ''' pass def set_position ( self , value : vexnumber , units = RotationUnits . DEG ): '''### Set the current position of the motor The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' pass def set_timeout ( self , value : vexnumber , units = TimeUnits . MSEC ): '''### Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' self . _timeout = value def get_timeout ( self ): '''### Returns the current value of motor timeout #### Arguments: None #### Returns: The current timeout value ''' return self . _timeout def spin ( self , direction : DirectionType . DirectionType , * args , ** kwargs ): '''### Spin the motor using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def spin_to_position ( self , rotation : vexnumber , * args , ** kwargs ): '''### Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ motor1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ motor1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ motor1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, wait=False) ''' pass def spin_for ( self , direction : DirectionType . DirectionType , rot_or_time : vexnumber , * args , ** kwargs ): '''### Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ motor1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ motor1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' pass def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True def is_spinning_mode ( self ): return False def stop ( self , mode = None ): '''### Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass def set_max_torque ( self , value , units : TorquePercentCurrentUnits ): '''### Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' pass def direction ( self ): '''### Returns the current direction the motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return DirectionType . FORWARD def position ( self , * args ): '''### Returns the position of the motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return 20 def velocity ( self , * args ): '''### Returns the velocity of the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return 2 def current ( self , * args ): '''### Returns the current the motor is using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' return 1 def power ( self , * args ): '''### Returns the power the motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return 1 def torque ( self , * args ): '''### Returns the torque the motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 1 def efficiency ( self , * args ): '''### Returns the efficiency of the motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 1 def temperature ( self , * args ): '''### Returns the temperature of the motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 1 def command ( self , * args ): '''### Returns the last velocity sent to the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor command velocity in provided units ''' return self . _velocity command ( * args ) Returns the last velocity sent to the motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor command velocity in provided units Source code in vex.py 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 def command ( self , * args ): '''### Returns the last velocity sent to the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor command velocity in provided units ''' return self . _velocity current ( * args ) Returns the current the motor is using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The motor current in provided units Source code in vex.py 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 def current ( self , * args ): '''### Returns the current the motor is using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' return 1 direction () Returns the current direction the motor is spinning in Arguments: None Returns: The spin direction, FORWARD, REVERSE or UNDEFINED Source code in vex.py 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 def direction ( self ): '''### Returns the current direction the motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return DirectionType . FORWARD efficiency ( * args ) Returns the efficiency of the motor Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent Source code in vex.py 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 def efficiency ( self , * args ): '''### Returns the efficiency of the motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 1 get_timeout () Returns the current value of motor timeout Arguments: None Returns: The current timeout value Source code in vex.py 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 def get_timeout ( self ): '''### Returns the current value of motor timeout #### Arguments: None #### Returns: The current timeout value ''' return self . _timeout installed () Check for device connection Arguments: None Returns: True or False Source code in vex.py 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 def installed ( self ): '''### Check for device connection #### Arguments: None #### Returns: True or False ''' return True is_done () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status Source code in vex.py 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True is_spinning () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status Source code in vex.py 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True position ( * args ) Returns the position of the motor Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The motor position in provided units Source code in vex.py 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 def position ( self , * args ): '''### Returns the position of the motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return 20 power ( * args ) Returns the power the motor is providing Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The motor power in provided units Source code in vex.py 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 def power ( self , * args ): '''### Returns the power the motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return 1 reset_position () Reset the motor position to 0 Arguments: None Returns: None Source code in vex.py 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 def reset_position ( self ): '''### Reset the motor position to 0 #### Arguments: None #### Returns: None ''' pass set_max_torque ( value , units ) Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. Arguments: value : the new maximum torque to use units : the units that value is passed in Returns: None Examples: # set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) Source code in vex.py 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 def set_max_torque ( self , value , units : TorquePercentCurrentUnits ): '''### Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' pass set_position ( value , units = RotationUnits . DEG ) Set the current position of the motor The position returned by the position() function is set to this value. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None Source code in vex.py 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 def set_position ( self , value : vexnumber , units = RotationUnits . DEG ): '''### Set the current position of the motor The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' pass set_reversed ( value ) Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. Arguments: value : Reverse flag, True or False Returns: None Source code in vex.py 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 def set_reversed ( self , value : bool ): '''### Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. #### Arguments: value : Reverse flag, True or False #### Returns: None ''' pass set_stopping ( value ) Set the stopping mode of the motor Setting the action for the motor when stopped. Arguments: value : The stopping mode, COAST, BRAKE or HOLD Returns: None Source code in vex.py 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 def set_stopping ( self , value : BrakeType . BrakeType ): '''### Set the stopping mode of the motor Setting the action for the motor when stopped. #### Arguments: value : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass set_timeout ( value , units = TimeUnits . MSEC ) Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None Source code in vex.py 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 def set_timeout ( self , value : vexnumber , units = TimeUnits . MSEC ): '''### Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' self . _timeout = value set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 def set_velocity ( self , value : vexnumber , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value spin ( direction , * args , ** kwargs ) Spin the motor using the provided arguments Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 def spin ( self , direction : DirectionType . DirectionType , * args , ** kwargs ): '''### Spin the motor using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass spin_for ( direction , rot_or_time , * args , ** kwargs ) Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments. Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin 180 degrees from the current position\\ motor1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ motor1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) Source code in vex.py 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 def spin_for ( self , direction : DirectionType . DirectionType , rot_or_time : vexnumber , * args , ** kwargs ): '''### Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ motor1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ motor1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' pass spin_to_position ( rotation , * args , ** kwargs ) Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\ This function supports keyword arguments. Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin to 180 degrees\\ motor1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ motor1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ motor1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, wait=False) Source code in vex.py 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 def spin_to_position ( self , rotation : vexnumber , * args , ** kwargs ): '''### Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ motor1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ motor1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ motor1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, wait=False) ''' pass stop ( mode = None ) Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None Source code in vex.py 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 def stop ( self , mode = None ): '''### Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass temperature ( * args ) Returns the temperature of the motor Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units Source code in vex.py 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 def temperature ( self , * args ): '''### Returns the temperature of the motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 1 timestamp () Request the timestamp of last received message from the motor Arguments: None Returns: timestamp of the last status packet in mS Source code in vex.py 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 def timestamp ( self ): '''### Request the timestamp of last received message from the motor #### Arguments: None #### Returns: timestamp of the last status packet in mS ''' return 0 torque ( * args ) Returns the torque the motor is providing Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units Source code in vex.py 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 def torque ( self , * args ): '''### Returns the torque the motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 1 velocity ( * args ) Returns the velocity of the motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor velocity in provided units Source code in vex.py 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 def velocity ( self , * args ): '''### Returns the velocity of the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return 2 MotorGroup vex.MotorGroup MotorGroup class - use this to create a group of motors Arguments: One or more Motor class instances Returns: A new MotorGroup object. Examples: motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ mg1 = MotorGroup(motor1, motor2) Source code in vex.py 5740 5741 5742 5743 5744 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 5774 5775 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 5790 5791 5792 5793 5794 5795 5796 5797 5798 5799 5800 5801 5802 5803 5804 5805 5806 5807 5808 5809 5810 5811 5812 5813 5814 5815 5816 5817 5818 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 5883 5884 5885 5886 5887 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 5937 5938 5939 5940 5941 5942 5943 5944 5945 5946 5947 5948 5949 5950 5951 5952 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 5982 5983 5984 5985 5986 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 6033 6034 6035 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 6050 6051 6052 6053 6054 6055 6056 6057 6058 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 6069 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 6081 6082 6083 6084 6085 6086 6087 6088 6089 6090 6091 6092 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 6103 6104 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 6120 6121 6122 6123 6124 6125 6126 6127 6128 6129 6130 6131 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 6144 6145 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 6156 6157 6158 6159 6160 6161 6162 6163 6164 6165 6166 6167 6168 class MotorGroup : '''### MotorGroup class - use this to create a group of motors #### Arguments: One or more Motor class instances #### Returns: A new MotorGroup object. #### Examples: motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ mg1 = MotorGroup(motor1, motor2) ''' def __init__ ( self , * argv ): self . _motors = list () for arg in argv : if isinstance ( arg , Motor ): self . _motors . append ( arg ) self . _timeout = sys . maxsize # ---------------------------------------------------------------------------- def count ( self ): '''### return the number of motors in the group #### Arguments: None #### Returns: The number of motors in the group ''' return len ( self . _motors ) # ---------------------------------------------------------------------------- def set_velocity ( self , velocity , units = None ): '''### Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' for m in self . _motors : m . set_velocity ( velocity , units ) # ---------------------------------------------------------------------------- def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors in the group Setting the action for the motor when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' for m in self . _motors : m . set_stopping ( mode ) # ---------------------------------------------------------------------------- def reset_position ( self ): '''### Reset the motor position to 0 for all motors in the group #### Arguments: None #### Returns: None ''' for m in self . _motors : m . reset_position () # ---------------------------------------------------------------------------- def set_position ( self , value , units = None ): '''### Set the current position for all motors in the group The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' for m in self . _motors : m . set_position ( value , units ) # ---------------------------------------------------------------------------- def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' if units == TimeUnits . SECONDS and timeout > 0 : if timeout > 100000 : timeout = 100000 self . _timeout = timeout * 1000 elif timeout <= 0 : self . _timeout = sys . maxsize else : self . _timeout = timeout for m in self . _motors : m . set_timeout ( timeout , units ) # ---------------------------------------------------------------------------- def spin ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Spin all motors in the group using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motors forward at velocity set with set_velocity\\\\ mg1.spin(FORWARD)\\n # spin motors forward at 50 rpm\\\\ mg1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ mg1.spin(FORWARD, -20)\\n # spin motors forwards with 100% velocity\\\\ mg1.spin(FORWARD, 100, PERCENT)\\n # spin motors forwards at 50 rpm\\\\ mg1.spin(FORWARD, 50, RPM)\\n # spin motors forwards at 360 dps\\\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' for m in self . _motors : m . spin ( direction , velocity , units ) # ---------------------------------------------------------------------------- def spin_to_position ( self , rotation , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ mg1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ mg1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ mg1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, wait=False) ''' for m in self . _motors : m . spin_to_position ( rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False # ---------------------------------------------------------------------------- def __spin_for_distance ( self , direction , rotation , units , velocity , units_v , wait ): for m in self . _motors : m . spin_for ( direction , rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False # ---------------------------------------------------------------------------- def __spin_for_time ( self , direction , time , units , velocity , units_v ): for m in self . _motors : if m == self . _motors [ - 1 ]: m . spin_for ( direction , time , units , velocity , units_v ) else : m . spin ( direction , velocity , units_v ) self . stop () # ---------------------------------------------------------------------------- def spin_for ( self , direction , rotation , units : RotationTimeUnits = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ mg1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ mg1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' if isinstance ( units , TimeUnits ): time = rotation self . __spin_for_time ( direction , time , units , velocity , units_v ) else : self . __spin_for_distance ( direction , rotation , units , velocity , units_v , wait ) # ---------------------------------------------------------------------------- def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' isAnyMotorSpinning = False for m in self . _motors : isAnyMotorSpinning = isAnyMotorSpinning or m . is_spinning () return isAnyMotorSpinning # ---------------------------------------------------------------------------- def is_spinning_mode ( self ): isAnyMotorSpinningMode = False for m in self . _motors : isAnyMotorSpinningMode = isAnyMotorSpinningMode or m . is_spinning_mode () return isAnyMotorSpinningMode # ---------------------------------------------------------------------------- def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return not self . is_spinning () # ---------------------------------------------------------------------------- def stop ( self , mode = None ): '''### Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' for m in self . _motors : m . stop ( mode ) # ---------------------------------------------------------------------------- def set_max_torque ( self , value , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' for m in self . _motors : m . set_max_torque ( value , units ) # ---------------------------------------------------------------------------- def direction ( self ): '''### Returns the current direction the first motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return self . _motors [ 0 ] . direction () # ---------------------------------------------------------------------------- def position ( self , units = RotationUnits . DEG ): '''### Returns the position of the first motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return self . _motors [ 0 ] . position ( units ) # ---------------------------------------------------------------------------- def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns the velocity of the first motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return self . _motors [ 0 ] . velocity ( units ) # ---------------------------------------------------------------------------- def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' total_current = 0 for m in self . _motors : total_current += m . current ( units ) return total_current # ---------------------------------------------------------------------------- def power ( self , units = PowerUnits . WATT ): '''### Returns the power the first motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return self . _motors [ 0 ] . power ( units ) # ---------------------------------------------------------------------------- def torque ( self , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Returns the torque the first motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return self . _motors [ 0 ] . torque ( units ) # ---------------------------------------------------------------------------- def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the efficiency of the first motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return self . _motors [ 0 ] . efficiency ( units ) # ---------------------------------------------------------------------------- def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the temperature of the first motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return self . _motors [ 0 ] . temperature ( units ) # ---------------------------------------------------------------------------- def __waitForCompletionAll ( self ): t = self . _timeout while t > 0 and self . is_spinning (): t -= 10 sleep ( 10 ) done = self . is_done () if not done : self . stop () return done count () return the number of motors in the group Arguments: None Returns: The number of motors in the group Source code in vex.py 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 def count ( self ): '''### return the number of motors in the group #### Arguments: None #### Returns: The number of motors in the group ''' return len ( self . _motors ) current ( units = CurrentUnits . AMP ) Returns the total current all motors are using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The motor current in provided units Source code in vex.py 6095 6096 6097 6098 6099 6100 6101 6102 6103 6104 6105 6106 6107 def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' total_current = 0 for m in self . _motors : total_current += m . current ( units ) return total_current direction () Returns the current direction the first motor is spinning in Arguments: None Returns: The spin direction, FORWARD, REVERSE or UNDEFINED Source code in vex.py 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 def direction ( self ): '''### Returns the current direction the first motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return self . _motors [ 0 ] . direction () efficiency ( units = PercentUnits . PERCENT ) Returns the efficiency of the first motor Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent Source code in vex.py 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the efficiency of the first motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return self . _motors [ 0 ] . efficiency ( units ) is_done () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status Source code in vex.py 6008 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return not self . is_spinning () is_spinning () Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. Arguments: None Returns: The current spin_to_position or spin_for status Source code in vex.py 5984 5985 5986 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' isAnyMotorSpinning = False for m in self . _motors : isAnyMotorSpinning = isAnyMotorSpinning or m . is_spinning () return isAnyMotorSpinning position ( units = RotationUnits . DEG ) Returns the position of the first motor Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The motor position in provided units Source code in vex.py 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 def position ( self , units = RotationUnits . DEG ): '''### Returns the position of the first motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return self . _motors [ 0 ] . position ( units ) power ( units = PowerUnits . WATT ) Returns the power the first motor is providing Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The motor power in provided units Source code in vex.py 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 def power ( self , units = PowerUnits . WATT ): '''### Returns the power the first motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return self . _motors [ 0 ] . power ( units ) reset_position () Reset the motor position to 0 for all motors in the group Arguments: None Returns: None Source code in vex.py 5806 5807 5808 5809 5810 5811 5812 5813 5814 5815 5816 def reset_position ( self ): '''### Reset the motor position to 0 for all motors in the group #### Arguments: None #### Returns: None ''' for m in self . _motors : m . reset_position () set_max_torque ( value , units = TorqueUnits . NM ) Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. Arguments: value : the new maximum torque to use units : the units that value is passed in Returns: None Examples: # set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) Source code in vex.py 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 6050 6051 6052 6053 6054 6055 6056 def set_max_torque ( self , value , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' for m in self . _motors : m . set_max_torque ( value , units ) set_position ( value , units = None ) Set the current position for all motors in the group The position returned by the position() function is set to this value. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None Source code in vex.py 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 def set_position ( self , value , units = None ): '''### Set the current position for all motors in the group The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' for m in self . _motors : m . set_position ( value , units ) set_stopping ( mode = BrakeType . COAST ) Set the stopping mode for all motors in the group Setting the action for the motor when stopped. Arguments: mode : The stopping mode, COAST, BRAKE or HOLD Returns: None Source code in vex.py 5792 5793 5794 5795 5796 5797 5798 5799 5800 5801 5802 5803 def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors in the group Setting the action for the motor when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' for m in self . _motors : m . set_stopping ( mode ) set_timeout ( timeout , units = TimeUnits . MSEC ) Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None Source code in vex.py 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 5854 5855 5856 def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' if units == TimeUnits . SECONDS and timeout > 0 : if timeout > 100000 : timeout = 100000 self . _timeout = timeout * 1000 elif timeout <= 0 : self . _timeout = sys . maxsize else : self . _timeout = timeout for m in self . _motors : m . set_timeout ( timeout , units ) set_velocity ( velocity , units = None ) Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 def set_velocity ( self , velocity , units = None ): '''### Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' for m in self . _motors : m . set_velocity ( velocity , units ) spin ( direction , velocity = None , units = VelocityUnits . RPM ) Spin all motors in the group using the provided arguments Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motors forward at velocity set with set_velocity\\ mg1.spin(FORWARD) # spin motors forward at 50 rpm\\ mg1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ mg1.spin(FORWARD, -20) # spin motors forwards with 100% velocity\\ mg1.spin(FORWARD, 100, PERCENT) # spin motors forwards at 50 rpm\\ mg1.spin(FORWARD, 50, RPM) # spin motors forwards at 360 dps\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 5883 5884 5885 def spin ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Spin all motors in the group using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motors forward at velocity set with set_velocity\\\\ mg1.spin(FORWARD)\\n # spin motors forward at 50 rpm\\\\ mg1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ mg1.spin(FORWARD, -20)\\n # spin motors forwards with 100% velocity\\\\ mg1.spin(FORWARD, 100, PERCENT)\\n # spin motors forwards at 50 rpm\\\\ mg1.spin(FORWARD, 50, RPM)\\n # spin motors forwards at 360 dps\\\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' for m in self . _motors : m . spin ( direction , velocity , units ) spin_for ( direction , rotation , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin 180 degrees from the current position\\ mg1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ mg1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) Source code in vex.py 5946 5947 5948 5949 5950 5951 5952 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 def spin_for ( self , direction , rotation , units : RotationTimeUnits = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ mg1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ mg1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' if isinstance ( units , TimeUnits ): time = rotation self . __spin_for_time ( direction , time , units , velocity , units_v ) else : self . __spin_for_distance ( direction , rotation , units , velocity , units_v , wait ) spin_to_position ( rotation , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\ This function supports keyword arguments. Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # spin to 180 degrees\\ mg1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ mg1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ mg1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, wait=False) Source code in vex.py 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 def spin_to_position ( self , rotation , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ mg1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ mg1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ mg1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, wait=False) ''' for m in self . _motors : m . spin_to_position ( rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False stop ( mode = None ) Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None Source code in vex.py 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 6033 def stop ( self , mode = None ): '''### Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' for m in self . _motors : m . stop ( mode ) temperature ( units = TemperatureUnits . CELSIUS ) Returns the temperature of the first motor Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units Source code in vex.py 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the temperature of the first motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return self . _motors [ 0 ] . temperature ( units ) torque ( units = TorqueUnits . NM ) Returns the torque the first motor is providing Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units Source code in vex.py 6122 6123 6124 6125 6126 6127 6128 6129 6130 6131 def torque ( self , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Returns the torque the first motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return self . _motors [ 0 ] . torque ( units ) velocity ( units = VelocityUnits . RPM ) Returns the velocity of the first motor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The motor velocity in provided units Source code in vex.py 6083 6084 6085 6086 6087 6088 6089 6090 6091 6092 def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns the velocity of the first motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return self . _motors [ 0 ] . velocity ( units ) DriveTrain vex.DriveTrain DriveTrain class - use this to create a simple drivetrain Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. Returns: A new DriveTrain object. Examples: # A simple two motor drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES) Source code in vex.py 6183 6184 6185 6186 6187 6188 6189 6190 6191 6192 6193 6194 6195 6196 6197 6198 6199 6200 6201 6202 6203 6204 6205 6206 6207 6208 6209 6210 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 6221 6222 6223 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 6238 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 6249 6250 6251 6252 6253 6254 6255 6256 6257 6258 6259 6260 6261 6262 6263 6264 6265 6266 6267 6268 6269 6270 6271 6272 6273 6274 6275 6276 6277 6278 6279 6280 6281 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 6292 6293 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 6316 6317 6318 6319 6320 6321 6322 6323 6324 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 6340 6341 6342 6343 6344 6345 6346 6347 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 6360 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 6379 6380 6381 6382 6383 6384 6385 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 6406 6407 6408 6409 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 6420 6421 6422 6423 6424 6425 6426 6427 6428 6429 6430 6431 6432 6433 6434 6435 6436 6437 6438 6439 6440 6441 6442 6443 6444 6445 6446 6447 6448 6449 6450 6451 6452 6453 6454 6455 6456 6457 6458 6459 6460 6461 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 6472 6473 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 6486 6487 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 6499 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 6513 6514 6515 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 6527 class DriveTrain : '''### DriveTrain class - use this to create a simple drivetrain #### Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. #### Returns: A new DriveTrain object. #### Examples: # A simple two motor drivetrain using default values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, True)\\\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, True)\\\\ mgl = MotorGroup(motor1, motor3)\\\\ mgr = MotorGroup(motor2, motor4)\\\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES) ''' def __init__ ( self , lm , rm , wheelTravel : vexnumber = 300 , trackWidth : vexnumber = 320 , wheelBase : vexnumber = 320 , units = DistanceUnits . MM , externalGearRatio = 1.0 ): if ( not ( isinstance ( lm , Motor ) or isinstance ( lm , MotorGroup )) or not ( isinstance ( rm , Motor ) or isinstance ( rm , MotorGroup ))): raise TypeError ( 'must pass two motors or motor groups' ) # motors or motor groups self . lm = lm self . rm = rm # ---------------------------------------------------------------------------- def set_drive_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_turn_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' pass # ---------------------------------------------------------------------------- def get_timeout ( self ): '''### Get the current timeout value used by the drivetrain #### Arguments: None #### Returns: Timeout value in mS ''' return 1000 # ---------------------------------------------------------------------------- def drive ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # drive forward at velocity set with set_velocity\\\\ drive1.drive(FORWARD)\\n # drive forward at 50 rpm\\\\ drive1.drive(FORWARD, 50)\\n # drive with negative velocity, ie. backwards\\\\ drive1.drive(FORWARD, -20)\\n # drive forwards with 100% velocity\\\\ drive1.drive(FORWARD, 100, PERCENT)\\n # drive forwards at 50 rpm\\\\ drive1.drive(FORWARD, 50, RPM)\\n # drive forwards at 360 dps\\\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) ''' pass # ---------------------------------------------------------------------------- def drive_for ( self , direction , distance , units = DistanceUnits . IN , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to move a distance. #### Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # drive forward 10 inches from the current position\\\\ drive1.drive_for(FORWARD, 10, INCHES)\\n # drive reverse 1000mm from the current position with motors at 50 rpm\\\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) ''' pass # ---------------------------------------------------------------------------- def turn ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # turn left at velocity set with set_turn_velocity\\\\ drive1.turn(LEFT)\\n # drive right at 50 rpm\\\\ drive1.turn(RIGHT, 50)\\n # turn right with 100% velocity\\\\ drive1.turn(RIGHT, 100, PERCENT)\\n # turn right at 50 rpm\\\\ drive1.turn(RIGHT, 50, RPM)\\n # turn right at 360 dps\\\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) ''' pass # ---------------------------------------------------------------------------- def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ drive1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' pass # ---------------------------------------------------------------------------- def is_moving ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return False # ---------------------------------------------------------------------------- def is_done ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return True # ---------------------------------------------------------------------------- def stop ( self , mode = None ): '''### Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass # ---------------------------------------------------------------------------- def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns average velocity of the left and right motors #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The drivetrain velocity in provided units ''' return 0 # ---------------------------------------------------------------------------- def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all drivetrain motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The drivetrain current in provided units ''' return 0 # ---------------------------------------------------------------------------- def power ( self , units = PowerUnits . WATT ): '''### Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The drivetrain power in provided units ''' return 0 # ---------------------------------------------------------------------------- def torque ( self , units = TorqueUnits . NM ): '''### Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 0 # ---------------------------------------------------------------------------- def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 0 # ---------------------------------------------------------------------------- def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 0 current ( units = CurrentUnits . AMP ) Returns the total current all drivetrain motors are using Arguments: units (optional) : The units for the returned current, the default is AMP Returns: The drivetrain current in provided units Source code in vex.py 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all drivetrain motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The drivetrain current in provided units ''' return 0 drive ( direction , velocity = None , units = VelocityUnits . RPM ) drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters. Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # drive forward at velocity set with set_velocity\\ drive1.drive(FORWARD) # drive forward at 50 rpm\\ drive1.drive(FORWARD, 50) # drive with negative velocity, ie. backwards\\ drive1.drive(FORWARD, -20) # drive forwards with 100% velocity\\ drive1.drive(FORWARD, 100, PERCENT) # drive forwards at 50 rpm\\ drive1.drive(FORWARD, 50, RPM) # drive forwards at 360 dps\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 6316 6317 6318 6319 6320 6321 6322 def drive ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # drive forward at velocity set with set_velocity\\\\ drive1.drive(FORWARD)\\n # drive forward at 50 rpm\\\\ drive1.drive(FORWARD, 50)\\n # drive with negative velocity, ie. backwards\\\\ drive1.drive(FORWARD, -20)\\n # drive forwards with 100% velocity\\\\ drive1.drive(FORWARD, 100, PERCENT)\\n # drive forwards at 50 rpm\\\\ drive1.drive(FORWARD, 50, RPM)\\n # drive forwards at 360 dps\\\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) ''' pass drive_for ( direction , distance , units = DistanceUnits . IN , velocity = None , units_v = VelocityUnits . RPM , wait = True ) move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to move a distance. Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # drive forward 10 inches from the current position\\ drive1.drive_for(FORWARD, 10, INCHES) # drive reverse 1000mm from the current position with motors at 50 rpm\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) Source code in vex.py 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 6340 6341 6342 6343 6344 6345 6346 6347 6348 6349 def drive_for ( self , direction , distance , units = DistanceUnits . IN , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to move a distance. #### Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # drive forward 10 inches from the current position\\\\ drive1.drive_for(FORWARD, 10, INCHES)\\n # drive reverse 1000mm from the current position with motors at 50 rpm\\\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) ''' pass efficiency ( units = PercentUnits . PERCENT ) Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT Returns: The motor efficiency in percent Source code in vex.py 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 6513 def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 0 get_timeout () Get the current timeout value used by the drivetrain Arguments: None Returns: Timeout value in mS Source code in vex.py 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 def get_timeout ( self ): '''### Get the current timeout value used by the drivetrain #### Arguments: None #### Returns: Timeout value in mS ''' return 1000 is_done () Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for or turn_for status Source code in vex.py 6422 6423 6424 6425 6426 6427 6428 6429 6430 6431 6432 6433 def is_done ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return True is_moving () Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for or turn_for status Source code in vex.py 6408 6409 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 def is_moving ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return False power ( units = PowerUnits . WATT ) Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned power, the default is WATT Returns: The drivetrain power in provided units Source code in vex.py 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 def power ( self , units = PowerUnits . WATT ): '''### Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The drivetrain power in provided units ''' return 0 set_drive_velocity ( velocity , units = VelocityUnits . RPM ) Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 def set_drive_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass set_stopping ( mode = BrakeType . COAST ) Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. Arguments: mode : The stopping mode, COAST, BRAKE or HOLD Returns: None Source code in vex.py 6254 6255 6256 6257 6258 6259 6260 6261 6262 6263 6264 def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass set_timeout ( timeout , units = TimeUnits . MSEC ) Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC Returns: None Source code in vex.py 6267 6268 6269 6270 6271 6272 6273 6274 6275 6276 6277 6278 6279 def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' pass set_turn_velocity ( velocity , units = VelocityUnits . RPM ) Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 6249 6250 6251 def set_turn_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass stop ( mode = None ) Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD Arguments: None Returns: None Source code in vex.py 6437 6438 6439 6440 6441 6442 6443 6444 6445 6446 6447 def stop ( self , mode = None ): '''### Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass temperature ( units = TemperatureUnits . CELSIUS ) Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The motor temperature in provided units Source code in vex.py 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 6527 def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 0 torque ( units = TorqueUnits . NM ) Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. Arguments: units (optional) : The units for the returned torque, the default is NM Returns: The motor torque in provided units Source code in vex.py 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 6499 def torque ( self , units = TorqueUnits . NM ): '''### Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 0 turn ( direction , velocity = None , units = VelocityUnits . RPM ) turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters. Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # turn left at velocity set with set_turn_velocity\\ drive1.turn(LEFT) # drive right at 50 rpm\\ drive1.turn(RIGHT, 50) # turn right with 100% velocity\\ drive1.turn(RIGHT, 100, PERCENT) # turn right at 50 rpm\\ drive1.turn(RIGHT, 50, RPM) # turn right at 360 dps\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) Source code in vex.py 6352 6353 6354 6355 6356 6357 6358 6359 6360 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 def turn ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # turn left at velocity set with set_turn_velocity\\\\ drive1.turn(LEFT)\\n # drive right at 50 rpm\\\\ drive1.turn(RIGHT, 50)\\n # turn right with 100% velocity\\\\ drive1.turn(RIGHT, 100, PERCENT)\\n # turn right at 50 rpm\\\\ drive1.turn(RIGHT, 50, RPM)\\n # turn right at 360 dps\\\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) ''' pass turn_for ( direction , angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to turn a specified angle. Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # turn right 90 degrees\\ drive1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) Source code in vex.py 6381 6382 6383 6384 6385 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ drive1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' pass velocity ( units = VelocityUnits . RPM ) Returns average velocity of the left and right motors Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The drivetrain velocity in provided units Source code in vex.py 6450 6451 6452 6453 6454 6455 6456 6457 6458 6459 def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns average velocity of the left and right motors #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The drivetrain velocity in provided units ''' return 0 SmartDrive vex.SmartDrive Bases: DriveTrain SmartDrive class - use this to create a smart drivetrain A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\ The smartdrive inherits all drivetrain functions. Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. Returns: A new SmartDrive object. Examples: # A simple two motor smart drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ imu1 = Inertial(Ports.PORT9)\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ imu1 = Inertial(Ports.PORT9)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES) Source code in vex.py 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 6562 6563 6564 6565 6566 6567 6568 6569 6570 6571 6572 6573 6574 6575 6576 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 6590 6591 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 6608 6609 6610 6611 6612 6613 6614 6615 6616 6617 6618 6619 6620 6621 6622 6623 6624 6625 6626 6627 6628 6629 6630 6631 6632 6633 6634 6635 6636 6637 6638 6639 6640 6641 6642 6643 6644 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 6655 6656 6657 6658 6659 6660 6661 6662 6663 6664 6665 6666 6667 6668 6669 6670 6671 6672 6673 6674 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 6685 6686 6687 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702 6703 6704 6705 6706 6707 6708 6709 6710 6711 6712 6713 6714 6715 6716 6717 6718 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 6732 6733 6734 6735 6736 6737 6738 6739 6740 6741 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 6759 6760 6761 6762 6763 6764 6765 6766 6767 6768 6769 6770 6771 6772 6773 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 6786 6787 6788 6789 6790 6791 6792 6793 6794 6795 6796 6797 6798 6799 6800 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 6813 6814 6815 6816 6817 6818 6819 6820 6821 6822 6823 6824 6825 6826 class SmartDrive ( DriveTrain ): '''### SmartDrive class - use this to create a smart drivetrain A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\\\ The smartdrive inherits all drivetrain functions. #### Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. #### Returns: A new SmartDrive object. #### Examples: # A simple two motor smart drivetrain using default values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, True)\\\\ imu1 = Inertial(Ports.PORT9)\\\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, True)\\\\ imu1 = Inertial(Ports.PORT9)\\\\ mgl = MotorGroup(motor1, motor3)\\\\ mgr = MotorGroup(motor2, motor4)\\\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES) ''' def __init__ ( self , lm , rm , g , wheelTravel : vexnumber = 300 , trackWidth : vexnumber = 320 , wheelBase : vexnumber = 320 , units = DistanceUnits . MM , externalGearRatio = 1.0 ): if ( not ( isinstance ( lm , Motor ) or isinstance ( lm , MotorGroup )) or not ( isinstance ( rm , Motor ) or isinstance ( rm , MotorGroup ))): raise TypeError ( 'must pass two motors or motor groups' ) if not ( isinstance ( g , Gyro ) or isinstance ( g , Inertial ) or isinstance ( g , Gps )): raise TypeError ( 'must pass Gyro, Inertial or Gps instance' ) DriveTrain . __init__ ( self , lm , rm , wheelTravel , trackWidth , wheelBase , units , externalGearRatio ) self . g = g # ---------------------------------------------------------- def set_turn_threshold ( self , value ): '''### Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\\\ If this is too large then turns will not be accurate, if too small then turns ma\\\\ not complete. #### Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree #### Returns: None ''' pass # ---------------------------------------------------------- def set_turn_constant ( self , value ): '''### Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\\\ This constant, generally known as kp, is the gain used in the equation that\\\\ turns angular error into motor velocity. #### Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 #### Returns: None ''' pass # ---------------------------------------------------------- def set_turn_direction_reverse ( self , value ): '''### Set the expected turn direction for positive heading change #### Arguments: value : True or False #### Returns: None ''' pass # ---------------------------------------------------------- def set_heading ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. #### Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of heading to 180 degrees\\\\ smart1.set_heading(180) ''' pass # ---------------------------------------------------------- def heading ( self , units = RotationUnits . DEG ): '''### read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees #### Arguments: units (optional) : The units to return the heading in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current heading for the smartdrive\\\\ value = smart1.heading() ''' return 0 # ---------------------------------------------------------- def set_rotation ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive rotation to a new value #### Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of rotation to 180 degrees\\\\ smart1.set_rotation(180) ''' pass # ---------------------------------------------------------- def rotation ( self , units = RotationUnits . DEG ): '''### read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. #### Arguments: units (optional) : The units to return the rotation in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current rotation for the smartdrive\\\\ value = smart1.rotation() ''' return self . g . rotation ( units ) # ---------------------------------------------------------- def turn_to_heading ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of heading() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to heading 180 degrees\\\\ smart1.turn_to_heading(180)\\n # turn to heading 180 degrees at 25 rpm\\\\ smart1.turn_to_heading(180, DEGREES, 25, RPM)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, False)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, wait=False) ''' return True # ---------------------------------------------------------- def turn_to_rotation ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of rotation() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to rotation 180 degrees\\\\ smart1.turn_to_rotation(180)\\n # turn to rotation 400 degrees at 25 rpm\\\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, False)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, wait=False) ''' return True # ---------------------------------------------------------- def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the smartdrive is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ smart1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' return True # ---------------------------------------------------------- def is_turning ( self ): '''### Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current turn_to_heading, turn_to_rotation or turn_for status ''' return False # ---------------------------------------------------------- def is_moving ( self ): '''### Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for status ''' return False heading ( units = RotationUnits . DEG ) read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the smartdrive\\ value = smart1.heading() Source code in vex.py 6657 6658 6659 6660 6661 6662 6663 6664 6665 6666 6667 6668 6669 6670 6671 6672 def heading ( self , units = RotationUnits . DEG ): '''### read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees #### Arguments: units (optional) : The units to return the heading in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current heading for the smartdrive\\\\ value = smart1.heading() ''' return 0 is_moving () Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current drive_for status Source code in vex.py 6815 6816 6817 6818 6819 6820 6821 6822 6823 6824 6825 6826 def is_moving ( self ): '''### Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for status ''' return False is_turning () Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. Arguments: None Returns: The current turn_to_heading, turn_to_rotation or turn_for status Source code in vex.py 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 def is_turning ( self ): '''### Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current turn_to_heading, turn_to_rotation or turn_for status ''' return False rotation ( units = RotationUnits . DEG ) read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the smartdrive\\ value = smart1.rotation() Source code in vex.py 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702 6703 6704 6705 6706 6707 def rotation ( self , units = RotationUnits . DEG ): '''### read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. #### Arguments: units (optional) : The units to return the rotation in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current rotation for the smartdrive\\\\ value = smart1.rotation() ''' return self . g . rotation ( units ) set_heading ( value , units = RotationUnits . DEG ) set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ smart1.set_heading(180) Source code in vex.py 6638 6639 6640 6641 6642 6643 6644 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 def set_heading ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. #### Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of heading to 180 degrees\\\\ smart1.set_heading(180) ''' pass set_rotation ( value , units = RotationUnits . DEG ) set the smartdrive rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ smart1.set_rotation(180) Source code in vex.py 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 6685 6686 6687 6688 6689 def set_rotation ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive rotation to a new value #### Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of rotation to 180 degrees\\\\ smart1.set_rotation(180) ''' pass set_turn_constant ( value ) Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\ This constant, generally known as kp, is the gain used in the equation that\\ turns angular error into motor velocity. Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 Returns: None Source code in vex.py 6610 6611 6612 6613 6614 6615 6616 6617 6618 6619 6620 6621 6622 6623 def set_turn_constant ( self , value ): '''### Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\\\ This constant, generally known as kp, is the gain used in the equation that\\\\ turns angular error into motor velocity. #### Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 #### Returns: None ''' pass set_turn_direction_reverse ( value ) Set the expected turn direction for positive heading change Arguments: value : True or False Returns: None Source code in vex.py 6626 6627 6628 6629 6630 6631 6632 6633 6634 6635 def set_turn_direction_reverse ( self , value ): '''### Set the expected turn direction for positive heading change #### Arguments: value : True or False #### Returns: None ''' pass set_turn_threshold ( value ) Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\ If this is too large then turns will not be accurate, if too small then turns ma\\ not complete. Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree Returns: None Source code in vex.py 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 def set_turn_threshold ( self , value ): '''### Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\\\ If this is too large then turns will not be accurate, if too small then turns ma\\\\ not complete. #### Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree #### Returns: None ''' pass turn_for ( direction , angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\ however, the smartdrive is commanded to turn a specified angle. Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None or if wait is True then completion success or failure Examples: # turn right 90 degrees\\ smart1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) Source code in vex.py 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 6786 6787 6788 6789 6790 6791 6792 6793 6794 6795 6796 6797 6798 def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the smartdrive is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ smart1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' return True turn_to_heading ( angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of heading() when turning the smartdrive\\ This function supports keyword arguments. Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # turn to heading 180 degrees\\ smart1.turn_to_heading(180) # turn to heading 180 degrees at 25 rpm\\ smart1.turn_to_heading(180, DEGREES, 25, RPM) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, False) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, wait=False) Source code in vex.py 6710 6711 6712 6713 6714 6715 6716 6717 6718 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 6732 6733 6734 6735 6736 6737 6738 6739 def turn_to_heading ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of heading() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to heading 180 degrees\\\\ smart1.turn_to_heading(180)\\n # turn to heading 180 degrees at 25 rpm\\\\ smart1.turn_to_heading(180, DEGREES, 25, RPM)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, False)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, wait=False) ''' return True turn_to_rotation ( angle , units = RotationUnits . DEG , velocity = None , units_v = VelocityUnits . RPM , wait = True ) turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of rotation() when turning the smartdrive\\ This function supports keyword arguments. Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. Returns: None Examples: # turn to rotation 180 degrees\\ smart1.turn_to_rotation(180) # turn to rotation 400 degrees at 25 rpm\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, False) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, wait=False) Source code in vex.py 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 6759 6760 6761 6762 6763 6764 6765 6766 6767 6768 6769 6770 6771 def turn_to_rotation ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of rotation() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to rotation 180 degrees\\\\ smart1.turn_to_rotation(180)\\n # turn to rotation 400 degrees at 25 rpm\\\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, False)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, wait=False) ''' return True Motor29 vex.Motor29 Motor29 class - create a new pwm motor output The Motor29 class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX MC29 motor controller\\ To minimize current draw, new values sent to the motor will have slew rate control applied Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. Returns: An instance of the Motor29 class Examples: motor1 = Motor29(brain.three_wire_port.a) Source code in vex.py 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 class Motor29 : '''### Motor29 class - create a new pwm motor output The Motor29 class will create raw RC style pwm waveform.\\\\ This is primarily for use with the VEX MC29 motor controller\\\\ To minimize current draw, new values sent to the motor will have slew rate control applied #### Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. #### Returns: An instance of the Motor29 class #### Examples: motor1 = Motor29(brain.three_wire_port.a) ''' def __init__ ( self , port , reverse_flag = False ): self . _index = port self . _velocity = 50 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0 def type ( self ): return 0 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass def spin ( self , direction : DirectionType . DirectionType , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass set_reversed ( value ) Set the reversed flag for the motor Arguments: value : 1, 0, True or False Returns: None Examples: # set motor reversed flag True\\ motor1.set_reversed(True) Source code in vex.py 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value spin ( direction , velocity = None , units = None ) Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 def spin ( self , direction : DirectionType . DirectionType , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass stop () Stop the motor, set to 0 velocity Arguments: None Returns: None Source code in vex.py 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass value () Read the current raw motor controller pwm value. This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get motor current pwm value\\ value = motor1.value() Source code in vex.py 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0 MotorVictor vex.MotorVictor MotorVictor class - create a new pwm motor output The MotorVictor class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX Victor motor controller\\ Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. Returns: An instance of the MotorVictor class Examples: motor1 = MotorVictor(brain.three_wire_port.a) Source code in vex.py 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 class MotorVictor : '''### MotorVictor class - create a new pwm motor output The MotorVictor class will create raw RC style pwm waveform.\\\\ This is primarily for use with the VEX Victor motor controller\\\\ #### Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. #### Returns: An instance of the MotorVictor class #### Examples: motor1 = MotorVictor(brain.three_wire_port.a) ''' def __init__ ( self , port , reverse_flag = False ): self . _index = port self . _velocity = 50 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0 def type ( self ): return 0 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass def spin ( self , direction , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass set_reversed ( value ) Set the reversed flag for the motor Arguments: value : 1, 0, True or False Returns: None Examples: # set motor reversed flag True\\ motor1.set_reversed(True) Source code in vex.py 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass set_velocity ( value , units = VelocityUnits . RPM ) Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM Returns: None Source code in vex.py 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value spin ( direction , velocity = None , units = None ) Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM Returns: None Examples: # spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 def spin ( self , direction , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass stop () Stop the motor, set to 0 velocity Arguments: None Returns: None Source code in vex.py 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass value () Read the current raw motor controller pwm value. This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get motor current pwm value\\ value = motor1.value() Source code in vex.py 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0","title":"Motors"},{"location":"SDK/motors/#motors","text":"This section documents the classes related to VEX smart motors and drivetrain control in DishPy.","title":"Motors"},{"location":"SDK/motors/#motor","text":"","title":"Motor"},{"location":"SDK/motors/#vex.Motor","text":"","title":"Motor"},{"location":"SDK/motors/#vex.Motor--motor-class-use-this-to-create-an-instance-of-a-v5-smart-motor","text":"","title":"Motor class - use this to create an instance of a V5 smart motor"},{"location":"SDK/motors/#vex.Motor--arguments","text":"port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor--returns","text":"A new Motor object.","title":"Returns:"},{"location":"SDK/motors/#vex.Motor--examples","text":"motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True) Source code in vex.py 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 class Motor : '''### Motor class - use this to create an instance of a V5 smart motor #### Arguments: port : The smartport this device is attached to gears (optional) : The gear cartridge installed in the motor, default is the green 18_1 reverse (optional) : Should the motor's spin direction be reversed, default is False #### Returns: A new Motor object. #### Examples: motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True) ''' def __init__ ( self , port : int , * args ): self . _index = port self . _timeout = 10000 self . _velocity = 50 self . _mode = BrakeType . COAST self . _brakeMode = BrakeType . COAST self . _spinMode = False def installed ( self ): '''### Check for device connection #### Arguments: None #### Returns: True or False ''' return True def timestamp ( self ): '''### Request the timestamp of last received message from the motor #### Arguments: None #### Returns: timestamp of the last status packet in mS ''' return 0 def set_velocity ( self , value : vexnumber , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value : bool ): '''### Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. #### Arguments: value : Reverse flag, True or False #### Returns: None ''' pass def set_stopping ( self , value : BrakeType . BrakeType ): '''### Set the stopping mode of the motor Setting the action for the motor when stopped. #### Arguments: value : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass def reset_position ( self ): '''### Reset the motor position to 0 #### Arguments: None #### Returns: None ''' pass def set_position ( self , value : vexnumber , units = RotationUnits . DEG ): '''### Set the current position of the motor The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' pass def set_timeout ( self , value : vexnumber , units = TimeUnits . MSEC ): '''### Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' self . _timeout = value def get_timeout ( self ): '''### Returns the current value of motor timeout #### Arguments: None #### Returns: The current timeout value ''' return self . _timeout def spin ( self , direction : DirectionType . DirectionType , * args , ** kwargs ): '''### Spin the motor using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def spin_to_position ( self , rotation : vexnumber , * args , ** kwargs ): '''### Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ motor1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ motor1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ motor1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, wait=False) ''' pass def spin_for ( self , direction : DirectionType . DirectionType , rot_or_time : vexnumber , * args , ** kwargs ): '''### Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ motor1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ motor1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' pass def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True def is_spinning_mode ( self ): return False def stop ( self , mode = None ): '''### Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass def set_max_torque ( self , value , units : TorquePercentCurrentUnits ): '''### Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' pass def direction ( self ): '''### Returns the current direction the motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return DirectionType . FORWARD def position ( self , * args ): '''### Returns the position of the motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return 20 def velocity ( self , * args ): '''### Returns the velocity of the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return 2 def current ( self , * args ): '''### Returns the current the motor is using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' return 1 def power ( self , * args ): '''### Returns the power the motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return 1 def torque ( self , * args ): '''### Returns the torque the motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 1 def efficiency ( self , * args ): '''### Returns the efficiency of the motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 1 def temperature ( self , * args ): '''### Returns the temperature of the motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 1 def command ( self , * args ): '''### Returns the last velocity sent to the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor command velocity in provided units ''' return self . _velocity","title":"Examples:"},{"location":"SDK/motors/#vex.Motor.command","text":"","title":"command"},{"location":"SDK/motors/#vex.Motor.command--returns-the-last-velocity-sent-to-the-motor","text":"","title":"Returns the last velocity sent to the motor"},{"location":"SDK/motors/#vex.Motor.command--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.command--returns","text":"The motor command velocity in provided units Source code in vex.py 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 def command ( self , * args ): '''### Returns the last velocity sent to the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor command velocity in provided units ''' return self . _velocity","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.current","text":"","title":"current"},{"location":"SDK/motors/#vex.Motor.current--returns-the-current-the-motor-is-using","text":"","title":"Returns the current the motor is using"},{"location":"SDK/motors/#vex.Motor.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.current--returns","text":"The motor current in provided units Source code in vex.py 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 def current ( self , * args ): '''### Returns the current the motor is using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' return 1","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.direction","text":"","title":"direction"},{"location":"SDK/motors/#vex.Motor.direction--returns-the-current-direction-the-motor-is-spinning-in","text":"","title":"Returns the current direction the motor is spinning in"},{"location":"SDK/motors/#vex.Motor.direction--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.direction--returns","text":"The spin direction, FORWARD, REVERSE or UNDEFINED Source code in vex.py 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 def direction ( self ): '''### Returns the current direction the motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return DirectionType . FORWARD","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.efficiency","text":"","title":"efficiency"},{"location":"SDK/motors/#vex.Motor.efficiency--returns-the-efficiency-of-the-motor","text":"","title":"Returns the efficiency of the motor"},{"location":"SDK/motors/#vex.Motor.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.efficiency--returns","text":"The motor efficiency in percent Source code in vex.py 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 def efficiency ( self , * args ): '''### Returns the efficiency of the motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 1","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.get_timeout","text":"","title":"get_timeout"},{"location":"SDK/motors/#vex.Motor.get_timeout--returns-the-current-value-of-motor-timeout","text":"","title":"Returns the current value of motor timeout"},{"location":"SDK/motors/#vex.Motor.get_timeout--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.get_timeout--returns","text":"The current timeout value Source code in vex.py 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 def get_timeout ( self ): '''### Returns the current value of motor timeout #### Arguments: None #### Returns: The current timeout value ''' return self . _timeout","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.installed","text":"","title":"installed"},{"location":"SDK/motors/#vex.Motor.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/motors/#vex.Motor.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.installed--returns","text":"True or False Source code in vex.py 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 def installed ( self ): '''### Check for device connection #### Arguments: None #### Returns: True or False ''' return True","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.is_done","text":"","title":"is_done"},{"location":"SDK/motors/#vex.Motor.is_done--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/motors/#vex.Motor.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.is_done--returns","text":"The current spin_to_position or spin_for status Source code in vex.py 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if the motor is still spinning or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.is_spinning","text":"","title":"is_spinning"},{"location":"SDK/motors/#vex.Motor.is_spinning--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/motors/#vex.Motor.is_spinning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.is_spinning--returns","text":"The current spin_to_position or spin_for status Source code in vex.py 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if the motor is still spinning or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return True","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.position","text":"","title":"position"},{"location":"SDK/motors/#vex.Motor.position--returns-the-position-of-the-motor","text":"","title":"Returns the position of the motor"},{"location":"SDK/motors/#vex.Motor.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.position--returns","text":"The motor position in provided units Source code in vex.py 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 def position ( self , * args ): '''### Returns the position of the motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return 20","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.power","text":"","title":"power"},{"location":"SDK/motors/#vex.Motor.power--returns-the-power-the-motor-is-providing","text":"","title":"Returns the power the motor is providing"},{"location":"SDK/motors/#vex.Motor.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.power--returns","text":"The motor power in provided units Source code in vex.py 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 def power ( self , * args ): '''### Returns the power the motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return 1","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.reset_position","text":"","title":"reset_position"},{"location":"SDK/motors/#vex.Motor.reset_position--reset-the-motor-position-to-0","text":"","title":"Reset the motor position to 0"},{"location":"SDK/motors/#vex.Motor.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.reset_position--returns","text":"None Source code in vex.py 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 def reset_position ( self ): '''### Reset the motor position to 0 #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_max_torque","text":"","title":"set_max_torque"},{"location":"SDK/motors/#vex.Motor.set_max_torque--set-the-maximum-torque-the-motor-will-use","text":"The torque can be set as torque, current or percent of maximum.","title":"Set the maximum torque the motor will use"},{"location":"SDK/motors/#vex.Motor.set_max_torque--arguments","text":"value : the new maximum torque to use units : the units that value is passed in","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_max_torque--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_max_torque--examples","text":"# set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) Source code in vex.py 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 def set_max_torque ( self , value , units : TorquePercentCurrentUnits ): '''### Set the maximum torque the motor will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor.set_position","text":"","title":"set_position"},{"location":"SDK/motors/#vex.Motor.set_position--set-the-current-position-of-the-motor","text":"The position returned by the position() function is set to this value.","title":"Set the current position of the motor"},{"location":"SDK/motors/#vex.Motor.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_position--returns","text":"None Source code in vex.py 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 def set_position ( self , value : vexnumber , units = RotationUnits . DEG ): '''### Set the current position of the motor The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/motors/#vex.Motor.set_reversed--set-the-reverse-flag-for-the-motor","text":"Setting the reverse flag will cause spin commands to run the motor in reverse.","title":"Set the reverse flag for the motor"},{"location":"SDK/motors/#vex.Motor.set_reversed--arguments","text":"value : Reverse flag, True or False","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_reversed--returns","text":"None Source code in vex.py 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 def set_reversed ( self , value : bool ): '''### Set the reverse flag for the motor Setting the reverse flag will cause spin commands to run the motor in reverse. #### Arguments: value : Reverse flag, True or False #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/motors/#vex.Motor.set_stopping--set-the-stopping-mode-of-the-motor","text":"Setting the action for the motor when stopped.","title":"Set the stopping mode of the motor"},{"location":"SDK/motors/#vex.Motor.set_stopping--arguments","text":"value : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_stopping--returns","text":"None Source code in vex.py 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 def set_stopping ( self , value : BrakeType . BrakeType ): '''### Set the stopping mode of the motor Setting the action for the motor when stopped. #### Arguments: value : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/motors/#vex.Motor.set_timeout--set-the-timeout-value-used-by-the-motor","text":"The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False.","title":"Set the timeout value used by the motor"},{"location":"SDK/motors/#vex.Motor.set_timeout--arguments","text":"value : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_timeout--returns","text":"None Source code in vex.py 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 def set_timeout ( self , value : vexnumber , units = TimeUnits . MSEC ): '''### Set the timeout value used by the motor The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: value : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' self . _timeout = value","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/motors/#vex.Motor.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/motors/#vex.Motor.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.set_velocity--returns","text":"None Source code in vex.py 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 def set_velocity ( self , value : vexnumber , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.spin","text":"","title":"spin"},{"location":"SDK/motors/#vex.Motor.spin--spin-the-motor-using-the-provided-arguments","text":"","title":"Spin the motor using the provided arguments"},{"location":"SDK/motors/#vex.Motor.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 def spin ( self , direction : DirectionType . DirectionType , * args , ** kwargs ): '''### Spin the motor using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor.spin_for","text":"","title":"spin_for"},{"location":"SDK/motors/#vex.Motor.spin_for--spin-the-motor-to-a-relative-position-using-the-provided-arguments","text":"Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments.","title":"Spin the motor to a relative position using the provided arguments"},{"location":"SDK/motors/#vex.Motor.spin_for--arguments","text":"dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.spin_for--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.spin_for--examples","text":"# spin 180 degrees from the current position\\ motor1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ motor1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) Source code in vex.py 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 def spin_for ( self , direction : DirectionType . DirectionType , rot_or_time : vexnumber , * args , ** kwargs ): '''### Spin the motor to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: dir : The direction to spin the motor, FORWARD or REVERSE rot_or_time : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ motor1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ motor1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ motor1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ motor1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor.spin_to_position","text":"","title":"spin_to_position"},{"location":"SDK/motors/#vex.Motor.spin_to_position--spin-the-motor-to-an-absolute-position-using-the-provided-arguments","text":"Move the motor to the requested position.\\ This function supports keyword arguments.","title":"Spin the motor to an absolute position using the provided arguments"},{"location":"SDK/motors/#vex.Motor.spin_to_position--arguments","text":"rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.spin_to_position--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.spin_to_position--examples","text":"# spin to 180 degrees\\ motor1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ motor1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ motor1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ motor1.spin_to_position(180, DEGREES, wait=False) Source code in vex.py 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 def spin_to_position ( self , rotation : vexnumber , * args , ** kwargs ): '''### Spin the motor to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ motor1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ motor1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ motor1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ motor1.spin_to_position(180, DEGREES, wait=False) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor.stop","text":"","title":"stop"},{"location":"SDK/motors/#vex.Motor.stop--stop-the-motor-set-to-0-velocity-and-set-current-stopping_mode","text":"The motor will be stopped and set to COAST, BRAKE or HOLD","title":"Stop the motor, set to 0 velocity and set current stopping_mode"},{"location":"SDK/motors/#vex.Motor.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.stop--returns","text":"None Source code in vex.py 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 def stop ( self , mode = None ): '''### Stop the motor, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.temperature","text":"","title":"temperature"},{"location":"SDK/motors/#vex.Motor.temperature--returns-the-temperature-of-the-motor","text":"","title":"Returns the temperature of the motor"},{"location":"SDK/motors/#vex.Motor.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.temperature--returns","text":"The motor temperature in provided units Source code in vex.py 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 def temperature ( self , * args ): '''### Returns the temperature of the motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 1","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.timestamp","text":"","title":"timestamp"},{"location":"SDK/motors/#vex.Motor.timestamp--request-the-timestamp-of-last-received-message-from-the-motor","text":"","title":"Request the timestamp of last received message from the motor"},{"location":"SDK/motors/#vex.Motor.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.timestamp--returns","text":"timestamp of the last status packet in mS Source code in vex.py 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 def timestamp ( self ): '''### Request the timestamp of last received message from the motor #### Arguments: None #### Returns: timestamp of the last status packet in mS ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.torque","text":"","title":"torque"},{"location":"SDK/motors/#vex.Motor.torque--returns-the-torque-the-motor-is-providing","text":"","title":"Returns the torque the motor is providing"},{"location":"SDK/motors/#vex.Motor.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.torque--returns","text":"The motor torque in provided units Source code in vex.py 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 def torque ( self , * args ): '''### Returns the torque the motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 1","title":"Returns:"},{"location":"SDK/motors/#vex.Motor.velocity","text":"","title":"velocity"},{"location":"SDK/motors/#vex.Motor.velocity--returns-the-velocity-of-the-motor","text":"","title":"Returns the velocity of the motor"},{"location":"SDK/motors/#vex.Motor.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor.velocity--returns","text":"The motor velocity in provided units Source code in vex.py 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 def velocity ( self , * args ): '''### Returns the velocity of the motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return 2","title":"Returns:"},{"location":"SDK/motors/#motorgroup","text":"","title":"MotorGroup"},{"location":"SDK/motors/#vex.MotorGroup","text":"","title":"MotorGroup"},{"location":"SDK/motors/#vex.MotorGroup--motorgroup-class-use-this-to-create-a-group-of-motors","text":"","title":"MotorGroup class - use this to create a group of motors"},{"location":"SDK/motors/#vex.MotorGroup--arguments","text":"One or more Motor class instances","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup--returns","text":"A new MotorGroup object.","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup--examples","text":"motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ mg1 = MotorGroup(motor1, motor2) Source code in vex.py 5740 5741 5742 5743 5744 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 5774 5775 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 5790 5791 5792 5793 5794 5795 5796 5797 5798 5799 5800 5801 5802 5803 5804 5805 5806 5807 5808 5809 5810 5811 5812 5813 5814 5815 5816 5817 5818 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 5883 5884 5885 5886 5887 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 5937 5938 5939 5940 5941 5942 5943 5944 5945 5946 5947 5948 5949 5950 5951 5952 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 5982 5983 5984 5985 5986 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 6033 6034 6035 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 6050 6051 6052 6053 6054 6055 6056 6057 6058 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 6069 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 6081 6082 6083 6084 6085 6086 6087 6088 6089 6090 6091 6092 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 6103 6104 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 6120 6121 6122 6123 6124 6125 6126 6127 6128 6129 6130 6131 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 6144 6145 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 6156 6157 6158 6159 6160 6161 6162 6163 6164 6165 6166 6167 6168 class MotorGroup : '''### MotorGroup class - use this to create a group of motors #### Arguments: One or more Motor class instances #### Returns: A new MotorGroup object. #### Examples: motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ mg1 = MotorGroup(motor1, motor2) ''' def __init__ ( self , * argv ): self . _motors = list () for arg in argv : if isinstance ( arg , Motor ): self . _motors . append ( arg ) self . _timeout = sys . maxsize # ---------------------------------------------------------------------------- def count ( self ): '''### return the number of motors in the group #### Arguments: None #### Returns: The number of motors in the group ''' return len ( self . _motors ) # ---------------------------------------------------------------------------- def set_velocity ( self , velocity , units = None ): '''### Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' for m in self . _motors : m . set_velocity ( velocity , units ) # ---------------------------------------------------------------------------- def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors in the group Setting the action for the motor when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' for m in self . _motors : m . set_stopping ( mode ) # ---------------------------------------------------------------------------- def reset_position ( self ): '''### Reset the motor position to 0 for all motors in the group #### Arguments: None #### Returns: None ''' for m in self . _motors : m . reset_position () # ---------------------------------------------------------------------------- def set_position ( self , value , units = None ): '''### Set the current position for all motors in the group The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' for m in self . _motors : m . set_position ( value , units ) # ---------------------------------------------------------------------------- def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' if units == TimeUnits . SECONDS and timeout > 0 : if timeout > 100000 : timeout = 100000 self . _timeout = timeout * 1000 elif timeout <= 0 : self . _timeout = sys . maxsize else : self . _timeout = timeout for m in self . _motors : m . set_timeout ( timeout , units ) # ---------------------------------------------------------------------------- def spin ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Spin all motors in the group using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motors forward at velocity set with set_velocity\\\\ mg1.spin(FORWARD)\\n # spin motors forward at 50 rpm\\\\ mg1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ mg1.spin(FORWARD, -20)\\n # spin motors forwards with 100% velocity\\\\ mg1.spin(FORWARD, 100, PERCENT)\\n # spin motors forwards at 50 rpm\\\\ mg1.spin(FORWARD, 50, RPM)\\n # spin motors forwards at 360 dps\\\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' for m in self . _motors : m . spin ( direction , velocity , units ) # ---------------------------------------------------------------------------- def spin_to_position ( self , rotation , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ mg1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ mg1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ mg1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, wait=False) ''' for m in self . _motors : m . spin_to_position ( rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False # ---------------------------------------------------------------------------- def __spin_for_distance ( self , direction , rotation , units , velocity , units_v , wait ): for m in self . _motors : m . spin_for ( direction , rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False # ---------------------------------------------------------------------------- def __spin_for_time ( self , direction , time , units , velocity , units_v ): for m in self . _motors : if m == self . _motors [ - 1 ]: m . spin_for ( direction , time , units , velocity , units_v ) else : m . spin ( direction , velocity , units_v ) self . stop () # ---------------------------------------------------------------------------- def spin_for ( self , direction , rotation , units : RotationTimeUnits = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ mg1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ mg1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' if isinstance ( units , TimeUnits ): time = rotation self . __spin_for_time ( direction , time , units , velocity , units_v ) else : self . __spin_for_distance ( direction , rotation , units , velocity , units_v , wait ) # ---------------------------------------------------------------------------- def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' isAnyMotorSpinning = False for m in self . _motors : isAnyMotorSpinning = isAnyMotorSpinning or m . is_spinning () return isAnyMotorSpinning # ---------------------------------------------------------------------------- def is_spinning_mode ( self ): isAnyMotorSpinningMode = False for m in self . _motors : isAnyMotorSpinningMode = isAnyMotorSpinningMode or m . is_spinning_mode () return isAnyMotorSpinningMode # ---------------------------------------------------------------------------- def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return not self . is_spinning () # ---------------------------------------------------------------------------- def stop ( self , mode = None ): '''### Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' for m in self . _motors : m . stop ( mode ) # ---------------------------------------------------------------------------- def set_max_torque ( self , value , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' for m in self . _motors : m . set_max_torque ( value , units ) # ---------------------------------------------------------------------------- def direction ( self ): '''### Returns the current direction the first motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return self . _motors [ 0 ] . direction () # ---------------------------------------------------------------------------- def position ( self , units = RotationUnits . DEG ): '''### Returns the position of the first motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return self . _motors [ 0 ] . position ( units ) # ---------------------------------------------------------------------------- def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns the velocity of the first motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return self . _motors [ 0 ] . velocity ( units ) # ---------------------------------------------------------------------------- def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' total_current = 0 for m in self . _motors : total_current += m . current ( units ) return total_current # ---------------------------------------------------------------------------- def power ( self , units = PowerUnits . WATT ): '''### Returns the power the first motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return self . _motors [ 0 ] . power ( units ) # ---------------------------------------------------------------------------- def torque ( self , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Returns the torque the first motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return self . _motors [ 0 ] . torque ( units ) # ---------------------------------------------------------------------------- def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the efficiency of the first motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return self . _motors [ 0 ] . efficiency ( units ) # ---------------------------------------------------------------------------- def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the temperature of the first motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return self . _motors [ 0 ] . temperature ( units ) # ---------------------------------------------------------------------------- def __waitForCompletionAll ( self ): t = self . _timeout while t > 0 and self . is_spinning (): t -= 10 sleep ( 10 ) done = self . is_done () if not done : self . stop () return done","title":"Examples:"},{"location":"SDK/motors/#vex.MotorGroup.count","text":"","title":"count"},{"location":"SDK/motors/#vex.MotorGroup.count--return-the-number-of-motors-in-the-group","text":"","title":"return the number of motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.count--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.count--returns","text":"The number of motors in the group Source code in vex.py 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 def count ( self ): '''### return the number of motors in the group #### Arguments: None #### Returns: The number of motors in the group ''' return len ( self . _motors )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.current","text":"","title":"current"},{"location":"SDK/motors/#vex.MotorGroup.current--returns-the-total-current-all-motors-are-using","text":"","title":"Returns the total current all motors are using"},{"location":"SDK/motors/#vex.MotorGroup.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.current--returns","text":"The motor current in provided units Source code in vex.py 6095 6096 6097 6098 6099 6100 6101 6102 6103 6104 6105 6106 6107 def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The motor current in provided units ''' total_current = 0 for m in self . _motors : total_current += m . current ( units ) return total_current","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.direction","text":"","title":"direction"},{"location":"SDK/motors/#vex.MotorGroup.direction--returns-the-current-direction-the-first-motor-is-spinning-in","text":"","title":"Returns the current direction the first motor is spinning in"},{"location":"SDK/motors/#vex.MotorGroup.direction--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.direction--returns","text":"The spin direction, FORWARD, REVERSE or UNDEFINED Source code in vex.py 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 def direction ( self ): '''### Returns the current direction the first motor is spinning in #### Arguments: None #### Returns: The spin direction, FORWARD, REVERSE or UNDEFINED ''' return self . _motors [ 0 ] . direction ()","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.efficiency","text":"","title":"efficiency"},{"location":"SDK/motors/#vex.MotorGroup.efficiency--returns-the-efficiency-of-the-first-motor","text":"","title":"Returns the efficiency of the first motor"},{"location":"SDK/motors/#vex.MotorGroup.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.efficiency--returns","text":"The motor efficiency in percent Source code in vex.py 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the efficiency of the first motor #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return self . _motors [ 0 ] . efficiency ( units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.is_done","text":"","title":"is_done"},{"location":"SDK/motors/#vex.MotorGroup.is_done--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/motors/#vex.MotorGroup.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.is_done--returns","text":"The current spin_to_position or spin_for status Source code in vex.py 6008 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 def is_done ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return False if any motor is still spinning or True if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' return not self . is_spinning ()","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.is_spinning","text":"","title":"is_spinning"},{"location":"SDK/motors/#vex.MotorGroup.is_spinning--returns-the-current-status-of-the-spin_to_position-or-spin_for-command","text":"This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred.","title":"Returns the current status of the spin_to_position or spin_for command"},{"location":"SDK/motors/#vex.MotorGroup.is_spinning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.is_spinning--returns","text":"The current spin_to_position or spin_for status Source code in vex.py 5984 5985 5986 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 def is_spinning ( self ): '''### Returns the current status of the spin_to_position or spin_for command This function is used when False has been passed as the wait parameter to spin_to_position or spin_for\\\\ It will return True if any motor is still spinning or False if they have completed the move or a timeout occurred. #### Arguments: None #### Returns: The current spin_to_position or spin_for status ''' isAnyMotorSpinning = False for m in self . _motors : isAnyMotorSpinning = isAnyMotorSpinning or m . is_spinning () return isAnyMotorSpinning","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.position","text":"","title":"position"},{"location":"SDK/motors/#vex.MotorGroup.position--returns-the-position-of-the-first-motor","text":"","title":"Returns the position of the first motor"},{"location":"SDK/motors/#vex.MotorGroup.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.position--returns","text":"The motor position in provided units Source code in vex.py 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 def position ( self , units = RotationUnits . DEG ): '''### Returns the position of the first motor #### Arguments: units (optional) : The units for the returned position, the default is DEGREES #### Returns: The motor position in provided units ''' return self . _motors [ 0 ] . position ( units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.power","text":"","title":"power"},{"location":"SDK/motors/#vex.MotorGroup.power--returns-the-power-the-first-motor-is-providing","text":"","title":"Returns the power the first motor is providing"},{"location":"SDK/motors/#vex.MotorGroup.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.power--returns","text":"The motor power in provided units Source code in vex.py 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 def power ( self , units = PowerUnits . WATT ): '''### Returns the power the first motor is providing #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The motor power in provided units ''' return self . _motors [ 0 ] . power ( units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.reset_position","text":"","title":"reset_position"},{"location":"SDK/motors/#vex.MotorGroup.reset_position--reset-the-motor-position-to-0-for-all-motors-in-the-group","text":"","title":"Reset the motor position to 0 for all motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.reset_position--returns","text":"None Source code in vex.py 5806 5807 5808 5809 5810 5811 5812 5813 5814 5815 5816 def reset_position ( self ): '''### Reset the motor position to 0 for all motors in the group #### Arguments: None #### Returns: None ''' for m in self . _motors : m . reset_position ()","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.set_max_torque","text":"","title":"set_max_torque"},{"location":"SDK/motors/#vex.MotorGroup.set_max_torque--set-the-maximum-torque-all-motors-in-the-group-will-use","text":"The torque can be set as torque, current or percent of maximum.","title":"Set the maximum torque all motors in the group will use"},{"location":"SDK/motors/#vex.MotorGroup.set_max_torque--arguments","text":"value : the new maximum torque to use units : the units that value is passed in","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.set_max_torque--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.set_max_torque--examples","text":"# set maximum torque to 2 Nm\\ motor1.set_max_torque(2, TorqueUnits.NM) # set maximum torque to 1 Amp\\ motor1.set_max_torque(1, CurrentUnits.AMP) # set maximum torque to 20 percent\\ motor1.set_max_torque(20, PERCENT) Source code in vex.py 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 6050 6051 6052 6053 6054 6055 6056 def set_max_torque ( self , value , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Set the maximum torque all motors in the group will use The torque can be set as torque, current or percent of maximum. #### Arguments: value : the new maximum torque to use units : the units that value is passed in #### Returns: None #### Examples: # set maximum torque to 2 Nm\\\\ motor1.set_max_torque(2, TorqueUnits.NM)\\n # set maximum torque to 1 Amp\\\\ motor1.set_max_torque(1, CurrentUnits.AMP)\\n # set maximum torque to 20 percent\\\\ motor1.set_max_torque(20, PERCENT) ''' for m in self . _motors : m . set_max_torque ( value , units )","title":"Examples:"},{"location":"SDK/motors/#vex.MotorGroup.set_position","text":"","title":"set_position"},{"location":"SDK/motors/#vex.MotorGroup.set_position--set-the-current-position-for-all-motors-in-the-group","text":"The position returned by the position() function is set to this value.","title":"Set the current position for all motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.set_position--returns","text":"None Source code in vex.py 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 def set_position ( self , value , units = None ): '''### Set the current position for all motors in the group The position returned by the position() function is set to this value. #### Arguments: value : The new position units : The units for the provided position, the default is DEGREES #### Returns: None ''' for m in self . _motors : m . set_position ( value , units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/motors/#vex.MotorGroup.set_stopping--set-the-stopping-mode-for-all-motors-in-the-group","text":"Setting the action for the motor when stopped.","title":"Set the stopping mode for all motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.set_stopping--arguments","text":"mode : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.set_stopping--returns","text":"None Source code in vex.py 5792 5793 5794 5795 5796 5797 5798 5799 5800 5801 5802 5803 def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors in the group Setting the action for the motor when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' for m in self . _motors : m . set_stopping ( mode )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/motors/#vex.MotorGroup.set_timeout--set-the-timeout-value-used-for-all-motors-in-the-group","text":"The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False.","title":"Set the timeout value used for all motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.set_timeout--arguments","text":"timeout : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.set_timeout--returns","text":"None Source code in vex.py 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 5854 5855 5856 def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used for all motors in the group The timeout value is used when performing spin_to_position and spin_for commands. If timeout is reached and the motor has not completed moving, then the spin... function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' if units == TimeUnits . SECONDS and timeout > 0 : if timeout > 100000 : timeout = 100000 self . _timeout = timeout * 1000 elif timeout <= 0 : self . _timeout = sys . maxsize else : self . _timeout = timeout for m in self . _motors : m . set_timeout ( timeout , units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/motors/#vex.MotorGroup.set_velocity--set-default-velocity-for-all-motors-in-the-group","text":"This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function.","title":"Set default velocity for all motors in the group"},{"location":"SDK/motors/#vex.MotorGroup.set_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.set_velocity--returns","text":"None Source code in vex.py 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 def set_velocity ( self , velocity , units = None ): '''### Set default velocity for all motors in the group This will be the velocity used for subsequent calls to spin if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' for m in self . _motors : m . set_velocity ( velocity , units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.spin","text":"","title":"spin"},{"location":"SDK/motors/#vex.MotorGroup.spin--spin-all-motors-in-the-group-using-the-provided-arguments","text":"","title":"Spin all motors in the group using the provided arguments"},{"location":"SDK/motors/#vex.MotorGroup.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.spin--examples","text":"# spin motors forward at velocity set with set_velocity\\ mg1.spin(FORWARD) # spin motors forward at 50 rpm\\ mg1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ mg1.spin(FORWARD, -20) # spin motors forwards with 100% velocity\\ mg1.spin(FORWARD, 100, PERCENT) # spin motors forwards at 50 rpm\\ mg1.spin(FORWARD, 50, RPM) # spin motors forwards at 360 dps\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 5883 5884 5885 def spin ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Spin all motors in the group using the provided arguments #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motors forward at velocity set with set_velocity\\\\ mg1.spin(FORWARD)\\n # spin motors forward at 50 rpm\\\\ mg1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ mg1.spin(FORWARD, -20)\\n # spin motors forwards with 100% velocity\\\\ mg1.spin(FORWARD, 100, PERCENT)\\n # spin motors forwards at 50 rpm\\\\ mg1.spin(FORWARD, 50, RPM)\\n # spin motors forwards at 360 dps\\\\ mg1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' for m in self . _motors : m . spin ( direction , velocity , units )","title":"Examples:"},{"location":"SDK/motors/#vex.MotorGroup.spin_for","text":"","title":"spin_for"},{"location":"SDK/motors/#vex.MotorGroup.spin_for--spin-all-motors-in-the-group-to-a-relative-position-using-the-provided-arguments","text":"Move the motor to the requested position or for the specified amount of time.\\ The position is relative (ie. an offset) to the current position\\ This function supports keyword arguments.","title":"Spin all motors in the group to a relative position using the provided arguments"},{"location":"SDK/motors/#vex.MotorGroup.spin_for--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.spin_for--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.spin_for--examples","text":"# spin 180 degrees from the current position\\ mg1.spin_for(FORWARD, 180) # spin reverse 2 TURNS (revolutions) from the current position\\ mg1.spin_for(REVERSE, 2, TURNS) # spin 180 degrees from the current position at 25 rpm\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, False) # spin 180 degrees from the current position and do not wait for completion\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) Source code in vex.py 5946 5947 5948 5949 5950 5951 5952 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 def spin_for ( self , direction , rotation , units : RotationTimeUnits = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to a relative position using the provided arguments Move the motor to the requested position or for the specified amount of time.\\\\ The position is relative (ie. an offset) to the current position\\\\ This function supports keyword arguments. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE rotation : The relative position to spin the motor to or tha amount of time to spin for units (optional) : The units for the provided position or time, the default is DEGREES or MSEC velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin 180 degrees from the current position\\\\ mg1.spin_for(FORWARD, 180)\\n # spin reverse 2 TURNS (revolutions) from the current position\\\\ mg1.spin_for(REVERSE, 2, TURNS)\\n # spin 180 degrees from the current position at 25 rpm\\\\ mg1.spin_for(FORWARD, 180, DEGREES, 25, RPM)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, False)\\n # spin 180 degrees from the current position and do not wait for completion\\\\ mg1.spin_for(FORWARD, 180, DEGREES, wait=False) ''' if isinstance ( units , TimeUnits ): time = rotation self . __spin_for_time ( direction , time , units , velocity , units_v ) else : self . __spin_for_distance ( direction , rotation , units , velocity , units_v , wait )","title":"Examples:"},{"location":"SDK/motors/#vex.MotorGroup.spin_to_position","text":"","title":"spin_to_position"},{"location":"SDK/motors/#vex.MotorGroup.spin_to_position--spin-all-motors-in-the-group-to-an-absolute-position-using-the-provided-arguments","text":"Move the motor to the requested position.\\ This function supports keyword arguments.","title":"Spin all motors in the group to an absolute position using the provided arguments"},{"location":"SDK/motors/#vex.MotorGroup.spin_to_position--arguments","text":"rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.spin_to_position--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.spin_to_position--examples","text":"# spin to 180 degrees\\ mg1.spin_to_position(180) # spin to 2 TURNS (revolutions)\\ mg1.spin_to_position(2, TURNS) # spin to 180 degrees at 25 rpm\\ mg1.spin_to_position(180, DEGREES, 25, RPM) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, False) # spin to 180 degrees and do not wait for completion\\ mg1.spin_to_position(180, DEGREES, wait=False) Source code in vex.py 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 def spin_to_position ( self , rotation , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### Spin all motors in the group to an absolute position using the provided arguments Move the motor to the requested position.\\\\ This function supports keyword arguments. #### Arguments: rotation : The position to spin the motor to units (optional) : The units for the provided position, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # spin to 180 degrees\\\\ mg1.spin_to_position(180)\\n # spin to 2 TURNS (revolutions)\\\\ mg1.spin_to_position(2, TURNS) \\n # spin to 180 degrees at 25 rpm\\\\ mg1.spin_to_position(180, DEGREES, 25, RPM)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, False)\\n # spin to 180 degrees and do not wait for completion\\\\ mg1.spin_to_position(180, DEGREES, wait=False) ''' for m in self . _motors : m . spin_to_position ( rotation , units , velocity , units_v , False ) if wait : return self . __waitForCompletionAll () return False","title":"Examples:"},{"location":"SDK/motors/#vex.MotorGroup.stop","text":"","title":"stop"},{"location":"SDK/motors/#vex.MotorGroup.stop--stop-all-motors-in-the-group-set-to-0-velocity-and-set-current-stopping_mode","text":"The motor will be stopped and set to COAST, BRAKE or HOLD","title":"Stop all motors in the group, set to 0 velocity and set current stopping_mode"},{"location":"SDK/motors/#vex.MotorGroup.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.stop--returns","text":"None Source code in vex.py 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 6033 def stop ( self , mode = None ): '''### Stop all motors in the group, set to 0 velocity and set current stopping_mode The motor will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' for m in self . _motors : m . stop ( mode )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.temperature","text":"","title":"temperature"},{"location":"SDK/motors/#vex.MotorGroup.temperature--returns-the-temperature-of-the-first-motor","text":"","title":"Returns the temperature of the first motor"},{"location":"SDK/motors/#vex.MotorGroup.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.temperature--returns","text":"The motor temperature in provided units Source code in vex.py 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the temperature of the first motor #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return self . _motors [ 0 ] . temperature ( units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.torque","text":"","title":"torque"},{"location":"SDK/motors/#vex.MotorGroup.torque--returns-the-torque-the-first-motor-is-providing","text":"","title":"Returns the torque the first motor is providing"},{"location":"SDK/motors/#vex.MotorGroup.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.torque--returns","text":"The motor torque in provided units Source code in vex.py 6122 6123 6124 6125 6126 6127 6128 6129 6130 6131 def torque ( self , units : TorquePercentCurrentUnits = TorqueUnits . NM ): '''### Returns the torque the first motor is providing #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return self . _motors [ 0 ] . torque ( units )","title":"Returns:"},{"location":"SDK/motors/#vex.MotorGroup.velocity","text":"","title":"velocity"},{"location":"SDK/motors/#vex.MotorGroup.velocity--returns-the-velocity-of-the-first-motor","text":"","title":"Returns the velocity of the first motor"},{"location":"SDK/motors/#vex.MotorGroup.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorGroup.velocity--returns","text":"The motor velocity in provided units Source code in vex.py 6083 6084 6085 6086 6087 6088 6089 6090 6091 6092 def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns the velocity of the first motor #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The motor velocity in provided units ''' return self . _motors [ 0 ] . velocity ( units )","title":"Returns:"},{"location":"SDK/motors/#drivetrain","text":"","title":"DriveTrain"},{"location":"SDK/motors/#vex.DriveTrain","text":"","title":"DriveTrain"},{"location":"SDK/motors/#vex.DriveTrain--drivetrain-class-use-this-to-create-a-simple-drivetrain","text":"","title":"DriveTrain class - use this to create a simple drivetrain"},{"location":"SDK/motors/#vex.DriveTrain--arguments","text":"lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used.","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain--returns","text":"A new DriveTrain object.","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain--examples","text":"# A simple two motor drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES) Source code in vex.py 6183 6184 6185 6186 6187 6188 6189 6190 6191 6192 6193 6194 6195 6196 6197 6198 6199 6200 6201 6202 6203 6204 6205 6206 6207 6208 6209 6210 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 6221 6222 6223 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 6238 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 6249 6250 6251 6252 6253 6254 6255 6256 6257 6258 6259 6260 6261 6262 6263 6264 6265 6266 6267 6268 6269 6270 6271 6272 6273 6274 6275 6276 6277 6278 6279 6280 6281 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 6292 6293 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 6316 6317 6318 6319 6320 6321 6322 6323 6324 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 6340 6341 6342 6343 6344 6345 6346 6347 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 6360 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 6379 6380 6381 6382 6383 6384 6385 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 6406 6407 6408 6409 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 6420 6421 6422 6423 6424 6425 6426 6427 6428 6429 6430 6431 6432 6433 6434 6435 6436 6437 6438 6439 6440 6441 6442 6443 6444 6445 6446 6447 6448 6449 6450 6451 6452 6453 6454 6455 6456 6457 6458 6459 6460 6461 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 6472 6473 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 6486 6487 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 6499 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 6513 6514 6515 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 6527 class DriveTrain : '''### DriveTrain class - use this to create a simple drivetrain #### Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. #### Returns: A new DriveTrain object. #### Examples: # A simple two motor drivetrain using default values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, True)\\\\ drive1 = DriveTrain(motor1, motor2) # A four motor drivetrain using custom values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, True)\\\\ mgl = MotorGroup(motor1, motor3)\\\\ mgr = MotorGroup(motor2, motor4)\\\\ drive1 = DriveTrain(mgl, mgr, 8.6, 10, 12, INCHES) ''' def __init__ ( self , lm , rm , wheelTravel : vexnumber = 300 , trackWidth : vexnumber = 320 , wheelBase : vexnumber = 320 , units = DistanceUnits . MM , externalGearRatio = 1.0 ): if ( not ( isinstance ( lm , Motor ) or isinstance ( lm , MotorGroup )) or not ( isinstance ( rm , Motor ) or isinstance ( rm , MotorGroup ))): raise TypeError ( 'must pass two motors or motor groups' ) # motors or motor groups self . lm = lm self . rm = rm # ---------------------------------------------------------------------------- def set_drive_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_turn_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass # ---------------------------------------------------------------------------- def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' pass # ---------------------------------------------------------------------------- def get_timeout ( self ): '''### Get the current timeout value used by the drivetrain #### Arguments: None #### Returns: Timeout value in mS ''' return 1000 # ---------------------------------------------------------------------------- def drive ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # drive forward at velocity set with set_velocity\\\\ drive1.drive(FORWARD)\\n # drive forward at 50 rpm\\\\ drive1.drive(FORWARD, 50)\\n # drive with negative velocity, ie. backwards\\\\ drive1.drive(FORWARD, -20)\\n # drive forwards with 100% velocity\\\\ drive1.drive(FORWARD, 100, PERCENT)\\n # drive forwards at 50 rpm\\\\ drive1.drive(FORWARD, 50, RPM)\\n # drive forwards at 360 dps\\\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) ''' pass # ---------------------------------------------------------------------------- def drive_for ( self , direction , distance , units = DistanceUnits . IN , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to move a distance. #### Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # drive forward 10 inches from the current position\\\\ drive1.drive_for(FORWARD, 10, INCHES)\\n # drive reverse 1000mm from the current position with motors at 50 rpm\\\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) ''' pass # ---------------------------------------------------------------------------- def turn ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # turn left at velocity set with set_turn_velocity\\\\ drive1.turn(LEFT)\\n # drive right at 50 rpm\\\\ drive1.turn(RIGHT, 50)\\n # turn right with 100% velocity\\\\ drive1.turn(RIGHT, 100, PERCENT)\\n # turn right at 50 rpm\\\\ drive1.turn(RIGHT, 50, RPM)\\n # turn right at 360 dps\\\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) ''' pass # ---------------------------------------------------------------------------- def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ drive1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' pass # ---------------------------------------------------------------------------- def is_moving ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return False # ---------------------------------------------------------------------------- def is_done ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return True # ---------------------------------------------------------------------------- def stop ( self , mode = None ): '''### Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass # ---------------------------------------------------------------------------- def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns average velocity of the left and right motors #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The drivetrain velocity in provided units ''' return 0 # ---------------------------------------------------------------------------- def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all drivetrain motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The drivetrain current in provided units ''' return 0 # ---------------------------------------------------------------------------- def power ( self , units = PowerUnits . WATT ): '''### Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The drivetrain power in provided units ''' return 0 # ---------------------------------------------------------------------------- def torque ( self , units = TorqueUnits . NM ): '''### Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 0 # ---------------------------------------------------------------------------- def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 0 # ---------------------------------------------------------------------------- def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 0","title":"Examples:"},{"location":"SDK/motors/#vex.DriveTrain.current","text":"","title":"current"},{"location":"SDK/motors/#vex.DriveTrain.current--returns-the-total-current-all-drivetrain-motors-are-using","text":"","title":"Returns the total current all drivetrain motors are using"},{"location":"SDK/motors/#vex.DriveTrain.current--arguments","text":"units (optional) : The units for the returned current, the default is AMP","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.current--returns","text":"The drivetrain current in provided units Source code in vex.py 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 def current ( self , units = CurrentUnits . AMP ): '''### Returns the total current all drivetrain motors are using #### Arguments: units (optional) : The units for the returned current, the default is AMP #### Returns: The drivetrain current in provided units ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.drive","text":"","title":"drive"},{"location":"SDK/motors/#vex.DriveTrain.drive--drive-the-drivetrain-using-the-provided-arguments","text":"The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters.","title":"drive the drivetrain using the provided arguments"},{"location":"SDK/motors/#vex.DriveTrain.drive--arguments","text":"direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.drive--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.drive--examples","text":"# drive forward at velocity set with set_velocity\\ drive1.drive(FORWARD) # drive forward at 50 rpm\\ drive1.drive(FORWARD, 50) # drive with negative velocity, ie. backwards\\ drive1.drive(FORWARD, -20) # drive forwards with 100% velocity\\ drive1.drive(FORWARD, 100, PERCENT) # drive forwards at 50 rpm\\ drive1.drive(FORWARD, 50, RPM) # drive forwards at 360 dps\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 6316 6317 6318 6319 6320 6321 6322 def drive ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### drive the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The direction to drive, FORWARD or REVERSE velocity (optional) : spin the motors using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # drive forward at velocity set with set_velocity\\\\ drive1.drive(FORWARD)\\n # drive forward at 50 rpm\\\\ drive1.drive(FORWARD, 50)\\n # drive with negative velocity, ie. backwards\\\\ drive1.drive(FORWARD, -20)\\n # drive forwards with 100% velocity\\\\ drive1.drive(FORWARD, 100, PERCENT)\\n # drive forwards at 50 rpm\\\\ drive1.drive(FORWARD, 50, RPM)\\n # drive forwards at 360 dps\\\\ drive1.drive(FORWARD, 360.0, VelocityUnits.DPS) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.DriveTrain.drive_for","text":"","title":"drive_for"},{"location":"SDK/motors/#vex.DriveTrain.drive_for--move-the-drivetrain-using-the-provided-arguments","text":"The drive_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to move a distance.","title":"move the drivetrain using the provided arguments"},{"location":"SDK/motors/#vex.DriveTrain.drive_for--arguments","text":"direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.drive_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.drive_for--examples","text":"# drive forward 10 inches from the current position\\ drive1.drive_for(FORWARD, 10, INCHES) # drive reverse 1000mm from the current position with motors at 50 rpm\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) Source code in vex.py 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 6340 6341 6342 6343 6344 6345 6346 6347 6348 6349 def drive_for ( self , direction , distance , units = DistanceUnits . IN , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### move the drivetrain using the provided arguments The drive_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to move a distance. #### Arguments: direction : The direction to drive distance : The distance to drive units (optional) : The units for the provided distance, the default is INCHES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # drive forward 10 inches from the current position\\\\ drive1.drive_for(FORWARD, 10, INCHES)\\n # drive reverse 1000mm from the current position with motors at 50 rpm\\\\ drive1.drive_for(REVERSE, 10000, MM, 50, RPM) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.DriveTrain.efficiency","text":"","title":"efficiency"},{"location":"SDK/motors/#vex.DriveTrain.efficiency--returns-the-average-efficiency-of-the-left-and-right-motors","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the average efficiency of the left and right motors"},{"location":"SDK/motors/#vex.DriveTrain.efficiency--arguments","text":"units (optional) : The units for the efficiency, the only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.efficiency--returns","text":"The motor efficiency in percent Source code in vex.py 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 6513 def efficiency ( self , units = PercentUnits . PERCENT ): '''### Returns the average efficiency of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the efficiency, the only valid value is PERCENT #### Returns: The motor efficiency in percent ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.get_timeout","text":"","title":"get_timeout"},{"location":"SDK/motors/#vex.DriveTrain.get_timeout--get-the-current-timeout-value-used-by-the-drivetrain","text":"","title":"Get the current timeout value used by the drivetrain"},{"location":"SDK/motors/#vex.DriveTrain.get_timeout--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.get_timeout--returns","text":"Timeout value in mS Source code in vex.py 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 def get_timeout ( self ): '''### Get the current timeout value used by the drivetrain #### Arguments: None #### Returns: Timeout value in mS ''' return 1000","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.is_done","text":"","title":"is_done"},{"location":"SDK/motors/#vex.DriveTrain.is_done--returns-the-current-status-of-the-drive_for-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for or turn_for command"},{"location":"SDK/motors/#vex.DriveTrain.is_done--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.is_done--returns","text":"The current drive_for or turn_for status Source code in vex.py 6422 6423 6424 6425 6426 6427 6428 6429 6430 6431 6432 6433 def is_done ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return False if the drivetrain is still moving or True if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return True","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.is_moving","text":"","title":"is_moving"},{"location":"SDK/motors/#vex.DriveTrain.is_moving--returns-the-current-status-of-the-drive_for-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for or turn_for command"},{"location":"SDK/motors/#vex.DriveTrain.is_moving--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.is_moving--returns","text":"The current drive_for or turn_for status Source code in vex.py 6408 6409 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 def is_moving ( self ): '''### Returns the current status of the drive_for or turn_for command This function is used when False has been passed as the wait parameter to drive_for or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for or turn_for status ''' return False","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.power","text":"","title":"power"},{"location":"SDK/motors/#vex.DriveTrain.power--returns-the-total-power-all-drivetrain-motors-are-using","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the total power all drivetrain motors are using"},{"location":"SDK/motors/#vex.DriveTrain.power--arguments","text":"units (optional) : The units for the returned power, the default is WATT","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.power--returns","text":"The drivetrain power in provided units Source code in vex.py 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 def power ( self , units = PowerUnits . WATT ): '''### Returns the total power all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned power, the default is WATT #### Returns: The drivetrain power in provided units ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.set_drive_velocity","text":"","title":"set_drive_velocity"},{"location":"SDK/motors/#vex.DriveTrain.set_drive_velocity--set-default-velocity-for-drive-commands","text":"This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function.","title":"Set default velocity for drive commands"},{"location":"SDK/motors/#vex.DriveTrain.set_drive_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.set_drive_velocity--returns","text":"None Source code in vex.py 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 def set_drive_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for drive commands This will be the velocity used for subsequent calls to drive if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.set_stopping","text":"","title":"set_stopping"},{"location":"SDK/motors/#vex.DriveTrain.set_stopping--set-the-stopping-mode-for-all-motors-on-the-drivetrain","text":"Setting the action for the motors when stopped.","title":"Set the stopping mode for all motors on the drivetrain"},{"location":"SDK/motors/#vex.DriveTrain.set_stopping--arguments","text":"mode : The stopping mode, COAST, BRAKE or HOLD","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.set_stopping--returns","text":"None Source code in vex.py 6254 6255 6256 6257 6258 6259 6260 6261 6262 6263 6264 def set_stopping ( self , mode = BrakeType . COAST ): '''### Set the stopping mode for all motors on the drivetrain Setting the action for the motors when stopped. #### Arguments: mode : The stopping mode, COAST, BRAKE or HOLD #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.set_timeout","text":"","title":"set_timeout"},{"location":"SDK/motors/#vex.DriveTrain.set_timeout--set-the-timeout-value-used-all-motors-on-the-drivetrain","text":"The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False.","title":"Set the timeout value used all motors on the drivetrain"},{"location":"SDK/motors/#vex.DriveTrain.set_timeout--arguments","text":"timeout : The new timeout units : The units for the provided timeout, the default is MSEC","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.set_timeout--returns","text":"None Source code in vex.py 6267 6268 6269 6270 6271 6272 6273 6274 6275 6276 6277 6278 6279 def set_timeout ( self , timeout , units = TimeUnits . MSEC ): '''### Set the timeout value used all motors on the drivetrain The timeout value is used when performing drive_for and turn_for commands. If timeout is reached and the motor has not completed moving, then the function will return False. #### Arguments: timeout : The new timeout units : The units for the provided timeout, the default is MSEC #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.set_turn_velocity","text":"","title":"set_turn_velocity"},{"location":"SDK/motors/#vex.DriveTrain.set_turn_velocity--set-default-velocity-for-turn-commands","text":"This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function.","title":"Set default velocity for turn commands"},{"location":"SDK/motors/#vex.DriveTrain.set_turn_velocity--arguments","text":"velocity : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.set_turn_velocity--returns","text":"None Source code in vex.py 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 6249 6250 6251 def set_turn_velocity ( self , velocity , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for turn commands This will be the velocity used for subsequent calls to turn if a velocity is not provided to that function. #### Arguments: velocity : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.stop","text":"","title":"stop"},{"location":"SDK/motors/#vex.DriveTrain.stop--stop-the-drivetrain-set-to-0-velocity-and-set-current-stopping_mode","text":"The motors will be stopped and set to COAST, BRAKE or HOLD","title":"Stop the drivetrain, set to 0 velocity and set current stopping_mode"},{"location":"SDK/motors/#vex.DriveTrain.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.stop--returns","text":"None Source code in vex.py 6437 6438 6439 6440 6441 6442 6443 6444 6445 6446 6447 def stop ( self , mode = None ): '''### Stop the drivetrain, set to 0 velocity and set current stopping_mode The motors will be stopped and set to COAST, BRAKE or HOLD #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.temperature","text":"","title":"temperature"},{"location":"SDK/motors/#vex.DriveTrain.temperature--returns-the-average-temperature-of-the-left-and-right-motors","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the average temperature of the left and right motors"},{"location":"SDK/motors/#vex.DriveTrain.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.temperature--returns","text":"The motor temperature in provided units Source code in vex.py 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 6527 def temperature ( self , units = TemperatureUnits . CELSIUS ): '''### Returns the average temperature of the left and right motors This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS #### Returns: The motor temperature in provided units ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.torque","text":"","title":"torque"},{"location":"SDK/motors/#vex.DriveTrain.torque--returns-the-total-torque-all-drivetrain-motors-are-using","text":"This command only considers the first motor for left and right sides of the drive.","title":"Returns the total torque all drivetrain motors are using"},{"location":"SDK/motors/#vex.DriveTrain.torque--arguments","text":"units (optional) : The units for the returned torque, the default is NM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.torque--returns","text":"The motor torque in provided units Source code in vex.py 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 6499 def torque ( self , units = TorqueUnits . NM ): '''### Returns the total torque all drivetrain motors are using This command only considers the first motor for left and right sides of the drive. #### Arguments: units (optional) : The units for the returned torque, the default is NM #### Returns: The motor torque in provided units ''' return 0","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.turn","text":"","title":"turn"},{"location":"SDK/motors/#vex.DriveTrain.turn--turn-the-drivetrain-using-the-provided-arguments","text":"The drive command is similar to the motor spin command.\\ all drive motors are commanded using the provided parameters.","title":"turn the drivetrain using the provided arguments"},{"location":"SDK/motors/#vex.DriveTrain.turn--arguments","text":"direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.turn--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.turn--examples","text":"# turn left at velocity set with set_turn_velocity\\ drive1.turn(LEFT) # drive right at 50 rpm\\ drive1.turn(RIGHT, 50) # turn right with 100% velocity\\ drive1.turn(RIGHT, 100, PERCENT) # turn right at 50 rpm\\ drive1.turn(RIGHT, 50, RPM) # turn right at 360 dps\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) Source code in vex.py 6352 6353 6354 6355 6356 6357 6358 6359 6360 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 def turn ( self , direction , velocity = None , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### turn the drivetrain using the provided arguments The drive command is similar to the motor spin command.\\\\ all drive motors are commanded using the provided parameters. #### Arguments: direction : The turn direction, LEFT or RIGHT velocity (optional) : spin the motors using this velocity, the default velocity set by set_turn_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # turn left at velocity set with set_turn_velocity\\\\ drive1.turn(LEFT)\\n # drive right at 50 rpm\\\\ drive1.turn(RIGHT, 50)\\n # turn right with 100% velocity\\\\ drive1.turn(RIGHT, 100, PERCENT)\\n # turn right at 50 rpm\\\\ drive1.turn(RIGHT, 50, RPM)\\n # turn right at 360 dps\\\\ drive1.turn(RIGHT, 360.0, VelocityUnits.DPS) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.DriveTrain.turn_for","text":"","title":"turn_for"},{"location":"SDK/motors/#vex.DriveTrain.turn_for--turn-the-drivetrain-using-the-provided-arguments","text":"The turn_for command is similar to the motor spin_for command,\\ however, the drivetrain is commanded to turn a specified angle.","title":"turn the drivetrain using the provided arguments"},{"location":"SDK/motors/#vex.DriveTrain.turn_for--arguments","text":"direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.turn_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/motors/#vex.DriveTrain.turn_for--examples","text":"# turn right 90 degrees\\ drive1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) Source code in vex.py 6381 6382 6383 6384 6385 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the drivetrain using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the drivetrain is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ drive1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ drive1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.DriveTrain.velocity","text":"","title":"velocity"},{"location":"SDK/motors/#vex.DriveTrain.velocity--returns-average-velocity-of-the-left-and-right-motors","text":"","title":"Returns average velocity of the left and right motors"},{"location":"SDK/motors/#vex.DriveTrain.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.DriveTrain.velocity--returns","text":"The drivetrain velocity in provided units Source code in vex.py 6450 6451 6452 6453 6454 6455 6456 6457 6458 6459 def velocity ( self , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Returns average velocity of the left and right motors #### Arguments: units (optional) : The units for the returned velocity, the default is RPM #### Returns: The drivetrain velocity in provided units ''' return 0","title":"Returns:"},{"location":"SDK/motors/#smartdrive","text":"","title":"SmartDrive"},{"location":"SDK/motors/#vex.SmartDrive","text":"Bases: DriveTrain","title":"SmartDrive"},{"location":"SDK/motors/#vex.SmartDrive--smartdrive-class-use-this-to-create-a-smart-drivetrain","text":"A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\ The smartdrive inherits all drivetrain functions.","title":"SmartDrive class - use this to create a smart drivetrain"},{"location":"SDK/motors/#vex.SmartDrive--arguments","text":"lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used.","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive--returns","text":"A new SmartDrive object.","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive--examples","text":"# A simple two motor smart drivetrain using default values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2, True)\\ imu1 = Inertial(Ports.PORT9)\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\ motor1 = Motor(Ports.PORT1)\\ motor2 = Motor(Ports.PORT2)\\ motor3 = Motor(Ports.PORT3, True)\\ motor4 = Motor(Ports.PORT4, True)\\ imu1 = Inertial(Ports.PORT9)\\ mgl = MotorGroup(motor1, motor3)\\ mgr = MotorGroup(motor2, motor4)\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES) Source code in vex.py 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 6562 6563 6564 6565 6566 6567 6568 6569 6570 6571 6572 6573 6574 6575 6576 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 6590 6591 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 6608 6609 6610 6611 6612 6613 6614 6615 6616 6617 6618 6619 6620 6621 6622 6623 6624 6625 6626 6627 6628 6629 6630 6631 6632 6633 6634 6635 6636 6637 6638 6639 6640 6641 6642 6643 6644 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 6655 6656 6657 6658 6659 6660 6661 6662 6663 6664 6665 6666 6667 6668 6669 6670 6671 6672 6673 6674 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 6685 6686 6687 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702 6703 6704 6705 6706 6707 6708 6709 6710 6711 6712 6713 6714 6715 6716 6717 6718 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 6732 6733 6734 6735 6736 6737 6738 6739 6740 6741 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 6759 6760 6761 6762 6763 6764 6765 6766 6767 6768 6769 6770 6771 6772 6773 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 6786 6787 6788 6789 6790 6791 6792 6793 6794 6795 6796 6797 6798 6799 6800 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 6813 6814 6815 6816 6817 6818 6819 6820 6821 6822 6823 6824 6825 6826 class SmartDrive ( DriveTrain ): '''### SmartDrive class - use this to create a smart drivetrain A smart drivetrain uses a gyro or similar sensor to turn more accurately.\\\\ The smartdrive inherits all drivetrain functions. #### Arguments: lm : Left motor or motorgroup rm : Right motor or motorgroup g : The gyro, inertial sensor or gps to use for turns wheelTravel (optional) : The circumference of the driven wheels, default is 300 mm trackWidth (optional) : The trackwidth of the drivetrain, default is 320 mm wheelBase (optional) : The wheelBase of the drivetrain, default is 320 mm units (optional) : The units that wheelTravel, trackWidth and wheelBase are specified in, default is MM. externalGearRatio (optional) : An optional gear ratio used to compensate drive distances if gearing is used. #### Returns: A new SmartDrive object. #### Examples: # A simple two motor smart drivetrain using default values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2, True)\\\\ imu1 = Inertial(Ports.PORT9)\\\\ smart1 = SmartDrive(motor1, motor2, imu1) # A four motor smart drivetrain using custom values\\\\ motor1 = Motor(Ports.PORT1)\\\\ motor2 = Motor(Ports.PORT2)\\\\ motor3 = Motor(Ports.PORT3, True)\\\\ motor4 = Motor(Ports.PORT4, True)\\\\ imu1 = Inertial(Ports.PORT9)\\\\ mgl = MotorGroup(motor1, motor3)\\\\ mgr = MotorGroup(motor2, motor4)\\\\ smart1 = SmartDrive(mgl, mgr, imu1, 8.6, 10, 12, INCHES) ''' def __init__ ( self , lm , rm , g , wheelTravel : vexnumber = 300 , trackWidth : vexnumber = 320 , wheelBase : vexnumber = 320 , units = DistanceUnits . MM , externalGearRatio = 1.0 ): if ( not ( isinstance ( lm , Motor ) or isinstance ( lm , MotorGroup )) or not ( isinstance ( rm , Motor ) or isinstance ( rm , MotorGroup ))): raise TypeError ( 'must pass two motors or motor groups' ) if not ( isinstance ( g , Gyro ) or isinstance ( g , Inertial ) or isinstance ( g , Gps )): raise TypeError ( 'must pass Gyro, Inertial or Gps instance' ) DriveTrain . __init__ ( self , lm , rm , wheelTravel , trackWidth , wheelBase , units , externalGearRatio ) self . g = g # ---------------------------------------------------------- def set_turn_threshold ( self , value ): '''### Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\\\ If this is too large then turns will not be accurate, if too small then turns ma\\\\ not complete. #### Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree #### Returns: None ''' pass # ---------------------------------------------------------- def set_turn_constant ( self , value ): '''### Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\\\ This constant, generally known as kp, is the gain used in the equation that\\\\ turns angular error into motor velocity. #### Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 #### Returns: None ''' pass # ---------------------------------------------------------- def set_turn_direction_reverse ( self , value ): '''### Set the expected turn direction for positive heading change #### Arguments: value : True or False #### Returns: None ''' pass # ---------------------------------------------------------- def set_heading ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. #### Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of heading to 180 degrees\\\\ smart1.set_heading(180) ''' pass # ---------------------------------------------------------- def heading ( self , units = RotationUnits . DEG ): '''### read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees #### Arguments: units (optional) : The units to return the heading in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current heading for the smartdrive\\\\ value = smart1.heading() ''' return 0 # ---------------------------------------------------------- def set_rotation ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive rotation to a new value #### Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of rotation to 180 degrees\\\\ smart1.set_rotation(180) ''' pass # ---------------------------------------------------------- def rotation ( self , units = RotationUnits . DEG ): '''### read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. #### Arguments: units (optional) : The units to return the rotation in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current rotation for the smartdrive\\\\ value = smart1.rotation() ''' return self . g . rotation ( units ) # ---------------------------------------------------------- def turn_to_heading ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of heading() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to heading 180 degrees\\\\ smart1.turn_to_heading(180)\\n # turn to heading 180 degrees at 25 rpm\\\\ smart1.turn_to_heading(180, DEGREES, 25, RPM)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, False)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, wait=False) ''' return True # ---------------------------------------------------------- def turn_to_rotation ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of rotation() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to rotation 180 degrees\\\\ smart1.turn_to_rotation(180)\\n # turn to rotation 400 degrees at 25 rpm\\\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, False)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, wait=False) ''' return True # ---------------------------------------------------------- def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the smartdrive is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ smart1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' return True # ---------------------------------------------------------- def is_turning ( self ): '''### Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current turn_to_heading, turn_to_rotation or turn_for status ''' return False # ---------------------------------------------------------- def is_moving ( self ): '''### Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for status ''' return False","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.heading","text":"","title":"heading"},{"location":"SDK/motors/#vex.SmartDrive.heading--read-the-current-heading-of-the-smartdrive","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the smartdrive"},{"location":"SDK/motors/#vex.SmartDrive.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.heading--examples","text":"# get the current heading for the smartdrive\\ value = smart1.heading() Source code in vex.py 6657 6658 6659 6660 6661 6662 6663 6664 6665 6666 6667 6668 6669 6670 6671 6672 def heading ( self , units = RotationUnits . DEG ): '''### read the current heading of the smartdrive heading will be returned in the range 0 - 359.99 degrees #### Arguments: units (optional) : The units to return the heading in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current heading for the smartdrive\\\\ value = smart1.heading() ''' return 0","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.is_moving","text":"","title":"is_moving"},{"location":"SDK/motors/#vex.SmartDrive.is_moving--returns-the-current-status-of-the-drive_for-command","text":"This function is used when False has been passed as the wait parameter to drive_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the drive_for command"},{"location":"SDK/motors/#vex.SmartDrive.is_moving--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.is_moving--returns","text":"The current drive_for status Source code in vex.py 6815 6816 6817 6818 6819 6820 6821 6822 6823 6824 6825 6826 def is_moving ( self ): '''### Returns the current status of the drive_for command This function is used when False has been passed as the wait parameter to drive_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current drive_for status ''' return False","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.is_turning","text":"","title":"is_turning"},{"location":"SDK/motors/#vex.SmartDrive.is_turning--returns-the-current-status-of-the-turn_to_heading-turn_to_rotation-or-turn_for-command","text":"This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred.","title":"Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command"},{"location":"SDK/motors/#vex.SmartDrive.is_turning--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.is_turning--returns","text":"The current turn_to_heading, turn_to_rotation or turn_for status Source code in vex.py 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 def is_turning ( self ): '''### Returns the current status of the turn_to_heading, turn_to_rotation or turn_for command This function is used when False has been passed as the wait parameter to turn_to_heading or turn_for\\\\ It will return True if the drivetrain is still moving or False if it has completed the move or a timeout occurred. #### Arguments: None #### Returns: The current turn_to_heading, turn_to_rotation or turn_for status ''' return False","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.rotation","text":"","title":"rotation"},{"location":"SDK/motors/#vex.SmartDrive.rotation--read-the-current-rotation-of-the-smartdrive","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro.","title":"read the current rotation of the smartdrive"},{"location":"SDK/motors/#vex.SmartDrive.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.rotation--examples","text":"# get the current rotation for the smartdrive\\ value = smart1.rotation() Source code in vex.py 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702 6703 6704 6705 6706 6707 def rotation ( self , units = RotationUnits . DEG ): '''### read the current rotation of the smartdrive rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. #### Arguments: units (optional) : The units to return the rotation in, default is DEGREES #### Returns: A value for heading in the range that is specified by the units. #### Examples: # get the current rotation for the smartdrive\\\\ value = smart1.rotation() ''' return self . g . rotation ( units )","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.set_heading","text":"","title":"set_heading"},{"location":"SDK/motors/#vex.SmartDrive.set_heading--set-the-smartdrive-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the smartdrive heading to a new value"},{"location":"SDK/motors/#vex.SmartDrive.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.set_heading--examples","text":"# set the value of heading to 180 degrees\\ smart1.set_heading(180) Source code in vex.py 6638 6639 6640 6641 6642 6643 6644 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 def set_heading ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. #### Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of heading to 180 degrees\\\\ smart1.set_heading(180) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/motors/#vex.SmartDrive.set_rotation--set-the-smartdrive-rotation-to-a-new-value","text":"","title":"set the smartdrive rotation to a new value"},{"location":"SDK/motors/#vex.SmartDrive.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ smart1.set_rotation(180) Source code in vex.py 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 6685 6686 6687 6688 6689 def set_rotation ( self , value , units = RotationUnits . DEG ): '''### set the smartdrive rotation to a new value #### Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES #### Returns: None #### Examples: # set the value of rotation to 180 degrees\\\\ smart1.set_rotation(180) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_constant","text":"","title":"set_turn_constant"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_constant--set-the-turning-constant-for-the-smartdrive","text":"The smartdrive uses a simple P controller when doing turns.\\ This constant, generally known as kp, is the gain used in the equation that\\ turns angular error into motor velocity.","title":"Set the turning constant for the smartdrive"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_constant--arguments","text":"value : The new turn constant in the range 0.1 - 4.0, the default is 1.0","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_constant--returns","text":"None Source code in vex.py 6610 6611 6612 6613 6614 6615 6616 6617 6618 6619 6620 6621 6622 6623 def set_turn_constant ( self , value ): '''### Set the turning constant for the smartdrive The smartdrive uses a simple P controller when doing turns.\\\\ This constant, generally known as kp, is the gain used in the equation that\\\\ turns angular error into motor velocity. #### Arguments: value : The new turn constant in the range 0.1 - 4.0, the default is 1.0 #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_direction_reverse","text":"","title":"set_turn_direction_reverse"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_direction_reverse--set-the-expected-turn-direction-for-positive-heading-change","text":"","title":"Set the expected turn direction for positive heading change"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_direction_reverse--arguments","text":"value : True or False","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_direction_reverse--returns","text":"None Source code in vex.py 6626 6627 6628 6629 6630 6631 6632 6633 6634 6635 def set_turn_direction_reverse ( self , value ): '''### Set the expected turn direction for positive heading change #### Arguments: value : True or False #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_threshold","text":"","title":"set_turn_threshold"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_threshold--set-the-turning-threshold-for-the-smartdrive","text":"This is the threshold value used to determine that turns are complete.\\ If this is too large then turns will not be accurate, if too small then turns ma\\ not complete.","title":"Set the turning threshold for the smartdrive"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_threshold--arguments","text":"value : The new turn threshold in degrees, the default for a smartdrive is 1 degree","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.set_turn_threshold--returns","text":"None Source code in vex.py 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 def set_turn_threshold ( self , value ): '''### Set the turning threshold for the smartdrive This is the threshold value used to determine that turns are complete.\\\\ If this is too large then turns will not be accurate, if too small then turns ma\\\\ not complete. #### Arguments: value : The new turn threshold in degrees, the default for a smartdrive is 1 degree #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.turn_for","text":"","title":"turn_for"},{"location":"SDK/motors/#vex.SmartDrive.turn_for--turn-the-smartdrive-using-the-provided-arguments","text":"The turn_for command is similar to the motor spin_for command,\\ however, the smartdrive is commanded to turn a specified angle.","title":"turn the smartdrive using the provided arguments"},{"location":"SDK/motors/#vex.SmartDrive.turn_for--arguments","text":"direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.turn_for--returns","text":"None or if wait is True then completion success or failure","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.turn_for--examples","text":"# turn right 90 degrees\\ smart1.turn_for(RIGHT, 90, DEGREES) # turn left 180 degrees with motors at 50 rpm\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) Source code in vex.py 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 6786 6787 6788 6789 6790 6791 6792 6793 6794 6795 6796 6797 6798 def turn_for ( self , direction , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive using the provided arguments The turn_for command is similar to the motor spin_for command,\\\\ however, the smartdrive is commanded to turn a specified angle. #### Arguments: direction : The direction to turn, LEFT or RIGHT angle : The angle to turn units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : drive using this velocity, the default velocity set by set_drive_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None or if wait is True then completion success or failure #### Examples: # turn right 90 degrees\\\\ smart1.turn_for(RIGHT, 90, DEGREES)\\n # turn left 180 degrees with motors at 50 rpm\\\\ smart1.turn_for(LEFT, 180, DEGREES, 50, RPM) ''' return True","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_heading","text":"","title":"turn_to_heading"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_heading--turn-the-smartdrive-to-an-absolute-position-using-the-provided-arguments","text":"The turn_to_heading command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of heading() when turning the smartdrive\\ This function supports keyword arguments.","title":"turn the smartdrive to an absolute position using the provided arguments"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_heading--arguments","text":"angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_heading--examples","text":"# turn to heading 180 degrees\\ smart1.turn_to_heading(180) # turn to heading 180 degrees at 25 rpm\\ smart1.turn_to_heading(180, DEGREES, 25, RPM) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, False) # turn to heading 180 degrees and do not wait for completion\\ smart1.turn_to_heading(180, DEGREES, wait=False) Source code in vex.py 6710 6711 6712 6713 6714 6715 6716 6717 6718 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 6732 6733 6734 6735 6736 6737 6738 6739 def turn_to_heading ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_heading command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of heading() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to heading 180 degrees\\\\ smart1.turn_to_heading(180)\\n # turn to heading 180 degrees at 25 rpm\\\\ smart1.turn_to_heading(180, DEGREES, 25, RPM)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, False)\\n # turn to heading 180 degrees and do not wait for completion\\\\ smart1.turn_to_heading(180, DEGREES, wait=False) ''' return True","title":"Examples:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_rotation","text":"","title":"turn_to_rotation"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_rotation--turn-the-smartdrive-to-an-absolute-position-using-the-provided-arguments","text":"The turn_to_rotation command is similar to the motor spin_to_position command,\\ however, the smartdrive is commanded to turn to a specified angle.\\ This function uses the value of rotation() when turning the smartdrive\\ This function supports keyword arguments.","title":"turn the smartdrive to an absolute position using the provided arguments"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_rotation--arguments","text":"angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True.","title":"Arguments:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.SmartDrive.turn_to_rotation--examples","text":"# turn to rotation 180 degrees\\ smart1.turn_to_rotation(180) # turn to rotation 400 degrees at 25 rpm\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, False) # turn to rotation 180 degrees and do not wait for completion\\ smart1.turn_to_rotation(180, DEGREES, wait=False) Source code in vex.py 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 6759 6760 6761 6762 6763 6764 6765 6766 6767 6768 6769 6770 6771 def turn_to_rotation ( self , angle , units = RotationUnits . DEG , velocity = None , units_v : VelocityPercentUnits = VelocityUnits . RPM , wait = True ): '''### turn the smartdrive to an absolute position using the provided arguments The turn_to_rotation command is similar to the motor spin_to_position command,\\\\ however, the smartdrive is commanded to turn to a specified angle.\\\\ This function uses the value of rotation() when turning the smartdrive\\\\ This function supports keyword arguments. #### Arguments: angle : The angle to turn to units (optional) : The units for the provided angle, the default is DEGREES velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units_v (optional) : The units of the provided velocity, default is RPM wait (optional) : This indicates if the function should wait for the command to complete or return immediately, default is True. #### Returns: None #### Examples: # turn to rotation 180 degrees\\\\ smart1.turn_to_rotation(180)\\n # turn to rotation 400 degrees at 25 rpm\\\\ smart1.turn_to_rotation(400, DEGREES, 25, RPM)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, False)\\n # turn to rotation 180 degrees and do not wait for completion\\\\ smart1.turn_to_rotation(180, DEGREES, wait=False) ''' return True","title":"Examples:"},{"location":"SDK/motors/#motor29","text":"","title":"Motor29"},{"location":"SDK/motors/#vex.Motor29","text":"","title":"Motor29"},{"location":"SDK/motors/#vex.Motor29--motor29-class-create-a-new-pwm-motor-output","text":"The Motor29 class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX MC29 motor controller\\ To minimize current draw, new values sent to the motor will have slew rate control applied","title":"Motor29 class - create a new pwm motor output"},{"location":"SDK/motors/#vex.Motor29--arguments","text":"port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False.","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29--returns","text":"An instance of the Motor29 class","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29--examples","text":"motor1 = Motor29(brain.three_wire_port.a) Source code in vex.py 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 class Motor29 : '''### Motor29 class - create a new pwm motor output The Motor29 class will create raw RC style pwm waveform.\\\\ This is primarily for use with the VEX MC29 motor controller\\\\ To minimize current draw, new values sent to the motor will have slew rate control applied #### Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. #### Returns: An instance of the Motor29 class #### Examples: motor1 = Motor29(brain.three_wire_port.a) ''' def __init__ ( self , port , reverse_flag = False ): self . _index = port self . _velocity = 50 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0 def type ( self ): return 0 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass def spin ( self , direction : DirectionType . DirectionType , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor29.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/motors/#vex.Motor29.set_reversed--set-the-reversed-flag-for-the-motor","text":"","title":"Set the reversed flag for the motor"},{"location":"SDK/motors/#vex.Motor29.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29.set_reversed--examples","text":"# set motor reversed flag True\\ motor1.set_reversed(True) Source code in vex.py 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor29.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/motors/#vex.Motor29.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/motors/#vex.Motor29.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29.set_velocity--returns","text":"None Source code in vex.py 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29.spin","text":"","title":"spin"},{"location":"SDK/motors/#vex.Motor29.spin--spin-the-motor-using-the-provided-arguments","text":"The motor is assumed to have a maximum velocity of 100 rpm.","title":"Spin the motor using the provided arguments"},{"location":"SDK/motors/#vex.Motor29.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 def spin ( self , direction : DirectionType . DirectionType , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.Motor29.stop","text":"","title":"stop"},{"location":"SDK/motors/#vex.Motor29.stop--stop-the-motor-set-to-0-velocity","text":"","title":"Stop the motor, set to 0 velocity"},{"location":"SDK/motors/#vex.Motor29.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29.stop--returns","text":"None Source code in vex.py 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29.value","text":"","title":"value"},{"location":"SDK/motors/#vex.Motor29.value--read-the-current-raw-motor-controller-pwm-value","text":"This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255","title":"Read the current raw motor controller pwm value."},{"location":"SDK/motors/#vex.Motor29.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.Motor29.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/motors/#vex.Motor29.value--examples","text":"# get motor current pwm value\\ value = motor1.value() Source code in vex.py 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0","title":"Examples:"},{"location":"SDK/motors/#motorvictor","text":"","title":"MotorVictor"},{"location":"SDK/motors/#vex.MotorVictor","text":"","title":"MotorVictor"},{"location":"SDK/motors/#vex.MotorVictor--motorvictor-class-create-a-new-pwm-motor-output","text":"The MotorVictor class will create raw RC style pwm waveform.\\ This is primarily for use with the VEX Victor motor controller\\","title":"MotorVictor class - create a new pwm motor output"},{"location":"SDK/motors/#vex.MotorVictor--arguments","text":"port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False.","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor--returns","text":"An instance of the MotorVictor class","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor--examples","text":"motor1 = MotorVictor(brain.three_wire_port.a) Source code in vex.py 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 class MotorVictor : '''### MotorVictor class - create a new pwm motor output The MotorVictor class will create raw RC style pwm waveform.\\\\ This is primarily for use with the VEX Victor motor controller\\\\ #### Arguments: port : The 3wire port to use for the motor controller reverse_flag (optional) : set reverse flag for this motor, spin commands will cause opposite rotation if set True. default is False. #### Returns: An instance of the MotorVictor class #### Examples: motor1 = MotorVictor(brain.three_wire_port.a) ''' def __init__ ( self , port , reverse_flag = False ): self . _index = port self . _velocity = 50 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0 def type ( self ): return 0 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass def spin ( self , direction , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.MotorVictor.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/motors/#vex.MotorVictor.set_reversed--set-the-reversed-flag-for-the-motor","text":"","title":"Set the reversed flag for the motor"},{"location":"SDK/motors/#vex.MotorVictor.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor.set_reversed--examples","text":"# set motor reversed flag True\\ motor1.set_reversed(True) Source code in vex.py 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 def set_reversed ( self , value ): '''### Set the reversed flag for the motor #### Arguments: value : 1, 0, True or False #### Returns: None #### Examples: # set motor reversed flag True\\\\ motor1.set_reversed(True) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.MotorVictor.set_velocity","text":"","title":"set_velocity"},{"location":"SDK/motors/#vex.MotorVictor.set_velocity--set-default-velocity-for-the-motor","text":"This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function.","title":"Set default velocity for the motor"},{"location":"SDK/motors/#vex.MotorVictor.set_velocity--arguments","text":"value : The new velocity units : The units for the supplied velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor.set_velocity--returns","text":"None Source code in vex.py 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 def set_velocity ( self , value , units : VelocityPercentUnits = VelocityUnits . RPM ): '''### Set default velocity for the motor This will be the velocity used for subsequent calls to spin of a velocity is not provided to that function. #### Arguments: value : The new velocity units : The units for the supplied velocity, the default is RPM #### Returns: None ''' self . _velocity = value","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor.spin","text":"","title":"spin"},{"location":"SDK/motors/#vex.MotorVictor.spin--spin-the-motor-using-the-provided-arguments","text":"The motor is assumed to have a maximum velocity of 100 rpm.","title":"Spin the motor using the provided arguments"},{"location":"SDK/motors/#vex.MotorVictor.spin--arguments","text":"direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor.spin--returns","text":"None","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor.spin--examples","text":"# spin motor forward at velocity set with set_velocity\\ motor1.spin(FORWARD) # spin motor forward at 50 rpm\\ motor1.spin(FORWARD, 50) # spin with negative velocity, ie. backwards\\ motor1.spin(FORWARD, -20) # spin motor forwards with 100% velocity\\ motor1.spin(FORWARD, 100, PERCENT) # spin motor forwards at 50 rpm\\ motor1.spin(FORWARD, 50, RPM) # spin motor forwards at 360 dps\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) Source code in vex.py 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 def spin ( self , direction , velocity = None , units = None ): '''### Spin the motor using the provided arguments The motor is assumed to have a maximum velocity of 100 rpm. #### Arguments: direction : The direction to spin the motor, FORWARD or REVERSE velocity (optional) : spin the motor using this velocity, the default velocity set by set_velocity will be used if not provided. units (optional) : The units of the provided velocity, default is RPM #### Returns: None #### Examples: # spin motor forward at velocity set with set_velocity\\\\ motor1.spin(FORWARD)\\n # spin motor forward at 50 rpm\\\\ motor1.spin(FORWARD, 50)\\n # spin with negative velocity, ie. backwards\\\\ motor1.spin(FORWARD, -20)\\n # spin motor forwards with 100% velocity\\\\ motor1.spin(FORWARD, 100, PERCENT)\\n # spin motor forwards at 50 rpm\\\\ motor1.spin(FORWARD, 50, RPM)\\n # spin motor forwards at 360 dps\\\\ motor1.spin(FORWARD, 360.0, VelocityUnits.DPS) ''' pass","title":"Examples:"},{"location":"SDK/motors/#vex.MotorVictor.stop","text":"","title":"stop"},{"location":"SDK/motors/#vex.MotorVictor.stop--stop-the-motor-set-to-0-velocity","text":"","title":"Stop the motor, set to 0 velocity"},{"location":"SDK/motors/#vex.MotorVictor.stop--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor.stop--returns","text":"None Source code in vex.py 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 def stop ( self ): '''### Stop the motor, set to 0 velocity #### Arguments: None #### Returns: None ''' pass","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor.value","text":"","title":"value"},{"location":"SDK/motors/#vex.MotorVictor.value--read-the-current-raw-motor-controller-pwm-value","text":"This is the raw internal pwm value\\ A motor velocity of 0 will return 127\\ A maximum positive motor velocity will return 255","title":"Read the current raw motor controller pwm value."},{"location":"SDK/motors/#vex.MotorVictor.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/motors/#vex.MotorVictor.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/motors/#vex.MotorVictor.value--examples","text":"# get motor current pwm value\\ value = motor1.value() Source code in vex.py 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 def value ( self ): '''### Read the current raw motor controller pwm value. This is the raw internal pwm value\\\\ A motor velocity of 0 will return 127\\\\ A maximum positive motor velocity will return 255 #### Arguments: None #### Returns: A value in the range 0 to 255. #### Examples: # get motor current pwm value\\\\ value = motor1.value() ''' return 0","title":"Examples:"},{"location":"SDK/sensors/","text":"Sensors This page documents the VEX V5 sensor classes available in the DishPy SDK. Each class provides an interface to a specific VEX sensor, with methods for reading data and controlling sensor behavior. GPS Sensor vex.Gps Gps class - a class for working with the gps sensor Arguments: port : The smartport this device is attached to origin_x (optional) : The X location of the GPS with respect to origin of the robot. origin_y (optional) : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM Returns: An instance of the Gps class Examples: gps1 = Gps(Ports.PORT1) acceleration ( axis ) read the acceleration for one axis of the gps Arguments: axis : The axis to read Returns: A value for the acceleration of the axis in units of gravity. Examples: # get the acceleration for the Z axis of the gps\\ zaccel = gps1.acceleration(ZAXIS) calibrate () not used on the GPS sensor changed ( callback , arg = ()) Register a function to be called when the value of the gps heading changes This is not particularly useful as gps heading is not stable and will cause many events. Arguments: callback : A function that will be called when the value of the gps heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"heading changed\") gps1.changed(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT gyro_rate ( axis , units = VelocityUnits . DPS ) read the gyro rate for one axis of the gps Arguments: axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS Returns: A value for the gyro rate of the axis in the units specified. Examples: # get the gyro rate for the Z axis of the gps\\ zrate = gps1.gyro_rate(ZAXIS) heading ( units = RotationUnits . DEG ) read the current heading of the gps heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the gps\\ value = gps1.heading() installed ( * args ) Check for device connection Arguments: None Returns: True or False is_calibrating () not used on the GPS sensor orientation ( axis , units = RotationUnits . DEG ) read the orientation for one axis of the gps Arguments: axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES Returns: A value for the axis orientation in the units specified. Examples: # get the pitch value for the gps\\ pitch = gps1.orientation(OrientationType.PITCH) quality () read the current quality of the gps data A quality of 100 indicates the gps can see the gps field strip and is returning good readings\\ The value for quality will reduce as the confidence in x and y location lowers. Arguments: None Returns: A value of quality in the range 0 to 100 Examples: # get the current location and heading quality for the gps\\ q = gps1.quality() reset_heading () Reset the gps heading to 0 Arguments: None Returns: None reset_rotation () Reset the gps rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the gps rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the gps\\ value = gps1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the gps heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ gps1.set_heading(180) set_location ( x , y , units = DistanceUnits . MM , angle = 0 , units_r = RotationUnits . DEG ) set the initial location of the robot This gives a hint as to the location of the robot/gps sensor when it is first initialized.\\ This can be used if in the initial position the gps cannot see the gps field strip. Arguments: x : The initial X coordinate. y : The initial Y coordinate.\\ note. both X and Y must be supplied units (optional) : The units that X and Y coordinates are specified in, default is MM angle (optional) : The initial heading of the robot. units_r (optional) : The units that angle is specified in, default is DEGREES Returns: None Examples: # set the initial location of the gps\\ gps1.set_location(1000, -1000, MM, 90, DEGREES) set_origin ( x = 0 , y = 0 , units = DistanceUnits . MM ) set the origin of the gps sensor An alternate way of setting sensor origin if not provided in the Gps class constructor. Arguments: x : The X location of the GPS with respect to origin of the robot. y : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM Returns: None Examples: # set the origin of the gps\\ gps1.set_origin(6, -6, INCHES) set_rotation ( value , units = RotationUnits . DEG ) set the gps rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ gps1.set_rotation(180) set_sensor_rotation ( value , units = RotationUnits . DEG ) set the sensor rotation of the gps sensor with respect to the robot. This allows heading and rotation methods to return angles relative to the robot rather than the gps. Arguments: value : The angle of the GPS with respect to the robot. units (optional) : The units that value is specified in, default is DEGREES Returns: None Examples: # set the sensor rotation of the gps\\ gps1.set_sensor_rotation(180, DEGREES) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS x_position ( units = DistanceUnits . MM ) read the current x coordinate of the gps Arguments: units (optional) : The units to return the position in, default is MM Returns: A value for the x coordinate in the units specified. Examples: # get the current x coordinate for the gps\\ posx = gps1.x_position() y_position ( units = DistanceUnits . MM ) read the current y coordinate of the gps Arguments: units (optional) : The units to return the position in, default is MM Returns: A value for the y coordinate in the units specified. Examples: # get the current y coordinate for the gps\\ posy = gps1.y_position() Inertial Sensor vex.Inertial Inertial class - a class for working with the inertial sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Inertial class Examples: imu1 = Inertial(Ports.PORT1) acceleration ( axis ) read the acceleration for one axis of the inertial sensor Arguments: axis : The axis to read Returns: A value for the acceleration of the axis in units of gravity. Examples: # get the acceleration for the Z axis of the inertial sensor\\ zaccel = imu1.acceleration(ZAXIS) calibrate () Start calibration of the inertial sensor Calibration should done when the inertial sensor is not moving. Arguments: None Returns: None Examples: # start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC) changed ( callback , arg = ()) Register a function to be called when the value of the inertial sensor heading changes Arguments: callback : A function that will be called when the value of the inertial sensor heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"heading changed\") imu1.changed(foo) collision ( callback , arg = ()) Register a function to be called when the inertial sensor detects a collision Arguments: callback : A function that will be called when the inertial sensor detects a collision arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"collision\") imu1.collision(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT gyro_rate ( axis , units = VelocityUnits . DPS ) read the gyro rate for one axis of the inertial sensor Arguments: axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS Returns: A value for the gyro rate of the axis in the units specified. Examples: # get the gyro rate for the Z axis of the inertial sensor\\ zrate = imu1.gyro_rate(ZAXIS) heading ( units = RotationUnits . DEG ) read the current heading of the inertial sensor heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the inertial sensor\\ value = imu1.heading() installed ( * args ) Check for device connection Arguments: None Returns: True or False is_calibrating () check the calibration status of the inertial sensor Calibration should done when the inertial sensor is not moving. Arguments: None Returns: True when the inertial sensor is calibrating Examples: # start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC) orientation ( axis , units = RotationUnits . DEG ) read the orientation for one axis of the inertial sensor Arguments: axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES Returns: A value for the axis orientation in the units specified. Examples: # get the pitch value for the inertial sensor\\ pitch = imu1.orientation(OrientationType.PITCH) reset_heading () Reset the inertial sensor heading to 0 Arguments: None Returns: None reset_rotation () Reset the inertial sensor rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the inertial sensor rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the inertial sensor\\ value = imu1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the inertial sensor heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ imu1.set_heading(180) set_rotation ( value , units = RotationUnits . DEG ) set the inertial sensor rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ imu1.set_rotation(180) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Rotation Sensor vex.Rotation Rotation class - a class for working with the rotation sensor Arguments: port : The smartport this device is attached to reverse (optional) : set to reverse the angle and position returned by the sensor. Returns: An instance of the Rotation class Examples: rot1 = Rotation(Ports.PORT1)\\ rot2 = Rotation(Ports.PORT2, True) angle ( units = RotationUnits . DEG ) The current angle of the rotation sensor Arguments: units (optional) : A valid RotationUnits type, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get rotation sensor angle angle = rot1.angle() changed ( callback , arg = ()) Register a function to be called when the value of the rotation sensor changes Arguments: callback : A function that will be called when the value of the rotation sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"rotation changed\") rot1.changed(foo) installed () Check for device connection Arguments: None Returns: True or False position ( units = RotationUnits . DEG ) Returns the position of the rotation sensor The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated. Arguments: units (optional) : The units for the returned position, the default is DEGREES Returns: The rotation sensor in provided units reset_position () Reset the rotation sensor position to 0 Arguments: None Returns: None set_position ( value , units = RotationUnits . DEG ) Set the current position of the rotation sensor The position returned by the position() function is set to this value. The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated. Arguments: value : The new position units : The units for the provided position, the default is DEGREES Returns: None set_reversed ( value ) Set the reversed flag for the sensor Usually this would be done in the constructor. Arguments: value : 1, 0, True or False Returns: None Examples: # set reversed flag True\\ rot1.set_reversed(True) timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS velocity ( units = VelocityUnits . RPM ) Returns the velocity of the rotation sensor Arguments: units (optional) : The units for the returned velocity, the default is RPM Returns: The rotation sensor velocity in provided units Optical Sensor vex.Optical Optical class - a class for working with the optical sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Optical class Examples: opt1 = Optical(Ports.PORT1) brightness ( readraw = False ) read the brightness value from the optical sensor Arguments: readraw (optional) : return raw brightness value if True rather than percentage. Returns: brightness as a float in the range 0 - 100% Examples: brightness = opt1.brightness() color () read the color from the optical sensor Arguments: None Returns: color as an instance of the Color class Examples: c = opt1.color() gesture_disable () Disable gesture mode Arguments: None Returns: None Examples: opt1.gesture_disable() gesture_down ( callback , arg = ()) Register a function to be called when a gesture down event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture down event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"down detected\") opt1.gesture_down(foo) gesture_enable () Enable gesture mode Arguments: None Returns: None Examples: opt1.gesture_enable() gesture_left ( callback , arg = ()) Register a function to be called when a gesture left event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture left event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"left detected\") opt1.gesture_left(foo) gesture_right ( callback , arg = ()) Register a function to be called when a gesture right event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture right event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"right detected\") opt1.gesture_right(foo) gesture_up ( callback , arg = ()) Register a function to be called when a gesture up event is detected gesture must be enabled for events to fire. Arguments: callback : A function that will be called when a gesture up event is detected arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"up detected\") opt1.gesture_up(foo) get_gesture ( newobject = False ) get gesture data Arguments: newobject (optional) : create a new Gesture object to return data in Returns: An object with the last gesture data Examples: opt1.gesture_disable() hue () read the hue value from the optical sensor Arguments: None Returns: hue as a float in the range 0 - 359.99 degrees Examples: hue = opt1.hue() installed () Check for device connection Arguments: None Returns: True or False integration_time ( value =- 1 ) set optical sensor led to the requested power Arguments: value (optional) : integration time in mS (5 to 700) Returns: The current integration time Examples: opt1.set_light_power(50) is_near_object () check to see if the optical proximity sensor detects an object Arguments: None Returns: True if near an object Examples: if opt1.is_near_object(): print('near object') object_detect_threshold ( value ) set the threshold for object detection Arguments: value : Number in the range 0 to 255. A value of 0 will just return current value. Returns: current value Examples: opt1.object_detect_threshold(100) object_detected ( callback , arg = ()) Register a function to be called when an object detected event occurs Arguments: callback : A function that will be called when an object detected event occurs arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"object detected\") opt1.object_detected(foo) object_lost ( callback , arg = ()) Register a function to be called when an object lost event occurs Arguments: callback : A function that will be called when an object lost event occurs arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"object lost\") opt1.object_lost(foo) rgb ( raw = False ) get the optical sensor rgb value Arguments: raw (optional) : return raw or processed values Returns: A tuple with red, green, blue and brightness Examples: value=opt1.rgb() set_light ( * args ) set optical sensor led on or of Arguments: value : LedStateType.ON, LedStateType.OFF or power of led, 0 to 100% Returns: None Examples: # turn on led with previous intensity\\ opt1.set_light(LedStateType.ON) # turn on led with new intensity\\ opt1.set_light(65) set_light_power ( value ) set optical sensor led to the requested power Arguments: value : power of led, 0 to 100% Returns: None Examples: opt1.set_light_power(50) timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Distance Sensor vex.Distance Distance class - a class for working with the distance sensor Arguments: port : The smartport this device is attached to Returns: An instance of the Distance class Examples: dist1 = Distance(Ports.PORT1) changed ( callback , arg = ()) Register a function to be called when the distance value changes Arguments: callback : A function that will be called when the distance value changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"distance changed\") dist1.changed(foo) installed () Check for device connection Arguments: None Returns: True or False is_object_detected () Returns if an object is detected Arguments: None Returns: True or False object_distance ( units = DistanceUnits . MM ) The current distance the sensor is reading. The distance will return a large positive number if no object is detected. Arguments: units (optional): The distance units to return the distance value in. default is MM. Returns: A value for distance in the specified units. Examples: # get distance in mm\\ value = dist1.object_distance() # get distance in inches\\ value = dist1.object_distance(INCHES) object_rawsize () Get the raw value of object size the sensor is detecting. Raw size will be a number ranging from 0 to about 400\\ Larger and more reflective objects will return larger values. Arguments: None Returns: A value for object size that is a number.\\ Examples: # get object raw size\\ size = dist1.object_rawsize() object_size () Get an estimation of the object size the sensor is detecting. Arguments: None Returns: A value for object size.\\ The value will be of type ObjectSizeType Examples: # get object size\\ size = dist1.object_size() object_velocity () Returns the object velocity velocity is calculated from change of distance over time Arguments: None Returns: The velocity in m/s timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Electromagnet vex.Electromagnet Electromagnet class - a class for working with the electromagnet Arguments: port : The smartport this device is attached to Returns: An instance of the Electromagnet class Examples: em1 = Electromagnet(Ports.PORT1) drop ( duration = 1000 , units = MSEC , power = 50 ) energize the electromagnet to drop objects Arguments: duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing. Returns: None Examples: # drop with default values\\ em1.drop() # drop with custom values\\ em1.drop(250, MSEC, 90) installed () Check for device connection Arguments: None Returns: True or False pickup ( duration = 1000 , units = MSEC , power = 50 ) energize the electromagnet to pickup objects Arguments: duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing. Returns: None Examples: # pickup with default values\\ em1.pickup() # pickup with custom values\\ em1.pickup(250, MSEC, 90) set_power ( value ) set the default power to use for drop and pickup methods Arguments: value : power in range 0 to 100 Returns: None Examples: # set default power to 80\\ em1.set_power(80) temperature ( * args ) Returns the temperature of the electromagnet Arguments: units (optional) : The units for the returned temperature, the default is CELSIUS Returns: The electromagnet temperature in provided units timestamp () Request the timestamp of last received message from the sensor Arguments: None Returns: timestamp of the last status packet in mS Accelerometer vex.Accelerometer Accelerometer class - create a new accelerometer For full functionality, three Accelerometer instances would need to be created, one for each axis. Arguments: port : The 3wire port to use for the accelerometer sensitivity (optional) : set high sensitivity mode (+/- 2G), use True or 1 Returns: An instance of the Accelerometer class Examples: accx = Accelerometer(brain.three_wire_port.a)\\ accy = Accelerometer(brain.three_wire_port.b)\\ accz = Accelerometer(brain.three_wire_port.c) acceleration () The current value of the accelerometer scaled to units of gravity Arguments: None Returns: A value in the range +/- 6 or +/-2G if high sensitivity mode is set Examples: # get accelerometer in range+/- 6G value = accz.acceleration() changed ( callback , arg = ()) Register a function to be called when the value of the accelerometer changes Arguments: callback : A function that will be called when the value of the accelerometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"accelerometer changed\") accz.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the accelerometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get accelerometer in range 0 - 4095\\ value = accz.value() # get accelerometer in range 0 - 1023\\ value = accz.value(AnalogUnits.TENBIT) Analog Input vex.AnalogIn AnalogIn class - create a new analog input Arguments: port : The 3wire port to use for the analog input Returns: An instance of the AnalogIn class Examples: ana1 = AnalogIn(brain.three_wire_port.a) changed ( callback , arg = ()) Register a function to be called when the value of the analog input changes Arguments: callback : A function that will be called when the value of the analog input changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"analog input changed\") ana1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the analog input Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get analog input in range 0 - 4095\\ value = ana1.value() # get analog input in range 0 - 1023\\ value = ana1.value(AnalogUnits.TENBIT) Encoder vex.Encoder Encoder class - create a new encoder sensor An encoder uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h Arguments: port : The 3wire port to use for the encoder sensor Returns: An instance of the Encoder class Examples: enc1 = Encoder(brain.three_wire_port.a) position ( units = RotationUnits . DEG ) The current position of the encoder Arguments: units (optional) : The rotation units to return the position value in, default is DEGREES. Returns: A value for encoder position in the specified units. Examples: # get encoder position\\ value = enc1.position() reset_position () Reset the encoder position to 0 Arguments: None Returns: None set_position ( value , units = RotationUnits . DEG ) set the encoder position to a new value Arguments: value : The new value to use for position. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of position to 180 degrees\\ enc1.set_position(180) value () The current value of the encoder in raw counts One full turn of the encoder is 360 counts. Arguments: None Returns: A value for encoder counts. Examples: # get encoder raw counts\\ value = enc1.value() velocity ( units = VelocityUnits . RPM ) The current velocity of the encoder Arguments: units (optional) : The velocity units to return the value in, default is RPM. Returns: A value for encoder velocity in the specified units. Examples: # get encoder velocity in rpm\\ value = enc1.velocity() Sonar vex.Sonar Sonar class - create a new sonar (ultrasonic) sensor A sonar uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h\\ connect the wire labeled \"output\" to the lower 3wire port, eg. a Arguments: port : The 3wire port to use for the sonar sensor Returns: An instance of the Sonar class Examples: sonar1 = Sonar(brain.three_wire_port.a) distance ( units ) The current distance the sonar is detecting an object at. The sonar will return a large positive number if no object is detected in range. Arguments: units : The distance units to return the position value in. Returns: A value for sonar distance in the specified units. Examples: # get sonar distance in mm\\ value = sonar1.distance(MM) found_object () Check for an object in the range 0 - 1000mm The sonar will return True if an object is detected closer than 1000mm. Arguments: None Returns: True of an object is detected. Examples: # is an object closer than 1000mm\\ if sonar1.found_object():\\ print(\"object found\") value ( units = AnalogUnits . TWELVEBIT ) The current value of the sonar This method has no practical use, see distance. Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get sonar raw value\\ value = sonar1.value() PWM vex.Pwm Pwm class - create a new pwm output The pwm class will create raw RC style pwm waveform.\\ A pwm output of 0% corresponds to pulse width of 1.5mS every 16mS\\ A pwm output of 100% corresponds to pulse width of 2mS\\ A pwm output of -100% corresponds to pulse width of 1mS Arguments: port : The 3wire port to use for the pwm output Returns: An instance of the Pwm class Examples: pwm1 = Pwm(brain.three_wire_port.a) state ( value , units = PercentUnits . PERCENT ) Set the current PWM value in percent. Arguments: value : The new value for pwm output, -100 to +100 percent. units (optional) : units must be specified in PERCENT Returns: None Examples: # set pwm1 output to 50%\\ pwm1.state(50) value () Read the current PWM value in percent. Arguments: None Returns: A value in the range -100 to +100 percent. Examples: # get pwm1 current value\\ value = pwm1.value() Servo vex.Servo Servo class - create a new servo output The Servo class will create raw RC style pwm waveform.\\ An output of 0 corresponds to pulse width of 1.5mS every 16mS\\ An output of 50 degrees corresponds to pulse width of 2mS\\ An output of -50 degrees corresponds to pulse width of 1mS Arguments: port : The 3wire port to use for the servo output Returns: An instance of the Servo class Examples: servo1 = Servo(brain.three_wire_port.a) set_position ( value , units = RotationUnits . DEG ) Set the servo position Arguments: value : The new value for the servo using the supplied units. units (optional) : The rotation units, default is PERCENT Returns: None Examples: # set servo output to 10 degrees\\ servo1.set_position(10, DEGREES) value () Read the current raw servo pwm value. This is the raw internal pwm value\\ A servo position of 0 will return 127\\ A maximum positive servo position will return 255 Arguments: None Returns: A value in the range 0 to 255. Examples: # get servo1 current value\\ value = servo1.value() Potentiometer vex.Potentiometer Potentiometer class - create a new potentiometer Arguments: port : The 3wire port to use for the potentiometer Returns: An instance of the Potentiometer class Examples: pot1 = Potentiometer(brain.three_wire_port.a) angle ( units = RotationUnits . DEG ) The current angle of the potentiometer Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT) changed ( callback , arg = ()) Register a function to be called when the value of the potentiometer changes Arguments: callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"pot changed\") pot1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the potentiometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT) Potentiometer V2 vex.PotentiometerV2 PotentiometerV2 class - create a new potentiometer Arguments: port : The 3wire port to use for the potentiometer Returns: An instance of the PotentiometerV2 class Examples: pot1 = PotentiometerV2(brain.three_wire_port.a) angle ( units = RotationUnits . DEG ) The current angle of the potentiometer Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT) changed ( callback , arg = ()) Register a function to be called when the value of the potentiometer changes Arguments: callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"pot changed\") pot1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the potentiometer Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT) Line Sensor vex.Line Line class - create a new line sensor Arguments: port : The 3wire port to use for the line sensor Returns: An instance of the Line class Examples: line1 = Line(brain.three_wire_port.a) changed ( callback , arg = ()) Register a function to be called when the value of the line sensor changes Arguments: callback : A function that will be called when the value of the line sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"line sensor changed\") line1.changed(foo) reflectivity ( units = PercentUnits . PERCENT ) The current reflectivity of the line sensor The reflectivity of the line sensor is an estimation based on the raw value of the sensor.\\ A reflectivity of 0% is a raw value of approximated 3000 or greater\\ A reflectivity of 100% is a raw value of 0 Arguments: units (optional) : The only valid value is PERCENT Returns: A value in the range 0 to 100% Examples: # get line sensor reflectivity in range of 0 -100%\\ value = line1.reflectivity() value ( units = AnalogUnits . TWELVEBIT ) The current value of the line sensor Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get line sensor in range 0 - 4095\\ value = line1.value() # get line sensor in range 0 - 1023\\ value = line1.value(AnalogUnits.TENBIT) Light Sensor vex.Light Light class - create a new light sensor Arguments: port : The 3wire port to use for the light sensor Returns: An instance of the Light class Examples: light1 = Light(brain.three_wire_port.a) brightness ( units = PercentUnits . PERCENT ) The current brightness of light falling on the light sensor The brightness of the light sensor is an estimation based on the raw value of the sensor.\\ A brightness of 0% is a raw value of approximated 900 or greater\\ A brightness of 100% is a raw value of 0 Arguments: units (optional) : The only valid value is PERCENT Returns: A value in the range 0 to 100% Examples: # get light sensor brightness in range of 0 -100%\\ value = light1.brightness() changed ( callback , arg = ()) Register a function to be called when the value of the light sensor changes Arguments: callback : A function that will be called when the value of the light sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"light sensor changed\") light1.changed(foo) value ( units = AnalogUnits . TWELVEBIT ) The current value of the light sensor Arguments: units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog Returns: A value in the range that is specified by the units. Examples: # get light sensor in range 0 - 4095\\ value = light1.value() # get light sensor in range 0 - 1023\\ value = light1.value(AnalogUnits.TENBIT) Gyro vex.Gyro Gyro class - create a new gyro sensor Arguments: port : The 3wire port to use for the gyro sensor Returns: An instance of the Gyro class Examples: gyro1 = Gyro(brain.three_wire_port.a) calibrate () Start calibration of the gyro Calibration should done when the gyro is not moving. Arguments: None Returns: None Examples: # start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC) changed ( callback , arg = ()) Register a function to be called when the value of the gyro heading changes Arguments: callback : A function that will be called when the value of the gyro heading changes arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"gyro changed\") gyro1.changed(foo) get_turn_type () get the direction that returns positive values for heading An advanced function that is not generally used. Arguments: None Returns: The current TurnType, LEFT or RIGHT heading ( units = RotationUnits . DEG ) read the current heading of the gyro heading will be returned in the range 0 - 359.99 degrees Arguments: units (optional) : The units to return the heading in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current heading for the gyro\\ value = gyro1.heading() is_calibrating () check the calibration status of the gyro Calibration should done when the gyro is not moving. Arguments: None Returns: True when the gyro is calibrating Examples: # start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC) reset_heading () Reset the gyro heading to 0 Arguments: None Returns: None reset_rotation () Reset the gyro rotation to 0 Arguments: None Returns: None rotation ( units = RotationUnits . DEG ) read the current rotation of the gyro rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro. Arguments: units (optional) : The units to return the rotation in, default is DEGREES Returns: A value for heading in the range that is specified by the units. Examples: # get the current rotation for the gyro\\ value = gyro1.rotation() set_heading ( value , units = RotationUnits . DEG ) set the gyro heading to a new value The new value for heading should be in the range 0 - 359.99 degrees. Arguments: value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of heading to 180 degrees\\ gyro1.set_heading(180) set_rotation ( value , units = RotationUnits . DEG ) set the gyro rotation to a new value Arguments: value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES Returns: None Examples: # set the value of rotation to 180 degrees\\ gyro1.set_rotation(180) set_turn_type ( turntype ) set the direction that returns positive values for heading An advanced function that is not generally used. Arguments: turntype : TurnType.LEFT or TurnType.RIGHT Returns: None value ( units = DEGREES ) The current value of the gyro This method is generally not used, see heading() and rotation() Arguments: units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES Returns: A value in the range that is specified by the units. Examples: # get gyro value in range 0 - 360 degrees\\ value = gyro1.value() Limit Switch vex.Limit Limit class - create a new limit switch Arguments: port : The 3wire port the limit switch is connected to Returns: An instance of the Limit class Examples: limit1 = Limit(brain.three_wire_port.a) pressed ( callback , arg = ()) Register a function to be called when the limit switch is pressed Arguments: callback : A function that will be called when the limit switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch pressed\") limit1.pressed(foo) pressing () Returns whether the limit switch is currently being pressed Arguments: None Returns: True or False released ( callback , arg = ()) Register a function to be called when the limit switch is released Arguments: callback : A function that will be called when the limit switch is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch released\") limit1.released(foo) value () The current value of the limit switch Arguments: None Returns: 1 or 0 Bumper vex.Bumper Bumper class - create a new bumper switch Arguments: port : The 3wire port the bumper switch is connected to Returns: An instance of the Bumper class Examples: bumper1 = Bumper(brain.three_wire_port.a) pressed ( callback , arg = ()) Register a function to be called when the bumper switch is pressed Arguments: callback : A function that will be called when the bumper switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch pressed\") bumper1.pressed(foo) pressing () Returns whether the bumper switch is currently being pressed Arguments: None Returns: True or False released ( callback , arg = ()) Register a function to be called when the bumper switch is released Arguments: callback : A function that will be called when the bumper switch is released arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"switch released\") bumper1.released(foo) value () The current value of the bumper switch Arguments: None Returns: 1 or 0 Digital Input vex.DigitalIn DigitalIn class - create a new digital input Arguments: port : The 3wire port to use for the digital input Returns: An instance of the DigitalIn class Examples: dig1 = DigitalIn(brain.three_wire_port.a) high ( callback , arg = ()) Register a function to be called when the digital input goes to the logic high state Arguments: callback : A function that will be called when the digital input goes to the logic high state arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"input high\") dig1.high(foo) low ( callback , arg = ()) Register a function to be called when the digital input goes to the logic low state Arguments: callback : A function that will be called when the digital input goes to the logic low state arg (optional) : A tuple that is used to pass arguments to the callback function. Returns: An instance of the Event class Examples: def foo(): print(\"input low\") dig1.low(foo) value () The current value of the digital input Arguments: None Returns: 1 or 0 Digital Output vex.DigitalOut DigitalOut class - create a new digital output Arguments: port : The 3wire port to use for the digital output Returns: An instance of the DigitalOut class Examples: dig1 = DigitalOut(brain.three_wire_port.a) set ( value ) Set the output level for the digital output Arguments: value : 0, 1, True or False Returns: None Examples: dig1.set(True) value () The current value of the digital output Arguments: None Returns: 1 or 0 LED vex.Led Led class - create a new led Arguments: port : The 3wire port to use for the led Returns: An instance of the Led class Examples: led1 = Led(brain.three_wire_port.a) off () Turn the led off Arguments: None Returns: None Examples: led1.off() on () Turn the led on Arguments: None Returns: None Examples: led1.on() value () The current value of the led Arguments: None Returns: 1 or 0 Pneumatics vex.Pneumatics Pneumatics class - create a new pneumatics driver class Arguments: port : The 3wire port to use for the pneumatics Returns: An instance of the Pneumatics class Examples: p1 = Pneumatics(brain.three_wire_port.a) close () Set the pneumatics driver to the close state Arguments: None Returns: None Examples: p1.close() open () Set the pneumatics driver to the open state Arguments: None Returns: None Examples: p1.open() value () The current state of the pneumatics driver Arguments: None Returns: 1 or 0 Vision Sensor vex.Vision Vision class - a class for working with the vision sensor Arguments: port : The smartport this device is attached to brightness (optional) : set the brightness value for the vision sensor sigs (optional) : one or more signature objects Returns: An instance of the Vision class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1) installed () Check for device connection Arguments: None Returns: True or False take_snapshot ( index , count = 1 ) Request the vision sensor to filter latest objects to match signature or code Arguments: index : A signature, code or signature id. count (optional) : the maximum number of objects to obtain. default is 1. Returns: tuple of VisionObject or None if nothing is available Examples: # look for and return 1 object matching SIG_1\\ objects = vision1.take_snapshot(SIG_1) # look for and return a maximum of 4 objects matching SIG_1\\ objects = vision1.take_snapshot(SIG_1, 4) timestamp () Request the timestamp of last received message from the vision sensor Arguments: None Returns: timestamp of the last status packet in mS Vision Object vex.VisionObject A vision object, not instantiated by user programs Signature vex.Signature Signature class - a class for holding vision sensor signatures Arguments: index : The signature index p0 : signature value p0 p1 : signature value p1 p2 : signature value p2 p3 : signature value p3 p4 : signature value p4 p5 : signature value p5 sigrange : signature range sigtype : signature type Returns: An instance of the Signature class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1) id () Not used, always returns 0 Code vex.Code Code class - a class for holding vision sensor codes A vision code is a collection of up to five vision signatures. Arguments: sig1 : A vision signature sig2 : A vision signature sig3 (optional) : A vision signature sig4 (optional) : A vision signature sig5 (optional) : A vision signature Returns: An instance of the Signature class Examples: SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ SIG_2 = Signature(2, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ C1 = Code(SIG_1, SIG_2) id () Not used, always returns 0 Message Link vex.MessageLink MessageLink class - a class for communicating using VEXlink Arguments: port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link Returns: An instance of the MessageLink class Examples: link = MessageLink(Ports.PORT1, 'james', VexlinkType.MANAGER) installed () Check for device connection Arguments: None Returns: True or False is_linked () Return link status Arguments: None Returns: True if the link is active and connected to the paired brain. receive ( timeout = 300000 ) Receive the next message Arguments: timeout (optional) : An optional timeout value in mS before the function returns. Returns: None or received message Examples: message = link.receive() received ( * args ) Register a function to be called when a message is received If the message is omitted then the callback will be called for all messages. Arguments: message (optional) : A message name for which the callback will be called callback : A function that will be called when a message is received Returns: None Examples: def cb(message, link, index, value): print(link, message, index, value) link.received('test', cb) send ( message , * args ) Send a message with optional parameters Arguments: message : A string, the message to send index (optional) : A int such as port number value (optional) : A float Returns: length of transmitted data or None on error Examples: # send the message 'test' with no parameters\\ link.send('test') # send the message 'test' with parameters\\ link.send('test', 1, 3.14) Serial Link vex.SerialLink SerialLink class - a class for communicating using VEXlink Arguments: port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link Returns: An instance of the SerialLink class Examples: link = SerialLink(Ports.PORT1, 'james', VexlinkType.MANAGER) installed () Check for device connection Arguments: None Returns: True or False is_linked () Return link status Arguments: None Returns: True if the link is active and connected to the paired brain. receive ( length , timeout = 300000 ) Receive data in the serial link Arguments: length : maximum amount of data to wait for timeout (optional) : An optional timeout value in mS before the function returns. Returns: None or bytearray with data Examples: # wait for 128 bytes of data for 1000mS\\ buffer = link.receive(128, 1000) received ( callback ) Register a function to be called when data is received This will receive a bytearray and a length indicating how much Arguments: callback : A function that will be called when data is received Returns: None Examples: def cb(buffer, length): print(buffer, length) link.received(cb) send ( buffer ) Send a buffer of length length Arguments: buffer : A string or bytearray, the message to send Returns: None Examples: # send the string 'test'\\ link.send('test') # send the bytearray 'test' with parameters\\ link.send('test', 1, 3.14) Addressable LED vex.AddressableLed Addressable led class Arguments: port : The 3wire port to use for the addressable led strip Returns: An instance of the AddressableLed class Examples: addr1 = AddressableLed(brain.three_wire_port.a) clear () clear all addressable led to off Arguments: None Returns: None Examples: addr1.clear() set ( data , offset = 0 ) Set the addressable led strip to provided values Arguments: data : An list of Color values offset (optional) : index of led to start at, 0 based Returns: None Examples: addr1 = AddressableLed(brain.three_wire_port.a)\\ pix = [Color(0x800000),Color(0x008000),Color(0x000080)]\\ addr1.set(pix)","title":"Sensors"},{"location":"SDK/sensors/#sensors","text":"This page documents the VEX V5 sensor classes available in the DishPy SDK. Each class provides an interface to a specific VEX sensor, with methods for reading data and controlling sensor behavior.","title":"Sensors"},{"location":"SDK/sensors/#gps-sensor","text":"","title":"GPS Sensor"},{"location":"SDK/sensors/#vex.Gps","text":"","title":"Gps"},{"location":"SDK/sensors/#vex.Gps--gps-class-a-class-for-working-with-the-gps-sensor","text":"","title":"Gps class - a class for working with the gps sensor"},{"location":"SDK/sensors/#vex.Gps--arguments","text":"port : The smartport this device is attached to origin_x (optional) : The X location of the GPS with respect to origin of the robot. origin_y (optional) : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps--returns","text":"An instance of the Gps class","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps--examples","text":"gps1 = Gps(Ports.PORT1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.acceleration","text":"","title":"acceleration"},{"location":"SDK/sensors/#vex.Gps.acceleration--read-the-acceleration-for-one-axis-of-the-gps","text":"","title":"read the acceleration for one axis of the gps"},{"location":"SDK/sensors/#vex.Gps.acceleration--arguments","text":"axis : The axis to read","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.acceleration--returns","text":"A value for the acceleration of the axis in units of gravity.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.acceleration--examples","text":"# get the acceleration for the Z axis of the gps\\ zaccel = gps1.acceleration(ZAXIS)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.calibrate","text":"not used on the GPS sensor","title":"calibrate"},{"location":"SDK/sensors/#vex.Gps.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Gps.changed--register-a-function-to-be-called-when-the-value-of-the-gps-heading-changes","text":"This is not particularly useful as gps heading is not stable and will cause many events.","title":"Register a function to be called when the value of the gps heading changes"},{"location":"SDK/sensors/#vex.Gps.changed--arguments","text":"callback : A function that will be called when the value of the gps heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.changed--examples","text":"def foo(): print(\"heading changed\") gps1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/sensors/#vex.Gps.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Gps.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.gyro_rate","text":"","title":"gyro_rate"},{"location":"SDK/sensors/#vex.Gps.gyro_rate--read-the-gyro-rate-for-one-axis-of-the-gps","text":"","title":"read the gyro rate for one axis of the gps"},{"location":"SDK/sensors/#vex.Gps.gyro_rate--arguments","text":"axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.gyro_rate--returns","text":"A value for the gyro rate of the axis in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.gyro_rate--examples","text":"# get the gyro rate for the Z axis of the gps\\ zrate = gps1.gyro_rate(ZAXIS)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.heading","text":"","title":"heading"},{"location":"SDK/sensors/#vex.Gps.heading--read-the-current-heading-of-the-gps","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the gps"},{"location":"SDK/sensors/#vex.Gps.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.heading--examples","text":"# get the current heading for the gps\\ value = gps1.heading()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Gps.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Gps.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.is_calibrating","text":"not used on the GPS sensor","title":"is_calibrating"},{"location":"SDK/sensors/#vex.Gps.orientation","text":"","title":"orientation"},{"location":"SDK/sensors/#vex.Gps.orientation--read-the-orientation-for-one-axis-of-the-gps","text":"","title":"read the orientation for one axis of the gps"},{"location":"SDK/sensors/#vex.Gps.orientation--arguments","text":"axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.orientation--returns","text":"A value for the axis orientation in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.orientation--examples","text":"# get the pitch value for the gps\\ pitch = gps1.orientation(OrientationType.PITCH)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.quality","text":"","title":"quality"},{"location":"SDK/sensors/#vex.Gps.quality--read-the-current-quality-of-the-gps-data","text":"A quality of 100 indicates the gps can see the gps field strip and is returning good readings\\ The value for quality will reduce as the confidence in x and y location lowers.","title":"read the current quality of the gps data"},{"location":"SDK/sensors/#vex.Gps.quality--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.quality--returns","text":"A value of quality in the range 0 to 100","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.quality--examples","text":"# get the current location and heading quality for the gps\\ q = gps1.quality()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/sensors/#vex.Gps.reset_heading--reset-the-gps-heading-to-0","text":"","title":"Reset the gps heading to 0"},{"location":"SDK/sensors/#vex.Gps.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/sensors/#vex.Gps.reset_rotation--reset-the-gps-rotation-to-0","text":"","title":"Reset the gps rotation to 0"},{"location":"SDK/sensors/#vex.Gps.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.rotation","text":"","title":"rotation"},{"location":"SDK/sensors/#vex.Gps.rotation--read-the-current-rotation-of-the-gps","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps.","title":"read the current rotation of the gps"},{"location":"SDK/sensors/#vex.Gps.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.rotation--examples","text":"# get the current rotation for the gps\\ value = gps1.rotation()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_heading","text":"","title":"set_heading"},{"location":"SDK/sensors/#vex.Gps.set_heading--set-the-gps-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the gps heading to a new value"},{"location":"SDK/sensors/#vex.Gps.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.set_heading--examples","text":"# set the value of heading to 180 degrees\\ gps1.set_heading(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_location","text":"","title":"set_location"},{"location":"SDK/sensors/#vex.Gps.set_location--set-the-initial-location-of-the-robot","text":"This gives a hint as to the location of the robot/gps sensor when it is first initialized.\\ This can be used if in the initial position the gps cannot see the gps field strip.","title":"set the initial location of the robot"},{"location":"SDK/sensors/#vex.Gps.set_location--arguments","text":"x : The initial X coordinate. y : The initial Y coordinate.\\ note. both X and Y must be supplied units (optional) : The units that X and Y coordinates are specified in, default is MM angle (optional) : The initial heading of the robot. units_r (optional) : The units that angle is specified in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_location--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.set_location--examples","text":"# set the initial location of the gps\\ gps1.set_location(1000, -1000, MM, 90, DEGREES)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_origin","text":"","title":"set_origin"},{"location":"SDK/sensors/#vex.Gps.set_origin--set-the-origin-of-the-gps-sensor","text":"An alternate way of setting sensor origin if not provided in the Gps class constructor.","title":"set the origin of the gps sensor"},{"location":"SDK/sensors/#vex.Gps.set_origin--arguments","text":"x : The X location of the GPS with respect to origin of the robot. y : The Y location of the GPS with respect to origin of the robot.\\ note. both X and Y must be supplied units (optional) : The units that X and Y location are specified in, default is MM","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_origin--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.set_origin--examples","text":"# set the origin of the gps\\ gps1.set_origin(6, -6, INCHES)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/sensors/#vex.Gps.set_rotation--set-the-gps-rotation-to-a-new-value","text":"","title":"set the gps rotation to a new value"},{"location":"SDK/sensors/#vex.Gps.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ gps1.set_rotation(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_sensor_rotation","text":"","title":"set_sensor_rotation"},{"location":"SDK/sensors/#vex.Gps.set_sensor_rotation--set-the-sensor-rotation-of-the-gps-sensor-with-respect-to-the-robot","text":"This allows heading and rotation methods to return angles relative to the robot rather than the gps.","title":"set the sensor rotation of the gps sensor with respect to the robot."},{"location":"SDK/sensors/#vex.Gps.set_sensor_rotation--arguments","text":"value : The angle of the GPS with respect to the robot. units (optional) : The units that value is specified in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_sensor_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.set_sensor_rotation--examples","text":"# set the sensor rotation of the gps\\ gps1.set_sensor_rotation(180, DEGREES)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/sensors/#vex.Gps.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Gps.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Gps.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Gps.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.x_position","text":"","title":"x_position"},{"location":"SDK/sensors/#vex.Gps.x_position--read-the-current-x-coordinate-of-the-gps","text":"","title":"read the current x coordinate of the gps"},{"location":"SDK/sensors/#vex.Gps.x_position--arguments","text":"units (optional) : The units to return the position in, default is MM","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.x_position--returns","text":"A value for the x coordinate in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.x_position--examples","text":"# get the current x coordinate for the gps\\ posx = gps1.x_position()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gps.y_position","text":"","title":"y_position"},{"location":"SDK/sensors/#vex.Gps.y_position--read-the-current-y-coordinate-of-the-gps","text":"","title":"read the current y coordinate of the gps"},{"location":"SDK/sensors/#vex.Gps.y_position--arguments","text":"units (optional) : The units to return the position in, default is MM","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gps.y_position--returns","text":"A value for the y coordinate in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gps.y_position--examples","text":"# get the current y coordinate for the gps\\ posy = gps1.y_position()","title":"Examples:"},{"location":"SDK/sensors/#inertial-sensor","text":"","title":"Inertial Sensor"},{"location":"SDK/sensors/#vex.Inertial","text":"","title":"Inertial"},{"location":"SDK/sensors/#vex.Inertial--inertial-class-a-class-for-working-with-the-inertial-sensor","text":"","title":"Inertial class - a class for working with the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial--returns","text":"An instance of the Inertial class","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial--examples","text":"imu1 = Inertial(Ports.PORT1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.acceleration","text":"","title":"acceleration"},{"location":"SDK/sensors/#vex.Inertial.acceleration--read-the-acceleration-for-one-axis-of-the-inertial-sensor","text":"","title":"read the acceleration for one axis of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.acceleration--arguments","text":"axis : The axis to read","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.acceleration--returns","text":"A value for the acceleration of the axis in units of gravity.","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.acceleration--examples","text":"# get the acceleration for the Z axis of the inertial sensor\\ zaccel = imu1.acceleration(ZAXIS)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.calibrate","text":"","title":"calibrate"},{"location":"SDK/sensors/#vex.Inertial.calibrate--start-calibration-of-the-inertial-sensor","text":"Calibration should done when the inertial sensor is not moving.","title":"Start calibration of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.calibrate--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.calibrate--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.calibrate--examples","text":"# start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Inertial.changed--register-a-function-to-be-called-when-the-value-of-the-inertial-sensor-heading-changes","text":"","title":"Register a function to be called when the value of the inertial sensor heading changes"},{"location":"SDK/sensors/#vex.Inertial.changed--arguments","text":"callback : A function that will be called when the value of the inertial sensor heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.changed--examples","text":"def foo(): print(\"heading changed\") imu1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.collision","text":"","title":"collision"},{"location":"SDK/sensors/#vex.Inertial.collision--register-a-function-to-be-called-when-the-inertial-sensor-detects-a-collision","text":"","title":"Register a function to be called when the inertial sensor detects a collision"},{"location":"SDK/sensors/#vex.Inertial.collision--arguments","text":"callback : A function that will be called when the inertial sensor detects a collision arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.collision--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.collision--examples","text":"def foo(): print(\"collision\") imu1.collision(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/sensors/#vex.Inertial.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Inertial.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.gyro_rate","text":"","title":"gyro_rate"},{"location":"SDK/sensors/#vex.Inertial.gyro_rate--read-the-gyro-rate-for-one-axis-of-the-inertial-sensor","text":"","title":"read the gyro rate for one axis of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.gyro_rate--arguments","text":"axis : The axis to read units (optional) : The units to return the gyro rate in, default is DPS","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.gyro_rate--returns","text":"A value for the gyro rate of the axis in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.gyro_rate--examples","text":"# get the gyro rate for the Z axis of the inertial sensor\\ zrate = imu1.gyro_rate(ZAXIS)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.heading","text":"","title":"heading"},{"location":"SDK/sensors/#vex.Inertial.heading--read-the-current-heading-of-the-inertial-sensor","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.heading--examples","text":"# get the current heading for the inertial sensor\\ value = imu1.heading()","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Inertial.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Inertial.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.is_calibrating","text":"","title":"is_calibrating"},{"location":"SDK/sensors/#vex.Inertial.is_calibrating--check-the-calibration-status-of-the-inertial-sensor","text":"Calibration should done when the inertial sensor is not moving.","title":"check the calibration status of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.is_calibrating--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.is_calibrating--returns","text":"True when the inertial sensor is calibrating","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.is_calibrating--examples","text":"# start calibration\\ imu1.calibrate()\\ # wait for completion\\ while imu1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.orientation","text":"","title":"orientation"},{"location":"SDK/sensors/#vex.Inertial.orientation--read-the-orientation-for-one-axis-of-the-inertial-sensor","text":"","title":"read the orientation for one axis of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.orientation--arguments","text":"axis : The axis to read units (optional) : The units to return the orientation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.orientation--returns","text":"A value for the axis orientation in the units specified.","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.orientation--examples","text":"# get the pitch value for the inertial sensor\\ pitch = imu1.orientation(OrientationType.PITCH)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/sensors/#vex.Inertial.reset_heading--reset-the-inertial-sensor-heading-to-0","text":"","title":"Reset the inertial sensor heading to 0"},{"location":"SDK/sensors/#vex.Inertial.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/sensors/#vex.Inertial.reset_rotation--reset-the-inertial-sensor-rotation-to-0","text":"","title":"Reset the inertial sensor rotation to 0"},{"location":"SDK/sensors/#vex.Inertial.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.rotation","text":"","title":"rotation"},{"location":"SDK/sensors/#vex.Inertial.rotation--read-the-current-rotation-of-the-inertial-sensor","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gps.","title":"read the current rotation of the inertial sensor"},{"location":"SDK/sensors/#vex.Inertial.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.rotation--examples","text":"# get the current rotation for the inertial sensor\\ value = imu1.rotation()","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.set_heading","text":"","title":"set_heading"},{"location":"SDK/sensors/#vex.Inertial.set_heading--set-the-inertial-sensor-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the inertial sensor heading to a new value"},{"location":"SDK/sensors/#vex.Inertial.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.set_heading--examples","text":"# set the value of heading to 180 degrees\\ imu1.set_heading(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/sensors/#vex.Inertial.set_rotation--set-the-inertial-sensor-rotation-to-a-new-value","text":"","title":"set the inertial sensor rotation to a new value"},{"location":"SDK/sensors/#vex.Inertial.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ imu1.set_rotation(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Inertial.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/sensors/#vex.Inertial.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Inertial.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Inertial.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Inertial.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Inertial.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Inertial.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#rotation-sensor","text":"","title":"Rotation Sensor"},{"location":"SDK/sensors/#vex.Rotation","text":"","title":"Rotation"},{"location":"SDK/sensors/#vex.Rotation--rotation-class-a-class-for-working-with-the-rotation-sensor","text":"","title":"Rotation class - a class for working with the rotation sensor"},{"location":"SDK/sensors/#vex.Rotation--arguments","text":"port : The smartport this device is attached to reverse (optional) : set to reverse the angle and position returned by the sensor.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation--returns","text":"An instance of the Rotation class","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation--examples","text":"rot1 = Rotation(Ports.PORT1)\\ rot2 = Rotation(Ports.PORT2, True)","title":"Examples:"},{"location":"SDK/sensors/#vex.Rotation.angle","text":"","title":"angle"},{"location":"SDK/sensors/#vex.Rotation.angle--the-current-angle-of-the-rotation-sensor","text":"","title":"The current angle of the rotation sensor"},{"location":"SDK/sensors/#vex.Rotation.angle--arguments","text":"units (optional) : A valid RotationUnits type, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.angle--examples","text":"# get rotation sensor angle angle = rot1.angle()","title":"Examples:"},{"location":"SDK/sensors/#vex.Rotation.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Rotation.changed--register-a-function-to-be-called-when-the-value-of-the-rotation-sensor-changes","text":"","title":"Register a function to be called when the value of the rotation sensor changes"},{"location":"SDK/sensors/#vex.Rotation.changed--arguments","text":"callback : A function that will be called when the value of the rotation sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.changed--examples","text":"def foo(): print(\"rotation changed\") rot1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Rotation.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Rotation.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Rotation.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.position","text":"","title":"position"},{"location":"SDK/sensors/#vex.Rotation.position--returns-the-position-of-the-rotation-sensor","text":"The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated.","title":"Returns the position of the rotation sensor"},{"location":"SDK/sensors/#vex.Rotation.position--arguments","text":"units (optional) : The units for the returned position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.position--returns","text":"The rotation sensor in provided units","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.reset_position","text":"","title":"reset_position"},{"location":"SDK/sensors/#vex.Rotation.reset_position--reset-the-rotation-sensor-position-to-0","text":"","title":"Reset the rotation sensor position to 0"},{"location":"SDK/sensors/#vex.Rotation.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.set_position","text":"","title":"set_position"},{"location":"SDK/sensors/#vex.Rotation.set_position--set-the-current-position-of-the-rotation-sensor","text":"The position returned by the position() function is set to this value. The position is an absolute value that continues to increase or decrease as the\\ sensor is rotated.","title":"Set the current position of the rotation sensor"},{"location":"SDK/sensors/#vex.Rotation.set_position--arguments","text":"value : The new position units : The units for the provided position, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.set_reversed","text":"","title":"set_reversed"},{"location":"SDK/sensors/#vex.Rotation.set_reversed--set-the-reversed-flag-for-the-sensor","text":"Usually this would be done in the constructor.","title":"Set the reversed flag for the sensor"},{"location":"SDK/sensors/#vex.Rotation.set_reversed--arguments","text":"value : 1, 0, True or False","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.set_reversed--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.set_reversed--examples","text":"# set reversed flag True\\ rot1.set_reversed(True)","title":"Examples:"},{"location":"SDK/sensors/#vex.Rotation.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Rotation.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Rotation.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#vex.Rotation.velocity","text":"","title":"velocity"},{"location":"SDK/sensors/#vex.Rotation.velocity--returns-the-velocity-of-the-rotation-sensor","text":"","title":"Returns the velocity of the rotation sensor"},{"location":"SDK/sensors/#vex.Rotation.velocity--arguments","text":"units (optional) : The units for the returned velocity, the default is RPM","title":"Arguments:"},{"location":"SDK/sensors/#vex.Rotation.velocity--returns","text":"The rotation sensor velocity in provided units","title":"Returns:"},{"location":"SDK/sensors/#optical-sensor","text":"","title":"Optical Sensor"},{"location":"SDK/sensors/#vex.Optical","text":"","title":"Optical"},{"location":"SDK/sensors/#vex.Optical--optical-class-a-class-for-working-with-the-optical-sensor","text":"","title":"Optical class - a class for working with the optical sensor"},{"location":"SDK/sensors/#vex.Optical--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical--returns","text":"An instance of the Optical class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical--examples","text":"opt1 = Optical(Ports.PORT1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.brightness","text":"","title":"brightness"},{"location":"SDK/sensors/#vex.Optical.brightness--read-the-brightness-value-from-the-optical-sensor","text":"","title":"read the brightness value from the optical sensor"},{"location":"SDK/sensors/#vex.Optical.brightness--arguments","text":"readraw (optional) : return raw brightness value if True rather than percentage.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.brightness--returns","text":"brightness as a float in the range 0 - 100%","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.brightness--examples","text":"brightness = opt1.brightness()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.color","text":"","title":"color"},{"location":"SDK/sensors/#vex.Optical.color--read-the-color-from-the-optical-sensor","text":"","title":"read the color from the optical sensor"},{"location":"SDK/sensors/#vex.Optical.color--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.color--returns","text":"color as an instance of the Color class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.color--examples","text":"c = opt1.color()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_disable","text":"","title":"gesture_disable"},{"location":"SDK/sensors/#vex.Optical.gesture_disable--disable-gesture-mode","text":"","title":"Disable gesture mode"},{"location":"SDK/sensors/#vex.Optical.gesture_disable--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_disable--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_disable--examples","text":"opt1.gesture_disable()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_down","text":"","title":"gesture_down"},{"location":"SDK/sensors/#vex.Optical.gesture_down--register-a-function-to-be-called-when-a-gesture-down-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture down event is detected"},{"location":"SDK/sensors/#vex.Optical.gesture_down--arguments","text":"callback : A function that will be called when a gesture down event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_down--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_down--examples","text":"def foo(): print(\"down detected\") opt1.gesture_down(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_enable","text":"","title":"gesture_enable"},{"location":"SDK/sensors/#vex.Optical.gesture_enable--enable-gesture-mode","text":"","title":"Enable gesture mode"},{"location":"SDK/sensors/#vex.Optical.gesture_enable--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_enable--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_enable--examples","text":"opt1.gesture_enable()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_left","text":"","title":"gesture_left"},{"location":"SDK/sensors/#vex.Optical.gesture_left--register-a-function-to-be-called-when-a-gesture-left-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture left event is detected"},{"location":"SDK/sensors/#vex.Optical.gesture_left--arguments","text":"callback : A function that will be called when a gesture left event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_left--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_left--examples","text":"def foo(): print(\"left detected\") opt1.gesture_left(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_right","text":"","title":"gesture_right"},{"location":"SDK/sensors/#vex.Optical.gesture_right--register-a-function-to-be-called-when-a-gesture-right-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture right event is detected"},{"location":"SDK/sensors/#vex.Optical.gesture_right--arguments","text":"callback : A function that will be called when a gesture right event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_right--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_right--examples","text":"def foo(): print(\"right detected\") opt1.gesture_right(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.gesture_up","text":"","title":"gesture_up"},{"location":"SDK/sensors/#vex.Optical.gesture_up--register-a-function-to-be-called-when-a-gesture-up-event-is-detected","text":"gesture must be enabled for events to fire.","title":"Register a function to be called when a gesture up event is detected"},{"location":"SDK/sensors/#vex.Optical.gesture_up--arguments","text":"callback : A function that will be called when a gesture up event is detected arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.gesture_up--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.gesture_up--examples","text":"def foo(): print(\"up detected\") opt1.gesture_up(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.get_gesture","text":"","title":"get_gesture"},{"location":"SDK/sensors/#vex.Optical.get_gesture--get-gesture-data","text":"","title":"get gesture data"},{"location":"SDK/sensors/#vex.Optical.get_gesture--arguments","text":"newobject (optional) : create a new Gesture object to return data in","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.get_gesture--returns","text":"An object with the last gesture data","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.get_gesture--examples","text":"opt1.gesture_disable()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.hue","text":"","title":"hue"},{"location":"SDK/sensors/#vex.Optical.hue--read-the-hue-value-from-the-optical-sensor","text":"","title":"read the hue value from the optical sensor"},{"location":"SDK/sensors/#vex.Optical.hue--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.hue--returns","text":"hue as a float in the range 0 - 359.99 degrees","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.hue--examples","text":"hue = opt1.hue()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Optical.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Optical.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.integration_time","text":"","title":"integration_time"},{"location":"SDK/sensors/#vex.Optical.integration_time--set-optical-sensor-led-to-the-requested-power","text":"","title":"set optical sensor led to the requested power"},{"location":"SDK/sensors/#vex.Optical.integration_time--arguments","text":"value (optional) : integration time in mS (5 to 700)","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.integration_time--returns","text":"The current integration time","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.integration_time--examples","text":"opt1.set_light_power(50)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.is_near_object","text":"","title":"is_near_object"},{"location":"SDK/sensors/#vex.Optical.is_near_object--check-to-see-if-the-optical-proximity-sensor-detects-an-object","text":"","title":"check to see if the optical proximity sensor detects an object"},{"location":"SDK/sensors/#vex.Optical.is_near_object--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.is_near_object--returns","text":"True if near an object","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.is_near_object--examples","text":"if opt1.is_near_object(): print('near object')","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.object_detect_threshold","text":"","title":"object_detect_threshold"},{"location":"SDK/sensors/#vex.Optical.object_detect_threshold--set-the-threshold-for-object-detection","text":"","title":"set the threshold for object detection"},{"location":"SDK/sensors/#vex.Optical.object_detect_threshold--arguments","text":"value : Number in the range 0 to 255. A value of 0 will just return current value.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.object_detect_threshold--returns","text":"current value","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.object_detect_threshold--examples","text":"opt1.object_detect_threshold(100)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.object_detected","text":"","title":"object_detected"},{"location":"SDK/sensors/#vex.Optical.object_detected--register-a-function-to-be-called-when-an-object-detected-event-occurs","text":"","title":"Register a function to be called when an object detected event occurs"},{"location":"SDK/sensors/#vex.Optical.object_detected--arguments","text":"callback : A function that will be called when an object detected event occurs arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.object_detected--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.object_detected--examples","text":"def foo(): print(\"object detected\") opt1.object_detected(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.object_lost","text":"","title":"object_lost"},{"location":"SDK/sensors/#vex.Optical.object_lost--register-a-function-to-be-called-when-an-object-lost-event-occurs","text":"","title":"Register a function to be called when an object lost event occurs"},{"location":"SDK/sensors/#vex.Optical.object_lost--arguments","text":"callback : A function that will be called when an object lost event occurs arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.object_lost--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.object_lost--examples","text":"def foo(): print(\"object lost\") opt1.object_lost(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.rgb","text":"","title":"rgb"},{"location":"SDK/sensors/#vex.Optical.rgb--get-the-optical-sensor-rgb-value","text":"","title":"get the optical sensor rgb value"},{"location":"SDK/sensors/#vex.Optical.rgb--arguments","text":"raw (optional) : return raw or processed values","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.rgb--returns","text":"A tuple with red, green, blue and brightness","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.rgb--examples","text":"value=opt1.rgb()","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.set_light","text":"","title":"set_light"},{"location":"SDK/sensors/#vex.Optical.set_light--set-optical-sensor-led-on-or-of","text":"","title":"set optical sensor led on or of"},{"location":"SDK/sensors/#vex.Optical.set_light--arguments","text":"value : LedStateType.ON, LedStateType.OFF or power of led, 0 to 100%","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.set_light--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.set_light--examples","text":"# turn on led with previous intensity\\ opt1.set_light(LedStateType.ON) # turn on led with new intensity\\ opt1.set_light(65)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.set_light_power","text":"","title":"set_light_power"},{"location":"SDK/sensors/#vex.Optical.set_light_power--set-optical-sensor-led-to-the-requested-power","text":"","title":"set optical sensor led to the requested power"},{"location":"SDK/sensors/#vex.Optical.set_light_power--arguments","text":"value : power of led, 0 to 100%","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.set_light_power--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Optical.set_light_power--examples","text":"opt1.set_light_power(50)","title":"Examples:"},{"location":"SDK/sensors/#vex.Optical.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Optical.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Optical.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Optical.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#distance-sensor","text":"","title":"Distance Sensor"},{"location":"SDK/sensors/#vex.Distance","text":"","title":"Distance"},{"location":"SDK/sensors/#vex.Distance--distance-class-a-class-for-working-with-the-distance-sensor","text":"","title":"Distance class - a class for working with the distance sensor"},{"location":"SDK/sensors/#vex.Distance--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance--returns","text":"An instance of the Distance class","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance--examples","text":"dist1 = Distance(Ports.PORT1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Distance.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Distance.changed--register-a-function-to-be-called-when-the-distance-value-changes","text":"","title":"Register a function to be called when the distance value changes"},{"location":"SDK/sensors/#vex.Distance.changed--arguments","text":"callback : A function that will be called when the distance value changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.changed--examples","text":"def foo(): print(\"distance changed\") dist1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Distance.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Distance.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Distance.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.is_object_detected","text":"","title":"is_object_detected"},{"location":"SDK/sensors/#vex.Distance.is_object_detected--returns-if-an-object-is-detected","text":"","title":"Returns if an object is detected"},{"location":"SDK/sensors/#vex.Distance.is_object_detected--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.is_object_detected--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.object_distance","text":"","title":"object_distance"},{"location":"SDK/sensors/#vex.Distance.object_distance--the-current-distance-the-sensor-is-reading","text":"The distance will return a large positive number if no object is detected.","title":"The current distance the sensor is reading."},{"location":"SDK/sensors/#vex.Distance.object_distance--arguments","text":"units (optional): The distance units to return the distance value in. default is MM.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.object_distance--returns","text":"A value for distance in the specified units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.object_distance--examples","text":"# get distance in mm\\ value = dist1.object_distance() # get distance in inches\\ value = dist1.object_distance(INCHES)","title":"Examples:"},{"location":"SDK/sensors/#vex.Distance.object_rawsize","text":"","title":"object_rawsize"},{"location":"SDK/sensors/#vex.Distance.object_rawsize--get-the-raw-value-of-object-size-the-sensor-is-detecting","text":"Raw size will be a number ranging from 0 to about 400\\ Larger and more reflective objects will return larger values.","title":"Get the raw value of object size the sensor is detecting."},{"location":"SDK/sensors/#vex.Distance.object_rawsize--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.object_rawsize--returns","text":"A value for object size that is a number.\\","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.object_rawsize--examples","text":"# get object raw size\\ size = dist1.object_rawsize()","title":"Examples:"},{"location":"SDK/sensors/#vex.Distance.object_size","text":"","title":"object_size"},{"location":"SDK/sensors/#vex.Distance.object_size--get-an-estimation-of-the-object-size-the-sensor-is-detecting","text":"","title":"Get an estimation of the object size the sensor is detecting."},{"location":"SDK/sensors/#vex.Distance.object_size--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.object_size--returns","text":"A value for object size.\\ The value will be of type ObjectSizeType","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.object_size--examples","text":"# get object size\\ size = dist1.object_size()","title":"Examples:"},{"location":"SDK/sensors/#vex.Distance.object_velocity","text":"","title":"object_velocity"},{"location":"SDK/sensors/#vex.Distance.object_velocity--returns-the-object-velocity","text":"velocity is calculated from change of distance over time","title":"Returns the object velocity"},{"location":"SDK/sensors/#vex.Distance.object_velocity--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.object_velocity--returns","text":"The velocity in m/s","title":"Returns:"},{"location":"SDK/sensors/#vex.Distance.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Distance.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Distance.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Distance.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#electromagnet","text":"","title":"Electromagnet"},{"location":"SDK/sensors/#vex.Electromagnet","text":"","title":"Electromagnet"},{"location":"SDK/sensors/#vex.Electromagnet--electromagnet-class-a-class-for-working-with-the-electromagnet","text":"","title":"Electromagnet class - a class for working with the electromagnet"},{"location":"SDK/sensors/#vex.Electromagnet--arguments","text":"port : The smartport this device is attached to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet--returns","text":"An instance of the Electromagnet class","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet--examples","text":"em1 = Electromagnet(Ports.PORT1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Electromagnet.drop","text":"","title":"drop"},{"location":"SDK/sensors/#vex.Electromagnet.drop--energize-the-electromagnet-to-drop-objects","text":"","title":"energize the electromagnet to drop objects"},{"location":"SDK/sensors/#vex.Electromagnet.drop--arguments","text":"duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.drop--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet.drop--examples","text":"# drop with default values\\ em1.drop() # drop with custom values\\ em1.drop(250, MSEC, 90)","title":"Examples:"},{"location":"SDK/sensors/#vex.Electromagnet.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Electromagnet.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Electromagnet.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet.pickup","text":"","title":"pickup"},{"location":"SDK/sensors/#vex.Electromagnet.pickup--energize-the-electromagnet-to-pickup-objects","text":"","title":"energize the electromagnet to pickup objects"},{"location":"SDK/sensors/#vex.Electromagnet.pickup--arguments","text":"duration (optional) : the duration to energize the magnet for, default is 1 second units (optional) : the units for duration, default is MSEC power (optional) : the power used when energizing.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.pickup--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet.pickup--examples","text":"# pickup with default values\\ em1.pickup() # pickup with custom values\\ em1.pickup(250, MSEC, 90)","title":"Examples:"},{"location":"SDK/sensors/#vex.Electromagnet.set_power","text":"","title":"set_power"},{"location":"SDK/sensors/#vex.Electromagnet.set_power--set-the-default-power-to-use-for-drop-and-pickup-methods","text":"","title":"set the default power to use for drop and pickup methods"},{"location":"SDK/sensors/#vex.Electromagnet.set_power--arguments","text":"value : power in range 0 to 100","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.set_power--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet.set_power--examples","text":"# set default power to 80\\ em1.set_power(80)","title":"Examples:"},{"location":"SDK/sensors/#vex.Electromagnet.temperature","text":"","title":"temperature"},{"location":"SDK/sensors/#vex.Electromagnet.temperature--returns-the-temperature-of-the-electromagnet","text":"","title":"Returns the temperature of the electromagnet"},{"location":"SDK/sensors/#vex.Electromagnet.temperature--arguments","text":"units (optional) : The units for the returned temperature, the default is CELSIUS","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.temperature--returns","text":"The electromagnet temperature in provided units","title":"Returns:"},{"location":"SDK/sensors/#vex.Electromagnet.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Electromagnet.timestamp--request-the-timestamp-of-last-received-message-from-the-sensor","text":"","title":"Request the timestamp of last received message from the sensor"},{"location":"SDK/sensors/#vex.Electromagnet.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Electromagnet.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#accelerometer","text":"","title":"Accelerometer"},{"location":"SDK/sensors/#vex.Accelerometer","text":"","title":"Accelerometer"},{"location":"SDK/sensors/#vex.Accelerometer--accelerometer-class-create-a-new-accelerometer","text":"For full functionality, three Accelerometer instances would need to be created, one for each axis.","title":"Accelerometer class - create a new accelerometer"},{"location":"SDK/sensors/#vex.Accelerometer--arguments","text":"port : The 3wire port to use for the accelerometer sensitivity (optional) : set high sensitivity mode (+/- 2G), use True or 1","title":"Arguments:"},{"location":"SDK/sensors/#vex.Accelerometer--returns","text":"An instance of the Accelerometer class","title":"Returns:"},{"location":"SDK/sensors/#vex.Accelerometer--examples","text":"accx = Accelerometer(brain.three_wire_port.a)\\ accy = Accelerometer(brain.three_wire_port.b)\\ accz = Accelerometer(brain.three_wire_port.c)","title":"Examples:"},{"location":"SDK/sensors/#vex.Accelerometer.acceleration","text":"","title":"acceleration"},{"location":"SDK/sensors/#vex.Accelerometer.acceleration--the-current-value-of-the-accelerometer-scaled-to-units-of-gravity","text":"","title":"The current value of the accelerometer scaled to units of gravity"},{"location":"SDK/sensors/#vex.Accelerometer.acceleration--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Accelerometer.acceleration--returns","text":"A value in the range +/- 6 or +/-2G if high sensitivity mode is set","title":"Returns:"},{"location":"SDK/sensors/#vex.Accelerometer.acceleration--examples","text":"# get accelerometer in range+/- 6G value = accz.acceleration()","title":"Examples:"},{"location":"SDK/sensors/#vex.Accelerometer.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Accelerometer.changed--register-a-function-to-be-called-when-the-value-of-the-accelerometer-changes","text":"","title":"Register a function to be called when the value of the accelerometer changes"},{"location":"SDK/sensors/#vex.Accelerometer.changed--arguments","text":"callback : A function that will be called when the value of the accelerometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Accelerometer.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Accelerometer.changed--examples","text":"def foo(): print(\"accelerometer changed\") accz.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Accelerometer.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Accelerometer.value--the-current-value-of-the-accelerometer","text":"","title":"The current value of the accelerometer"},{"location":"SDK/sensors/#vex.Accelerometer.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.Accelerometer.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Accelerometer.value--examples","text":"# get accelerometer in range 0 - 4095\\ value = accz.value() # get accelerometer in range 0 - 1023\\ value = accz.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#analog-input","text":"","title":"Analog Input"},{"location":"SDK/sensors/#vex.AnalogIn","text":"","title":"AnalogIn"},{"location":"SDK/sensors/#vex.AnalogIn--analogin-class-create-a-new-analog-input","text":"","title":"AnalogIn class - create a new analog input"},{"location":"SDK/sensors/#vex.AnalogIn--arguments","text":"port : The 3wire port to use for the analog input","title":"Arguments:"},{"location":"SDK/sensors/#vex.AnalogIn--returns","text":"An instance of the AnalogIn class","title":"Returns:"},{"location":"SDK/sensors/#vex.AnalogIn--examples","text":"ana1 = AnalogIn(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.AnalogIn.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.AnalogIn.changed--register-a-function-to-be-called-when-the-value-of-the-analog-input-changes","text":"","title":"Register a function to be called when the value of the analog input changes"},{"location":"SDK/sensors/#vex.AnalogIn.changed--arguments","text":"callback : A function that will be called when the value of the analog input changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.AnalogIn.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.AnalogIn.changed--examples","text":"def foo(): print(\"analog input changed\") ana1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.AnalogIn.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.AnalogIn.value--the-current-value-of-the-analog-input","text":"","title":"The current value of the analog input"},{"location":"SDK/sensors/#vex.AnalogIn.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.AnalogIn.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.AnalogIn.value--examples","text":"# get analog input in range 0 - 4095\\ value = ana1.value() # get analog input in range 0 - 1023\\ value = ana1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#encoder","text":"","title":"Encoder"},{"location":"SDK/sensors/#vex.Encoder","text":"","title":"Encoder"},{"location":"SDK/sensors/#vex.Encoder--encoder-class-create-a-new-encoder-sensor","text":"An encoder uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h","title":"Encoder class - create a new encoder sensor"},{"location":"SDK/sensors/#vex.Encoder--arguments","text":"port : The 3wire port to use for the encoder sensor","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder--returns","text":"An instance of the Encoder class","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder--examples","text":"enc1 = Encoder(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Encoder.position","text":"","title":"position"},{"location":"SDK/sensors/#vex.Encoder.position--the-current-position-of-the-encoder","text":"","title":"The current position of the encoder"},{"location":"SDK/sensors/#vex.Encoder.position--arguments","text":"units (optional) : The rotation units to return the position value in, default is DEGREES.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder.position--returns","text":"A value for encoder position in the specified units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder.position--examples","text":"# get encoder position\\ value = enc1.position()","title":"Examples:"},{"location":"SDK/sensors/#vex.Encoder.reset_position","text":"","title":"reset_position"},{"location":"SDK/sensors/#vex.Encoder.reset_position--reset-the-encoder-position-to-0","text":"","title":"Reset the encoder position to 0"},{"location":"SDK/sensors/#vex.Encoder.reset_position--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder.reset_position--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder.set_position","text":"","title":"set_position"},{"location":"SDK/sensors/#vex.Encoder.set_position--set-the-encoder-position-to-a-new-value","text":"","title":"set the encoder position to a new value"},{"location":"SDK/sensors/#vex.Encoder.set_position--arguments","text":"value : The new value to use for position. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder.set_position--examples","text":"# set the value of position to 180 degrees\\ enc1.set_position(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Encoder.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Encoder.value--the-current-value-of-the-encoder-in-raw-counts","text":"One full turn of the encoder is 360 counts.","title":"The current value of the encoder in raw counts"},{"location":"SDK/sensors/#vex.Encoder.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder.value--returns","text":"A value for encoder counts.","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder.value--examples","text":"# get encoder raw counts\\ value = enc1.value()","title":"Examples:"},{"location":"SDK/sensors/#vex.Encoder.velocity","text":"","title":"velocity"},{"location":"SDK/sensors/#vex.Encoder.velocity--the-current-velocity-of-the-encoder","text":"","title":"The current velocity of the encoder"},{"location":"SDK/sensors/#vex.Encoder.velocity--arguments","text":"units (optional) : The velocity units to return the value in, default is RPM.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Encoder.velocity--returns","text":"A value for encoder velocity in the specified units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Encoder.velocity--examples","text":"# get encoder velocity in rpm\\ value = enc1.velocity()","title":"Examples:"},{"location":"SDK/sensors/#sonar","text":"","title":"Sonar"},{"location":"SDK/sensors/#vex.Sonar","text":"","title":"Sonar"},{"location":"SDK/sensors/#vex.Sonar--sonar-class-create-a-new-sonar-ultrasonic-sensor","text":"A sonar uses two adjacent 3wire ports.\\ valid port pairs are a/b, c/d, e/f and g/h\\ connect the wire labeled \"output\" to the lower 3wire port, eg. a","title":"Sonar class - create a new sonar (ultrasonic) sensor"},{"location":"SDK/sensors/#vex.Sonar--arguments","text":"port : The 3wire port to use for the sonar sensor","title":"Arguments:"},{"location":"SDK/sensors/#vex.Sonar--returns","text":"An instance of the Sonar class","title":"Returns:"},{"location":"SDK/sensors/#vex.Sonar--examples","text":"sonar1 = Sonar(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Sonar.distance","text":"","title":"distance"},{"location":"SDK/sensors/#vex.Sonar.distance--the-current-distance-the-sonar-is-detecting-an-object-at","text":"The sonar will return a large positive number if no object is detected in range.","title":"The current distance the sonar is detecting an object at."},{"location":"SDK/sensors/#vex.Sonar.distance--arguments","text":"units : The distance units to return the position value in.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Sonar.distance--returns","text":"A value for sonar distance in the specified units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Sonar.distance--examples","text":"# get sonar distance in mm\\ value = sonar1.distance(MM)","title":"Examples:"},{"location":"SDK/sensors/#vex.Sonar.found_object","text":"","title":"found_object"},{"location":"SDK/sensors/#vex.Sonar.found_object--check-for-an-object-in-the-range-0-1000mm","text":"The sonar will return True if an object is detected closer than 1000mm.","title":"Check for an object in the range 0 - 1000mm"},{"location":"SDK/sensors/#vex.Sonar.found_object--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Sonar.found_object--returns","text":"True of an object is detected.","title":"Returns:"},{"location":"SDK/sensors/#vex.Sonar.found_object--examples","text":"# is an object closer than 1000mm\\ if sonar1.found_object():\\ print(\"object found\")","title":"Examples:"},{"location":"SDK/sensors/#vex.Sonar.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Sonar.value--the-current-value-of-the-sonar","text":"This method has no practical use, see distance.","title":"The current value of the sonar"},{"location":"SDK/sensors/#vex.Sonar.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.Sonar.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Sonar.value--examples","text":"# get sonar raw value\\ value = sonar1.value()","title":"Examples:"},{"location":"SDK/sensors/#pwm","text":"","title":"PWM"},{"location":"SDK/sensors/#vex.Pwm","text":"","title":"Pwm"},{"location":"SDK/sensors/#vex.Pwm--pwm-class-create-a-new-pwm-output","text":"The pwm class will create raw RC style pwm waveform.\\ A pwm output of 0% corresponds to pulse width of 1.5mS every 16mS\\ A pwm output of 100% corresponds to pulse width of 2mS\\ A pwm output of -100% corresponds to pulse width of 1mS","title":"Pwm class - create a new pwm output"},{"location":"SDK/sensors/#vex.Pwm--arguments","text":"port : The 3wire port to use for the pwm output","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pwm--returns","text":"An instance of the Pwm class","title":"Returns:"},{"location":"SDK/sensors/#vex.Pwm--examples","text":"pwm1 = Pwm(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Pwm.state","text":"","title":"state"},{"location":"SDK/sensors/#vex.Pwm.state--set-the-current-pwm-value-in-percent","text":"","title":"Set the current PWM value in percent."},{"location":"SDK/sensors/#vex.Pwm.state--arguments","text":"value : The new value for pwm output, -100 to +100 percent. units (optional) : units must be specified in PERCENT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pwm.state--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Pwm.state--examples","text":"# set pwm1 output to 50%\\ pwm1.state(50)","title":"Examples:"},{"location":"SDK/sensors/#vex.Pwm.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Pwm.value--read-the-current-pwm-value-in-percent","text":"","title":"Read the current PWM value in percent."},{"location":"SDK/sensors/#vex.Pwm.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pwm.value--returns","text":"A value in the range -100 to +100 percent.","title":"Returns:"},{"location":"SDK/sensors/#vex.Pwm.value--examples","text":"# get pwm1 current value\\ value = pwm1.value()","title":"Examples:"},{"location":"SDK/sensors/#servo","text":"","title":"Servo"},{"location":"SDK/sensors/#vex.Servo","text":"","title":"Servo"},{"location":"SDK/sensors/#vex.Servo--servo-class-create-a-new-servo-output","text":"The Servo class will create raw RC style pwm waveform.\\ An output of 0 corresponds to pulse width of 1.5mS every 16mS\\ An output of 50 degrees corresponds to pulse width of 2mS\\ An output of -50 degrees corresponds to pulse width of 1mS","title":"Servo class - create a new servo output"},{"location":"SDK/sensors/#vex.Servo--arguments","text":"port : The 3wire port to use for the servo output","title":"Arguments:"},{"location":"SDK/sensors/#vex.Servo--returns","text":"An instance of the Servo class","title":"Returns:"},{"location":"SDK/sensors/#vex.Servo--examples","text":"servo1 = Servo(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Servo.set_position","text":"","title":"set_position"},{"location":"SDK/sensors/#vex.Servo.set_position--set-the-servo-position","text":"","title":"Set the servo position"},{"location":"SDK/sensors/#vex.Servo.set_position--arguments","text":"value : The new value for the servo using the supplied units. units (optional) : The rotation units, default is PERCENT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Servo.set_position--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Servo.set_position--examples","text":"# set servo output to 10 degrees\\ servo1.set_position(10, DEGREES)","title":"Examples:"},{"location":"SDK/sensors/#vex.Servo.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Servo.value--read-the-current-raw-servo-pwm-value","text":"This is the raw internal pwm value\\ A servo position of 0 will return 127\\ A maximum positive servo position will return 255","title":"Read the current raw servo pwm value."},{"location":"SDK/sensors/#vex.Servo.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Servo.value--returns","text":"A value in the range 0 to 255.","title":"Returns:"},{"location":"SDK/sensors/#vex.Servo.value--examples","text":"# get servo1 current value\\ value = servo1.value()","title":"Examples:"},{"location":"SDK/sensors/#potentiometer","text":"","title":"Potentiometer"},{"location":"SDK/sensors/#vex.Potentiometer","text":"","title":"Potentiometer"},{"location":"SDK/sensors/#vex.Potentiometer--potentiometer-class-create-a-new-potentiometer","text":"","title":"Potentiometer class - create a new potentiometer"},{"location":"SDK/sensors/#vex.Potentiometer--arguments","text":"port : The 3wire port to use for the potentiometer","title":"Arguments:"},{"location":"SDK/sensors/#vex.Potentiometer--returns","text":"An instance of the Potentiometer class","title":"Returns:"},{"location":"SDK/sensors/#vex.Potentiometer--examples","text":"pot1 = Potentiometer(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Potentiometer.angle","text":"","title":"angle"},{"location":"SDK/sensors/#vex.Potentiometer.angle--the-current-angle-of-the-potentiometer","text":"","title":"The current angle of the potentiometer"},{"location":"SDK/sensors/#vex.Potentiometer.angle--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Potentiometer.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Potentiometer.angle--examples","text":"# get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT)","title":"Examples:"},{"location":"SDK/sensors/#vex.Potentiometer.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Potentiometer.changed--register-a-function-to-be-called-when-the-value-of-the-potentiometer-changes","text":"","title":"Register a function to be called when the value of the potentiometer changes"},{"location":"SDK/sensors/#vex.Potentiometer.changed--arguments","text":"callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Potentiometer.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Potentiometer.changed--examples","text":"def foo(): print(\"pot changed\") pot1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Potentiometer.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Potentiometer.value--the-current-value-of-the-potentiometer","text":"","title":"The current value of the potentiometer"},{"location":"SDK/sensors/#vex.Potentiometer.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.Potentiometer.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Potentiometer.value--examples","text":"# get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#potentiometer-v2","text":"","title":"Potentiometer V2"},{"location":"SDK/sensors/#vex.PotentiometerV2","text":"","title":"PotentiometerV2"},{"location":"SDK/sensors/#vex.PotentiometerV2--potentiometerv2-class-create-a-new-potentiometer","text":"","title":"PotentiometerV2 class - create a new potentiometer"},{"location":"SDK/sensors/#vex.PotentiometerV2--arguments","text":"port : The 3wire port to use for the potentiometer","title":"Arguments:"},{"location":"SDK/sensors/#vex.PotentiometerV2--returns","text":"An instance of the PotentiometerV2 class","title":"Returns:"},{"location":"SDK/sensors/#vex.PotentiometerV2--examples","text":"pot1 = PotentiometerV2(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.PotentiometerV2.angle","text":"","title":"angle"},{"location":"SDK/sensors/#vex.PotentiometerV2.angle--the-current-angle-of-the-potentiometer","text":"","title":"The current angle of the potentiometer"},{"location":"SDK/sensors/#vex.PotentiometerV2.angle--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.PotentiometerV2.angle--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.PotentiometerV2.angle--examples","text":"# get potentiometer in range 0 - 250 degrees\\ angle = pot1.angle() # get potentiometer in range 0 - 100%\\ angle = pot1.angle(PERCENT)","title":"Examples:"},{"location":"SDK/sensors/#vex.PotentiometerV2.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.PotentiometerV2.changed--register-a-function-to-be-called-when-the-value-of-the-potentiometer-changes","text":"","title":"Register a function to be called when the value of the potentiometer changes"},{"location":"SDK/sensors/#vex.PotentiometerV2.changed--arguments","text":"callback : A function that will be called when the value of the potentiometer changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.PotentiometerV2.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.PotentiometerV2.changed--examples","text":"def foo(): print(\"pot changed\") pot1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.PotentiometerV2.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.PotentiometerV2.value--the-current-value-of-the-potentiometer","text":"","title":"The current value of the potentiometer"},{"location":"SDK/sensors/#vex.PotentiometerV2.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.PotentiometerV2.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.PotentiometerV2.value--examples","text":"# get potentiometer in range 0 - 4095\\ value = pot1.value() # get potentiometer in range 0 - 1023\\ value = pot1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#line-sensor","text":"","title":"Line Sensor"},{"location":"SDK/sensors/#vex.Line","text":"","title":"Line"},{"location":"SDK/sensors/#vex.Line--line-class-create-a-new-line-sensor","text":"","title":"Line class - create a new line sensor"},{"location":"SDK/sensors/#vex.Line--arguments","text":"port : The 3wire port to use for the line sensor","title":"Arguments:"},{"location":"SDK/sensors/#vex.Line--returns","text":"An instance of the Line class","title":"Returns:"},{"location":"SDK/sensors/#vex.Line--examples","text":"line1 = Line(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Line.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Line.changed--register-a-function-to-be-called-when-the-value-of-the-line-sensor-changes","text":"","title":"Register a function to be called when the value of the line sensor changes"},{"location":"SDK/sensors/#vex.Line.changed--arguments","text":"callback : A function that will be called when the value of the line sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Line.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Line.changed--examples","text":"def foo(): print(\"line sensor changed\") line1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Line.reflectivity","text":"","title":"reflectivity"},{"location":"SDK/sensors/#vex.Line.reflectivity--the-current-reflectivity-of-the-line-sensor","text":"The reflectivity of the line sensor is an estimation based on the raw value of the sensor.\\ A reflectivity of 0% is a raw value of approximated 3000 or greater\\ A reflectivity of 100% is a raw value of 0","title":"The current reflectivity of the line sensor"},{"location":"SDK/sensors/#vex.Line.reflectivity--arguments","text":"units (optional) : The only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Line.reflectivity--returns","text":"A value in the range 0 to 100%","title":"Returns:"},{"location":"SDK/sensors/#vex.Line.reflectivity--examples","text":"# get line sensor reflectivity in range of 0 -100%\\ value = line1.reflectivity()","title":"Examples:"},{"location":"SDK/sensors/#vex.Line.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Line.value--the-current-value-of-the-line-sensor","text":"","title":"The current value of the line sensor"},{"location":"SDK/sensors/#vex.Line.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.Line.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Line.value--examples","text":"# get line sensor in range 0 - 4095\\ value = line1.value() # get line sensor in range 0 - 1023\\ value = line1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#light-sensor","text":"","title":"Light Sensor"},{"location":"SDK/sensors/#vex.Light","text":"","title":"Light"},{"location":"SDK/sensors/#vex.Light--light-class-create-a-new-light-sensor","text":"","title":"Light class - create a new light sensor"},{"location":"SDK/sensors/#vex.Light--arguments","text":"port : The 3wire port to use for the light sensor","title":"Arguments:"},{"location":"SDK/sensors/#vex.Light--returns","text":"An instance of the Light class","title":"Returns:"},{"location":"SDK/sensors/#vex.Light--examples","text":"light1 = Light(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Light.brightness","text":"","title":"brightness"},{"location":"SDK/sensors/#vex.Light.brightness--the-current-brightness-of-light-falling-on-the-light-sensor","text":"The brightness of the light sensor is an estimation based on the raw value of the sensor.\\ A brightness of 0% is a raw value of approximated 900 or greater\\ A brightness of 100% is a raw value of 0","title":"The current brightness of light falling on the light sensor"},{"location":"SDK/sensors/#vex.Light.brightness--arguments","text":"units (optional) : The only valid value is PERCENT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Light.brightness--returns","text":"A value in the range 0 to 100%","title":"Returns:"},{"location":"SDK/sensors/#vex.Light.brightness--examples","text":"# get light sensor brightness in range of 0 -100%\\ value = light1.brightness()","title":"Examples:"},{"location":"SDK/sensors/#vex.Light.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Light.changed--register-a-function-to-be-called-when-the-value-of-the-light-sensor-changes","text":"","title":"Register a function to be called when the value of the light sensor changes"},{"location":"SDK/sensors/#vex.Light.changed--arguments","text":"callback : A function that will be called when the value of the light sensor changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Light.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Light.changed--examples","text":"def foo(): print(\"light sensor changed\") light1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Light.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Light.value--the-current-value-of-the-light-sensor","text":"","title":"The current value of the light sensor"},{"location":"SDK/sensors/#vex.Light.value--arguments","text":"units (optional) : A valid AnalogUnits type or PERCENT, the default is 12 bit analog","title":"Arguments:"},{"location":"SDK/sensors/#vex.Light.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Light.value--examples","text":"# get light sensor in range 0 - 4095\\ value = light1.value() # get light sensor in range 0 - 1023\\ value = light1.value(AnalogUnits.TENBIT)","title":"Examples:"},{"location":"SDK/sensors/#gyro","text":"","title":"Gyro"},{"location":"SDK/sensors/#vex.Gyro","text":"","title":"Gyro"},{"location":"SDK/sensors/#vex.Gyro--gyro-class-create-a-new-gyro-sensor","text":"","title":"Gyro class - create a new gyro sensor"},{"location":"SDK/sensors/#vex.Gyro--arguments","text":"port : The 3wire port to use for the gyro sensor","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro--returns","text":"An instance of the Gyro class","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro--examples","text":"gyro1 = Gyro(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.calibrate","text":"","title":"calibrate"},{"location":"SDK/sensors/#vex.Gyro.calibrate--start-calibration-of-the-gyro","text":"Calibration should done when the gyro is not moving.","title":"Start calibration of the gyro"},{"location":"SDK/sensors/#vex.Gyro.calibrate--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.calibrate--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.calibrate--examples","text":"# start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.changed","text":"","title":"changed"},{"location":"SDK/sensors/#vex.Gyro.changed--register-a-function-to-be-called-when-the-value-of-the-gyro-heading-changes","text":"","title":"Register a function to be called when the value of the gyro heading changes"},{"location":"SDK/sensors/#vex.Gyro.changed--arguments","text":"callback : A function that will be called when the value of the gyro heading changes arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.changed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.changed--examples","text":"def foo(): print(\"gyro changed\") gyro1.changed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.get_turn_type","text":"","title":"get_turn_type"},{"location":"SDK/sensors/#vex.Gyro.get_turn_type--get-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"get the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Gyro.get_turn_type--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.get_turn_type--returns","text":"The current TurnType, LEFT or RIGHT","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.heading","text":"","title":"heading"},{"location":"SDK/sensors/#vex.Gyro.heading--read-the-current-heading-of-the-gyro","text":"heading will be returned in the range 0 - 359.99 degrees","title":"read the current heading of the gyro"},{"location":"SDK/sensors/#vex.Gyro.heading--arguments","text":"units (optional) : The units to return the heading in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.heading--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.heading--examples","text":"# get the current heading for the gyro\\ value = gyro1.heading()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.is_calibrating","text":"","title":"is_calibrating"},{"location":"SDK/sensors/#vex.Gyro.is_calibrating--check-the-calibration-status-of-the-gyro","text":"Calibration should done when the gyro is not moving.","title":"check the calibration status of the gyro"},{"location":"SDK/sensors/#vex.Gyro.is_calibrating--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.is_calibrating--returns","text":"True when the gyro is calibrating","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.is_calibrating--examples","text":"# start calibration\\ gyro1.calibrate()\\ # wait for completion\\ while gyro1.is_calibrating():\\ sleep(50, MSEC)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.reset_heading","text":"","title":"reset_heading"},{"location":"SDK/sensors/#vex.Gyro.reset_heading--reset-the-gyro-heading-to-0","text":"","title":"Reset the gyro heading to 0"},{"location":"SDK/sensors/#vex.Gyro.reset_heading--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.reset_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.reset_rotation","text":"","title":"reset_rotation"},{"location":"SDK/sensors/#vex.Gyro.reset_rotation--reset-the-gyro-rotation-to-0","text":"","title":"Reset the gyro rotation to 0"},{"location":"SDK/sensors/#vex.Gyro.reset_rotation--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.reset_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.rotation","text":"","title":"rotation"},{"location":"SDK/sensors/#vex.Gyro.rotation--read-the-current-rotation-of-the-gyro","text":"rotation is not limited, it can be both positive and negative and shows the absolute angle of the gyro.","title":"read the current rotation of the gyro"},{"location":"SDK/sensors/#vex.Gyro.rotation--arguments","text":"units (optional) : The units to return the rotation in, default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.rotation--returns","text":"A value for heading in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.rotation--examples","text":"# get the current rotation for the gyro\\ value = gyro1.rotation()","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.set_heading","text":"","title":"set_heading"},{"location":"SDK/sensors/#vex.Gyro.set_heading--set-the-gyro-heading-to-a-new-value","text":"The new value for heading should be in the range 0 - 359.99 degrees.","title":"set the gyro heading to a new value"},{"location":"SDK/sensors/#vex.Gyro.set_heading--arguments","text":"value : The new value to use for heading. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.set_heading--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.set_heading--examples","text":"# set the value of heading to 180 degrees\\ gyro1.set_heading(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.set_rotation","text":"","title":"set_rotation"},{"location":"SDK/sensors/#vex.Gyro.set_rotation--set-the-gyro-rotation-to-a-new-value","text":"","title":"set the gyro rotation to a new value"},{"location":"SDK/sensors/#vex.Gyro.set_rotation--arguments","text":"value : The new value to use for rotation. units (optional) : The rotation units type for value, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.set_rotation--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.set_rotation--examples","text":"# set the value of rotation to 180 degrees\\ gyro1.set_rotation(180)","title":"Examples:"},{"location":"SDK/sensors/#vex.Gyro.set_turn_type","text":"","title":"set_turn_type"},{"location":"SDK/sensors/#vex.Gyro.set_turn_type--set-the-direction-that-returns-positive-values-for-heading","text":"An advanced function that is not generally used.","title":"set the direction that returns positive values for heading"},{"location":"SDK/sensors/#vex.Gyro.set_turn_type--arguments","text":"turntype : TurnType.LEFT or TurnType.RIGHT","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.set_turn_type--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Gyro.value--the-current-value-of-the-gyro","text":"This method is generally not used, see heading() and rotation()","title":"The current value of the gyro"},{"location":"SDK/sensors/#vex.Gyro.value--arguments","text":"units (optional) : A valid RotationUnits type or PERCENT, the default is DEGREES","title":"Arguments:"},{"location":"SDK/sensors/#vex.Gyro.value--returns","text":"A value in the range that is specified by the units.","title":"Returns:"},{"location":"SDK/sensors/#vex.Gyro.value--examples","text":"# get gyro value in range 0 - 360 degrees\\ value = gyro1.value()","title":"Examples:"},{"location":"SDK/sensors/#limit-switch","text":"","title":"Limit Switch"},{"location":"SDK/sensors/#vex.Limit","text":"","title":"Limit"},{"location":"SDK/sensors/#vex.Limit--limit-class-create-a-new-limit-switch","text":"","title":"Limit class - create a new limit switch"},{"location":"SDK/sensors/#vex.Limit--arguments","text":"port : The 3wire port the limit switch is connected to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Limit--returns","text":"An instance of the Limit class","title":"Returns:"},{"location":"SDK/sensors/#vex.Limit--examples","text":"limit1 = Limit(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Limit.pressed","text":"","title":"pressed"},{"location":"SDK/sensors/#vex.Limit.pressed--register-a-function-to-be-called-when-the-limit-switch-is-pressed","text":"","title":"Register a function to be called when the limit switch is pressed"},{"location":"SDK/sensors/#vex.Limit.pressed--arguments","text":"callback : A function that will be called when the limit switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Limit.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Limit.pressed--examples","text":"def foo(): print(\"switch pressed\") limit1.pressed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Limit.pressing","text":"","title":"pressing"},{"location":"SDK/sensors/#vex.Limit.pressing--returns-whether-the-limit-switch-is-currently-being-pressed","text":"","title":"Returns whether the limit switch is currently being pressed"},{"location":"SDK/sensors/#vex.Limit.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Limit.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Limit.released","text":"","title":"released"},{"location":"SDK/sensors/#vex.Limit.released--register-a-function-to-be-called-when-the-limit-switch-is-released","text":"","title":"Register a function to be called when the limit switch is released"},{"location":"SDK/sensors/#vex.Limit.released--arguments","text":"callback : A function that will be called when the limit switch is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Limit.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Limit.released--examples","text":"def foo(): print(\"switch released\") limit1.released(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Limit.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Limit.value--the-current-value-of-the-limit-switch","text":"","title":"The current value of the limit switch"},{"location":"SDK/sensors/#vex.Limit.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Limit.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#bumper","text":"","title":"Bumper"},{"location":"SDK/sensors/#vex.Bumper","text":"","title":"Bumper"},{"location":"SDK/sensors/#vex.Bumper--bumper-class-create-a-new-bumper-switch","text":"","title":"Bumper class - create a new bumper switch"},{"location":"SDK/sensors/#vex.Bumper--arguments","text":"port : The 3wire port the bumper switch is connected to","title":"Arguments:"},{"location":"SDK/sensors/#vex.Bumper--returns","text":"An instance of the Bumper class","title":"Returns:"},{"location":"SDK/sensors/#vex.Bumper--examples","text":"bumper1 = Bumper(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Bumper.pressed","text":"","title":"pressed"},{"location":"SDK/sensors/#vex.Bumper.pressed--register-a-function-to-be-called-when-the-bumper-switch-is-pressed","text":"","title":"Register a function to be called when the bumper switch is pressed"},{"location":"SDK/sensors/#vex.Bumper.pressed--arguments","text":"callback : A function that will be called when the bumper switch is pressed arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Bumper.pressed--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Bumper.pressed--examples","text":"def foo(): print(\"switch pressed\") bumper1.pressed(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Bumper.pressing","text":"","title":"pressing"},{"location":"SDK/sensors/#vex.Bumper.pressing--returns-whether-the-bumper-switch-is-currently-being-pressed","text":"","title":"Returns whether the bumper switch is currently being pressed"},{"location":"SDK/sensors/#vex.Bumper.pressing--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Bumper.pressing--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Bumper.released","text":"","title":"released"},{"location":"SDK/sensors/#vex.Bumper.released--register-a-function-to-be-called-when-the-bumper-switch-is-released","text":"","title":"Register a function to be called when the bumper switch is released"},{"location":"SDK/sensors/#vex.Bumper.released--arguments","text":"callback : A function that will be called when the bumper switch is released arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Bumper.released--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.Bumper.released--examples","text":"def foo(): print(\"switch released\") bumper1.released(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.Bumper.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Bumper.value--the-current-value-of-the-bumper-switch","text":"","title":"The current value of the bumper switch"},{"location":"SDK/sensors/#vex.Bumper.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Bumper.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#digital-input","text":"","title":"Digital Input"},{"location":"SDK/sensors/#vex.DigitalIn","text":"","title":"DigitalIn"},{"location":"SDK/sensors/#vex.DigitalIn--digitalin-class-create-a-new-digital-input","text":"","title":"DigitalIn class - create a new digital input"},{"location":"SDK/sensors/#vex.DigitalIn--arguments","text":"port : The 3wire port to use for the digital input","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalIn--returns","text":"An instance of the DigitalIn class","title":"Returns:"},{"location":"SDK/sensors/#vex.DigitalIn--examples","text":"dig1 = DigitalIn(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.DigitalIn.high","text":"","title":"high"},{"location":"SDK/sensors/#vex.DigitalIn.high--register-a-function-to-be-called-when-the-digital-input-goes-to-the-logic-high-state","text":"","title":"Register a function to be called when the digital input goes to the logic high state"},{"location":"SDK/sensors/#vex.DigitalIn.high--arguments","text":"callback : A function that will be called when the digital input goes to the logic high state arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalIn.high--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.DigitalIn.high--examples","text":"def foo(): print(\"input high\") dig1.high(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.DigitalIn.low","text":"","title":"low"},{"location":"SDK/sensors/#vex.DigitalIn.low--register-a-function-to-be-called-when-the-digital-input-goes-to-the-logic-low-state","text":"","title":"Register a function to be called when the digital input goes to the logic low state"},{"location":"SDK/sensors/#vex.DigitalIn.low--arguments","text":"callback : A function that will be called when the digital input goes to the logic low state arg (optional) : A tuple that is used to pass arguments to the callback function.","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalIn.low--returns","text":"An instance of the Event class","title":"Returns:"},{"location":"SDK/sensors/#vex.DigitalIn.low--examples","text":"def foo(): print(\"input low\") dig1.low(foo)","title":"Examples:"},{"location":"SDK/sensors/#vex.DigitalIn.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.DigitalIn.value--the-current-value-of-the-digital-input","text":"","title":"The current value of the digital input"},{"location":"SDK/sensors/#vex.DigitalIn.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalIn.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#digital-output","text":"","title":"Digital Output"},{"location":"SDK/sensors/#vex.DigitalOut","text":"","title":"DigitalOut"},{"location":"SDK/sensors/#vex.DigitalOut--digitalout-class-create-a-new-digital-output","text":"","title":"DigitalOut class - create a new digital output"},{"location":"SDK/sensors/#vex.DigitalOut--arguments","text":"port : The 3wire port to use for the digital output","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalOut--returns","text":"An instance of the DigitalOut class","title":"Returns:"},{"location":"SDK/sensors/#vex.DigitalOut--examples","text":"dig1 = DigitalOut(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.DigitalOut.set","text":"","title":"set"},{"location":"SDK/sensors/#vex.DigitalOut.set--set-the-output-level-for-the-digital-output","text":"","title":"Set the output level for the digital output"},{"location":"SDK/sensors/#vex.DigitalOut.set--arguments","text":"value : 0, 1, True or False","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalOut.set--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.DigitalOut.set--examples","text":"dig1.set(True)","title":"Examples:"},{"location":"SDK/sensors/#vex.DigitalOut.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.DigitalOut.value--the-current-value-of-the-digital-output","text":"","title":"The current value of the digital output"},{"location":"SDK/sensors/#vex.DigitalOut.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.DigitalOut.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#led","text":"","title":"LED"},{"location":"SDK/sensors/#vex.Led","text":"","title":"Led"},{"location":"SDK/sensors/#vex.Led--led-class-create-a-new-led","text":"","title":"Led class - create a new led"},{"location":"SDK/sensors/#vex.Led--arguments","text":"port : The 3wire port to use for the led","title":"Arguments:"},{"location":"SDK/sensors/#vex.Led--returns","text":"An instance of the Led class","title":"Returns:"},{"location":"SDK/sensors/#vex.Led--examples","text":"led1 = Led(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Led.off","text":"","title":"off"},{"location":"SDK/sensors/#vex.Led.off--turn-the-led-off","text":"","title":"Turn the led off"},{"location":"SDK/sensors/#vex.Led.off--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Led.off--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Led.off--examples","text":"led1.off()","title":"Examples:"},{"location":"SDK/sensors/#vex.Led.on","text":"","title":"on"},{"location":"SDK/sensors/#vex.Led.on--turn-the-led-on","text":"","title":"Turn the led on"},{"location":"SDK/sensors/#vex.Led.on--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Led.on--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Led.on--examples","text":"led1.on()","title":"Examples:"},{"location":"SDK/sensors/#vex.Led.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Led.value--the-current-value-of-the-led","text":"","title":"The current value of the led"},{"location":"SDK/sensors/#vex.Led.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Led.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#pneumatics","text":"","title":"Pneumatics"},{"location":"SDK/sensors/#vex.Pneumatics","text":"","title":"Pneumatics"},{"location":"SDK/sensors/#vex.Pneumatics--pneumatics-class-create-a-new-pneumatics-driver-class","text":"","title":"Pneumatics class - create a new pneumatics driver class"},{"location":"SDK/sensors/#vex.Pneumatics--arguments","text":"port : The 3wire port to use for the pneumatics","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pneumatics--returns","text":"An instance of the Pneumatics class","title":"Returns:"},{"location":"SDK/sensors/#vex.Pneumatics--examples","text":"p1 = Pneumatics(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.Pneumatics.close","text":"","title":"close"},{"location":"SDK/sensors/#vex.Pneumatics.close--set-the-pneumatics-driver-to-the-close-state","text":"","title":"Set the pneumatics driver to the close state"},{"location":"SDK/sensors/#vex.Pneumatics.close--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pneumatics.close--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Pneumatics.close--examples","text":"p1.close()","title":"Examples:"},{"location":"SDK/sensors/#vex.Pneumatics.open","text":"","title":"open"},{"location":"SDK/sensors/#vex.Pneumatics.open--set-the-pneumatics-driver-to-the-open-state","text":"","title":"Set the pneumatics driver to the open state"},{"location":"SDK/sensors/#vex.Pneumatics.open--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pneumatics.open--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.Pneumatics.open--examples","text":"p1.open()","title":"Examples:"},{"location":"SDK/sensors/#vex.Pneumatics.value","text":"","title":"value"},{"location":"SDK/sensors/#vex.Pneumatics.value--the-current-state-of-the-pneumatics-driver","text":"","title":"The current state of the pneumatics driver"},{"location":"SDK/sensors/#vex.Pneumatics.value--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Pneumatics.value--returns","text":"1 or 0","title":"Returns:"},{"location":"SDK/sensors/#vision-sensor","text":"","title":"Vision Sensor"},{"location":"SDK/sensors/#vex.Vision","text":"","title":"Vision"},{"location":"SDK/sensors/#vex.Vision--vision-class-a-class-for-working-with-the-vision-sensor","text":"","title":"Vision class - a class for working with the vision sensor"},{"location":"SDK/sensors/#vex.Vision--arguments","text":"port : The smartport this device is attached to brightness (optional) : set the brightness value for the vision sensor sigs (optional) : one or more signature objects","title":"Arguments:"},{"location":"SDK/sensors/#vex.Vision--returns","text":"An instance of the Vision class","title":"Returns:"},{"location":"SDK/sensors/#vex.Vision--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Vision.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.Vision.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.Vision.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Vision.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.Vision.take_snapshot","text":"","title":"take_snapshot"},{"location":"SDK/sensors/#vex.Vision.take_snapshot--request-the-vision-sensor-to-filter-latest-objects-to-match-signature-or-code","text":"","title":"Request the vision sensor to filter latest objects to match signature or code"},{"location":"SDK/sensors/#vex.Vision.take_snapshot--arguments","text":"index : A signature, code or signature id. count (optional) : the maximum number of objects to obtain. default is 1.","title":"Arguments:"},{"location":"SDK/sensors/#vex.Vision.take_snapshot--returns","text":"tuple of VisionObject or None if nothing is available","title":"Returns:"},{"location":"SDK/sensors/#vex.Vision.take_snapshot--examples","text":"# look for and return 1 object matching SIG_1\\ objects = vision1.take_snapshot(SIG_1) # look for and return a maximum of 4 objects matching SIG_1\\ objects = vision1.take_snapshot(SIG_1, 4)","title":"Examples:"},{"location":"SDK/sensors/#vex.Vision.timestamp","text":"","title":"timestamp"},{"location":"SDK/sensors/#vex.Vision.timestamp--request-the-timestamp-of-last-received-message-from-the-vision-sensor","text":"","title":"Request the timestamp of last received message from the vision sensor"},{"location":"SDK/sensors/#vex.Vision.timestamp--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.Vision.timestamp--returns","text":"timestamp of the last status packet in mS","title":"Returns:"},{"location":"SDK/sensors/#vision-object","text":"","title":"Vision Object"},{"location":"SDK/sensors/#vex.VisionObject","text":"A vision object, not instantiated by user programs","title":"VisionObject"},{"location":"SDK/sensors/#signature","text":"","title":"Signature"},{"location":"SDK/sensors/#vex.Signature","text":"","title":"Signature"},{"location":"SDK/sensors/#vex.Signature--signature-class-a-class-for-holding-vision-sensor-signatures","text":"","title":"Signature class - a class for holding vision sensor signatures"},{"location":"SDK/sensors/#vex.Signature--arguments","text":"index : The signature index p0 : signature value p0 p1 : signature value p1 p2 : signature value p2 p3 : signature value p3 p4 : signature value p4 p5 : signature value p5 sigrange : signature range sigtype : signature type","title":"Arguments:"},{"location":"SDK/sensors/#vex.Signature--returns","text":"An instance of the Signature class","title":"Returns:"},{"location":"SDK/sensors/#vex.Signature--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ vision1 = Vision(Ports.PORT1, 50, SIG_1)","title":"Examples:"},{"location":"SDK/sensors/#vex.Signature.id","text":"Not used, always returns 0","title":"id"},{"location":"SDK/sensors/#code","text":"","title":"Code"},{"location":"SDK/sensors/#vex.Code","text":"","title":"Code"},{"location":"SDK/sensors/#vex.Code--code-class-a-class-for-holding-vision-sensor-codes","text":"A vision code is a collection of up to five vision signatures.","title":"Code class - a class for holding vision sensor codes"},{"location":"SDK/sensors/#vex.Code--arguments","text":"sig1 : A vision signature sig2 : A vision signature sig3 (optional) : A vision signature sig4 (optional) : A vision signature sig5 (optional) : A vision signature","title":"Arguments:"},{"location":"SDK/sensors/#vex.Code--returns","text":"An instance of the Signature class","title":"Returns:"},{"location":"SDK/sensors/#vex.Code--examples","text":"SIG_1 = Signature(1, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ SIG_2 = Signature(2, 6035, 7111, 6572, -1345, -475, -910, 3.000, 0)\\ C1 = Code(SIG_1, SIG_2)","title":"Examples:"},{"location":"SDK/sensors/#vex.Code.id","text":"Not used, always returns 0","title":"id"},{"location":"SDK/sensors/#message-link","text":"","title":"Message Link"},{"location":"SDK/sensors/#vex.MessageLink","text":"","title":"MessageLink"},{"location":"SDK/sensors/#vex.MessageLink--messagelink-class-a-class-for-communicating-using-vexlink","text":"","title":"MessageLink class - a class for communicating using VEXlink"},{"location":"SDK/sensors/#vex.MessageLink--arguments","text":"port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink--returns","text":"An instance of the MessageLink class","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink--examples","text":"link = MessageLink(Ports.PORT1, 'james', VexlinkType.MANAGER)","title":"Examples:"},{"location":"SDK/sensors/#vex.MessageLink.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.MessageLink.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.MessageLink.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink.is_linked","text":"","title":"is_linked"},{"location":"SDK/sensors/#vex.MessageLink.is_linked--return-link-status","text":"","title":"Return link status"},{"location":"SDK/sensors/#vex.MessageLink.is_linked--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink.is_linked--returns","text":"True if the link is active and connected to the paired brain.","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink.receive","text":"","title":"receive"},{"location":"SDK/sensors/#vex.MessageLink.receive--receive-the-next-message","text":"","title":"Receive the next message"},{"location":"SDK/sensors/#vex.MessageLink.receive--arguments","text":"timeout (optional) : An optional timeout value in mS before the function returns.","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink.receive--returns","text":"None or received message","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink.receive--examples","text":"message = link.receive()","title":"Examples:"},{"location":"SDK/sensors/#vex.MessageLink.received","text":"","title":"received"},{"location":"SDK/sensors/#vex.MessageLink.received--register-a-function-to-be-called-when-a-message-is-received","text":"If the message is omitted then the callback will be called for all messages.","title":"Register a function to be called when a message is received"},{"location":"SDK/sensors/#vex.MessageLink.received--arguments","text":"message (optional) : A message name for which the callback will be called callback : A function that will be called when a message is received","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink.received--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink.received--examples","text":"def cb(message, link, index, value): print(link, message, index, value) link.received('test', cb)","title":"Examples:"},{"location":"SDK/sensors/#vex.MessageLink.send","text":"","title":"send"},{"location":"SDK/sensors/#vex.MessageLink.send--send-a-message-with-optional-parameters","text":"","title":"Send a message with optional parameters"},{"location":"SDK/sensors/#vex.MessageLink.send--arguments","text":"message : A string, the message to send index (optional) : A int such as port number value (optional) : A float","title":"Arguments:"},{"location":"SDK/sensors/#vex.MessageLink.send--returns","text":"length of transmitted data or None on error","title":"Returns:"},{"location":"SDK/sensors/#vex.MessageLink.send--examples","text":"# send the message 'test' with no parameters\\ link.send('test') # send the message 'test' with parameters\\ link.send('test', 1, 3.14)","title":"Examples:"},{"location":"SDK/sensors/#serial-link","text":"","title":"Serial Link"},{"location":"SDK/sensors/#vex.SerialLink","text":"","title":"SerialLink"},{"location":"SDK/sensors/#vex.SerialLink--seriallink-class-a-class-for-communicating-using-vexlink","text":"","title":"SerialLink class - a class for communicating using VEXlink"},{"location":"SDK/sensors/#vex.SerialLink--arguments","text":"port : The smartport the VEXlink radio is attached to name : The name of this link linktype : The type of this link, either VexlinkType.MANAGER or VexlinkType.WORKER wired (optional) : Set to True if this is a wired link","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink--returns","text":"An instance of the SerialLink class","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink--examples","text":"link = SerialLink(Ports.PORT1, 'james', VexlinkType.MANAGER)","title":"Examples:"},{"location":"SDK/sensors/#vex.SerialLink.installed","text":"","title":"installed"},{"location":"SDK/sensors/#vex.SerialLink.installed--check-for-device-connection","text":"","title":"Check for device connection"},{"location":"SDK/sensors/#vex.SerialLink.installed--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink.installed--returns","text":"True or False","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink.is_linked","text":"","title":"is_linked"},{"location":"SDK/sensors/#vex.SerialLink.is_linked--return-link-status","text":"","title":"Return link status"},{"location":"SDK/sensors/#vex.SerialLink.is_linked--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink.is_linked--returns","text":"True if the link is active and connected to the paired brain.","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink.receive","text":"","title":"receive"},{"location":"SDK/sensors/#vex.SerialLink.receive--receive-data-in-the-serial-link","text":"","title":"Receive data in the serial link"},{"location":"SDK/sensors/#vex.SerialLink.receive--arguments","text":"length : maximum amount of data to wait for timeout (optional) : An optional timeout value in mS before the function returns.","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink.receive--returns","text":"None or bytearray with data","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink.receive--examples","text":"# wait for 128 bytes of data for 1000mS\\ buffer = link.receive(128, 1000)","title":"Examples:"},{"location":"SDK/sensors/#vex.SerialLink.received","text":"","title":"received"},{"location":"SDK/sensors/#vex.SerialLink.received--register-a-function-to-be-called-when-data-is-received","text":"This will receive a bytearray and a length indicating how much","title":"Register a function to be called when data is received"},{"location":"SDK/sensors/#vex.SerialLink.received--arguments","text":"callback : A function that will be called when data is received","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink.received--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink.received--examples","text":"def cb(buffer, length): print(buffer, length) link.received(cb)","title":"Examples:"},{"location":"SDK/sensors/#vex.SerialLink.send","text":"","title":"send"},{"location":"SDK/sensors/#vex.SerialLink.send--send-a-buffer-of-length-length","text":"","title":"Send a buffer of length length"},{"location":"SDK/sensors/#vex.SerialLink.send--arguments","text":"buffer : A string or bytearray, the message to send","title":"Arguments:"},{"location":"SDK/sensors/#vex.SerialLink.send--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.SerialLink.send--examples","text":"# send the string 'test'\\ link.send('test') # send the bytearray 'test' with parameters\\ link.send('test', 1, 3.14)","title":"Examples:"},{"location":"SDK/sensors/#addressable-led","text":"","title":"Addressable LED"},{"location":"SDK/sensors/#vex.AddressableLed","text":"","title":"AddressableLed"},{"location":"SDK/sensors/#vex.AddressableLed--addressable-led-class","text":"","title":"Addressable led class"},{"location":"SDK/sensors/#vex.AddressableLed--arguments","text":"port : The 3wire port to use for the addressable led strip","title":"Arguments:"},{"location":"SDK/sensors/#vex.AddressableLed--returns","text":"An instance of the AddressableLed class","title":"Returns:"},{"location":"SDK/sensors/#vex.AddressableLed--examples","text":"addr1 = AddressableLed(brain.three_wire_port.a)","title":"Examples:"},{"location":"SDK/sensors/#vex.AddressableLed.clear","text":"","title":"clear"},{"location":"SDK/sensors/#vex.AddressableLed.clear--clear-all-addressable-led-to-off","text":"","title":"clear all addressable led to off"},{"location":"SDK/sensors/#vex.AddressableLed.clear--arguments","text":"None","title":"Arguments:"},{"location":"SDK/sensors/#vex.AddressableLed.clear--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.AddressableLed.clear--examples","text":"addr1.clear()","title":"Examples:"},{"location":"SDK/sensors/#vex.AddressableLed.set","text":"","title":"set"},{"location":"SDK/sensors/#vex.AddressableLed.set--set-the-addressable-led-strip-to-provided-values","text":"","title":"Set the addressable led strip to provided values"},{"location":"SDK/sensors/#vex.AddressableLed.set--arguments","text":"data : An list of Color values offset (optional) : index of led to start at, 0 based","title":"Arguments:"},{"location":"SDK/sensors/#vex.AddressableLed.set--returns","text":"None","title":"Returns:"},{"location":"SDK/sensors/#vex.AddressableLed.set--examples","text":"addr1 = AddressableLed(brain.three_wire_port.a)\\ pix = [Color(0x800000),Color(0x008000),Color(0x000080)]\\ addr1.set(pix)","title":"Examples:"}]}